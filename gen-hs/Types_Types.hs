{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Types_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


data TypeType = Undefined|Module|Function|Class|Interface|Named|TypeVariable|Tuple|List  deriving (Show,Eq, Typeable, Ord)
instance Enum TypeType where
  fromEnum t = case t of
    Undefined -> 0
    Module -> 1
    Function -> 2
    Class -> 3
    Interface -> 4
    Named -> 5
    TypeVariable -> 6
    Tuple -> 7
    List -> 8
  toEnum t = case t of
    0 -> Undefined
    1 -> Module
    2 -> Function
    3 -> Class
    4 -> Interface
    5 -> Named
    6 -> TypeVariable
    7 -> Tuple
    8 -> List
    _ -> throw ThriftException
instance Hashable TypeType where
  hashWithSalt salt = hashWithSalt salt . fromEnum
data TypeProto = TypeProto{f_TypeProto_cls :: Maybe TypeType,f_TypeProto_name :: Maybe Text,f_TypeProto_items :: Maybe (Vector.Vector Int32),f_TypeProto_params :: Maybe (Vector.Vector Int32),f_TypeProto_inputs :: Maybe Int32,f_TypeProto_outputs :: Maybe Int32,f_TypeProto_type :: Maybe Int32} deriving (Show,Eq,Typeable)
instance Hashable TypeProto where
  hashWithSalt salt record = salt   `hashWithSalt` f_TypeProto_cls record   `hashWithSalt` f_TypeProto_name record   `hashWithSalt` f_TypeProto_items record   `hashWithSalt` f_TypeProto_params record   `hashWithSalt` f_TypeProto_inputs record   `hashWithSalt` f_TypeProto_outputs record   `hashWithSalt` f_TypeProto_type record  
write_TypeProto oprot record = do
  writeStructBegin oprot "TypeProto"
  case f_TypeProto_cls record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cls",T_I32,1)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_TypeProto_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_TypeProto_items record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("items",T_LIST,3)
    (let f = Vector.mapM_ (\_viter2 -> writeI32 oprot _viter2) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_TypeProto_params record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("params",T_LIST,4)
    (let f = Vector.mapM_ (\_viter3 -> writeI32 oprot _viter3) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_TypeProto_inputs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("inputs",T_I32,5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_TypeProto_outputs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("outputs",T_I32,6)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_TypeProto_type record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("type",T_I32,7)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_TypeProto_fields iprot record = do
  (_,_t5,_id6) <- readFieldBegin iprot
  if _t5 == T_STOP then return record else
    case _id6 of 
      1 -> if _t5 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_TypeProto_fields iprot record{f_TypeProto_cls=Just s}
        else do
          skip iprot _t5
          read_TypeProto_fields iprot record
      2 -> if _t5 == T_STRING then do
        s <- readString iprot
        read_TypeProto_fields iprot record{f_TypeProto_name=Just s}
        else do
          skip iprot _t5
          read_TypeProto_fields iprot record
      3 -> if _t5 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype10,_size7) <- readListBegin iprot; f _size7})
        read_TypeProto_fields iprot record{f_TypeProto_items=Just s}
        else do
          skip iprot _t5
          read_TypeProto_fields iprot record
      4 -> if _t5 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype15,_size12) <- readListBegin iprot; f _size12})
        read_TypeProto_fields iprot record{f_TypeProto_params=Just s}
        else do
          skip iprot _t5
          read_TypeProto_fields iprot record
      5 -> if _t5 == T_I32 then do
        s <- readI32 iprot
        read_TypeProto_fields iprot record{f_TypeProto_inputs=Just s}
        else do
          skip iprot _t5
          read_TypeProto_fields iprot record
      6 -> if _t5 == T_I32 then do
        s <- readI32 iprot
        read_TypeProto_fields iprot record{f_TypeProto_outputs=Just s}
        else do
          skip iprot _t5
          read_TypeProto_fields iprot record
      7 -> if _t5 == T_I32 then do
        s <- readI32 iprot
        read_TypeProto_fields iprot record{f_TypeProto_type=Just s}
        else do
          skip iprot _t5
          read_TypeProto_fields iprot record
      _ -> do
        skip iprot _t5
        readFieldEnd iprot
        read_TypeProto_fields iprot record
read_TypeProto iprot = do
  _ <- readStructBegin iprot
  record <- read_TypeProto_fields iprot (TypeProto{f_TypeProto_cls=Nothing,f_TypeProto_name=Nothing,f_TypeProto_items=Nothing,f_TypeProto_params=Nothing,f_TypeProto_inputs=Nothing,f_TypeProto_outputs=Nothing,f_TypeProto_type=Nothing})
  readStructEnd iprot
  return record
data Type = Type{f_Type_types :: Maybe (Vector.Vector TypeProto)} deriving (Show,Eq,Typeable)
instance Hashable Type where
  hashWithSalt salt record = salt   `hashWithSalt` f_Type_types record  
write_Type oprot record = do
  writeStructBegin oprot "Type"
  case f_Type_types record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("types",T_LIST,1)
    (let f = Vector.mapM_ (\_viter19 -> write_TypeProto oprot _viter19) in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Type_fields iprot record = do
  (_,_t21,_id22) <- readFieldBegin iprot
  if _t21 == T_STOP then return record else
    case _id22 of 
      1 -> if _t21 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) ((read_TypeProto iprot)) in do {(_etype26,_size23) <- readListBegin iprot; f _size23})
        read_Type_fields iprot record{f_Type_types=Just s}
        else do
          skip iprot _t21
          read_Type_fields iprot record
      _ -> do
        skip iprot _t21
        readFieldEnd iprot
        read_Type_fields iprot record
read_Type iprot = do
  _ <- readStructBegin iprot
  record <- read_Type_fields iprot (Type{f_Type_types=Nothing})
  readStructEnd iprot
  return record
