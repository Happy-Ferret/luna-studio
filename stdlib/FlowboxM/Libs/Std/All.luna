
# # ###### File ###################################

# # class File:
# #     def readFile self name:
# #         ```getIO $ liftFIO1 hsLib_System_IO_readFile #{name}```

# #     def writeFile self name content:
# #         content = content.toString
# #         ```getIO $ liftFIO2 hsLib_System_IO_writeFile #{name} #{content}```


# ###### Console ################################

# def print msg:
#     ```print' #{msg}```

# ###### List ###################################

# def List.at index:
#     ```(flattenCtx `dot2` liftf2 (!!)) #{self} #{index}```

# def List.+ l2:
#     ```liftf2 (++) #{self} #{l2}```

# def List.contains el:
#     ```liftf2 (elem) (val #{el}) #{self}```

# def List.length:
#     ```liftf1 length #{self}```

# def List.each callback:
#     ```let {mymap = liftf2 map}```
#     ```mymap (val $ call1 #{callback}) #{self}```

# ###### Bool ####################################

# def Bool.not:
#     ```liftf1 not #{self}```

# ###### Int ####################################

# def Int.+ a:
#     ```liftf2 (+) #{self} #{a}```

# def Int.* a:
#     ```liftf2 (*) #{self} #{a}```

# def Int./ a:
#     ```liftf2 (-) #{self} #{a}```

# ###### Float ##################################

# def Float.+ a:
#     ```liftf2 (+) #{self} #{a}```

# def Float./ a:
#     ```liftf2 (/) #{self} #{a}```

# def Float.* a:
#     ```liftf2 (*) #{self} #{a}```

# def Float.- a:
#     ```liftf2 (-) #{self} #{a}```


# ###############################################

# def readImage path:
#     ```flattenCtx $ liftf1 readImage #{path}```

# def Image.writeImage path:
#     ```flattenCtx $ liftf2 writeImage #{path} #{self}```
#     self

# def Image.adjustCB contrast brightness:
#     ```liftf3 adjustCB #{contrast} #{brightness} #{self}```

# def Image.convolve kernel:
#     ```liftf2 convolve #{kernel} #{self}```

# def Image.getChannel name:
#     ```liftf2 imgChannelGet #{name} #{self}```

# def Image.putChannel name channel:
#     ```liftf3 imgChannelInsert #{name} #{channel} #{self}```

# # FIXME [wd] zr√≥b to
# # def Channel.map self callback:
#     # ```liftf2 channelMap (val $ ((fromPure.fromSafe) `dot2` call1) #{callback}) #{self}```
#     # ```liftf2 channelMap (val $ call1 #{callback}) #{self}```

# def Channel.erode:
#     ```liftf1 erodeChannel #{self}```

# def constant x:
#     ```liftf1 constant #{x}```

# # class Channel:
# #     zip ...:
# #         ``` ... ```

# # class Channel a:
# #     Raw :: RawData a
# #     # Acc ::

# # class Vector a = Vector: x :: a
# #                          y :: a
# #                          z :: a
# #                | Scalar: a :: a
# #                | Vector2: x :: a

# class Vector a:
#     x,y,z :: a

#     def test x:
#         x

#     def + v2:
#         Vector (x + v2.x) (y + v2.y) (z + v2.z)
