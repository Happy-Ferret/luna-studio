
# ###### File ###################################

# class File:
#     def readFile self name:
#         ```getIO $ liftFIO1 hsLib_System_IO_readFile #{name}```

#     def writeFile self name content:
#         content = content.toString
#         ```getIO $ liftFIO2 hsLib_System_IO_writeFile #{name} #{content}```


###### Console ################################

class Console:
    def print self msg:
        ```print' #{msg}```

###### List ###################################

def List.at self index:
    ```(flattenCtx `dot2` liftf2 (!!)) #{self} #{index}```

def List.+ self l2:
    ```liftf2 (++) #{self} #{l2}```

def List.contains self el:
    ```liftf2 (elem) (val #{el}) #{self}```

def List.length self:
    ```liftf1 length #{self}```

def List.each self callback:
    ```let {mymap = liftf2 map}```
    ```mymap (val $ call1 #{callback}) #{self}```

###### Bool ####################################

def Bool.not self:
    ```liftf1 not #{self}```

###### Int ####################################

def Int.+ a b:
    ```liftf2 (+) #{a} #{b}```

def Int.* a b:
    ```liftf2 (*) #{a} #{b}```

def Int./ a b:
    ```liftf2 (-) #{a} #{b}```

###### Float ##################################

def Float.+ a b:
    ```liftf2 (+) #{a} #{b}```

def Float./ a b:
    ```liftf2 (/) #{a} #{b}```

def Float.* a b:
    ```liftf2 (*) #{a} #{b}```

def Float.- a b:
    ```liftf2 (-) #{a} #{b}```


###############################################

def readImage self path:
    ```flattenCtx $ liftf1 readImage #{path}```

def ImgF.writeImage self path:
    ```flattenCtx $ liftf2 writeImage #{path} #{self}```
    self

def ImgF.adjustCB self contrast brightness:
    ```flattenCtx $ liftf3 adjustCB #{contrast} #{brightness} #{self}```

def ImgF.convolve self kernel:
    ```flattenCtx $ liftf2 convolve #{kernel} #{self}```

def ImgF.getChannel self name:
    ```flattenCtx $ liftf2 imgChannelGet #{name} #{self}```

def ImgF.putChannel self name channel:
    ```flattenCtx $ liftf3 imgChannelInsert #{name} #{channel} #{self}```

# def ChannelF.map self callback:
#     ```let {mymap = liftf2 channelMap}```
#     ```flattenCtx $ mymap (val $ call1 #{callback}) #{self}```

# def ChannelF.erode self:
#     ```flattenCtx $ liftf1 erodeChannel #{self}```

# class Channel:
#     zip ...:
#         ``` ... ```

# class Channel a:
#     Raw :: RawData a
#     # Acc ::

# class Vector a = Vector: x :: a
#                          y :: a
#                          z :: a
#                | Scalar: a :: a
#                | Vector2: x :: a

class Vector a:
    x,y,z :: a

    def test self x:
        x

    def + self v2:
        Vector (self.x() + v2.x()) (self.y() + v2.y()) (self.z() + v2.z())

def main self:
    # v = Vector 1 2 3
    c = Console()
    # c.print v
    # c.print (v+v)

    # a = [1..10].each x:
    #     Console().print x

    # c.print $ a.at 5
    # c.print $ self.testm 15

    path = "lena.bmp"
    outpath = "luna.bmp"

    img = self.readImage path
    # c.print img
    c = 1.5
    b = 0.2
    k = 0.1
    kernel = [0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2]
    # img = img.adjustCB c b
    # img = img.convolve k

    chR = img.getChannel "r"
    chG = img.getChannel "g"
    chB = img.getChannel "b"

    # chR
    # chR = chR.erode #map (x : x)
    # chB = chB.map (x : 0)

    # img.putChannel "r" chB
    # img.putChannel "g" chR
    # img.putChannel "b" chG

    img.writeImage outpath
    # # c.print img

