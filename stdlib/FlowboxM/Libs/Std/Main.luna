
# ###### File ###################################

# class File:
#     def readFile self name:
#         ```getIO $ liftFIO1 hsLib_System_IO_readFile #{name}```

#     def writeFile self name content:
#         content = content.toString
#         ```getIO $ liftFIO2 hsLib_System_IO_writeFile #{name} #{content}```


###### Console ################################

def print msg:
    ```print' #{msg}```

###### List ###################################

def List.at index:
    ```(flattenCtx `dot2` liftf2 (!!)) #{self} #{index}```

def List.+ l2:
    ```liftf2 (++) #{self} #{l2}```

def List.contains el:
    ```liftf2 (elem) (val #{el}) #{self}```

def List.length:
    ```liftf1 length #{self}```

def List.each callback:
    ```let {mymap = liftf2 map}```
    ```mymap (val $ call1 #{callback}) #{self}```

###### Bool ####################################

def Bool.not:
    ```liftf1 not #{self}```

###### Int ####################################

def Int.+ a:
    ```liftf2 (+) #{self} #{a}```

def Int.- a:
    ```liftf2 (-) #{self} #{a}```

def Int.* a:
    ```liftf2 (*) #{self} #{a}```

def Int./ a:
    ```liftf2 (\a b -> toDouble a / toDouble b) #{self} #{a}```

def Int.< a:
    ```liftf2 (<) #{self} #{a}```

def Int.> a:
    ```liftf2 (>) #{self} #{a}```

def Int.sqrt:
    ```liftf1 (sqrt.toDouble) #{self}```

def Int.next:
    ```liftf1 (+1) #{self}```

def Int.prev:
    ```liftf1 (-1) #{self}```

###### Double ##################################

def Double.+ a:
    ```liftf2 (+) #{self} #{a}```

def Double.- a:
    ```liftf2 (-) #{self} #{a}```

def Double.* a:
    ```liftf2 (*) #{self} #{a}```
    
def Double./ a:
    ```liftf2 (/) #{self} #{a}```

def Double.< a:
    ```liftf2 (<) #{self} #{a}```

def Double.> a:
    ```liftf2 (>) #{self} #{a}```

def Double.sqrt:
    ```liftf1 sqrt #{self}```

def Double.next:
    ```liftf1 (+1) #{self}```

def Double.prev:
    ```liftf1 (-1) #{self}```



def raise el err:
    ```raise #{el} #{err}```

def catch el f:
    ```catch #{el} #{f}```

def isError a:
    ```isError #{a}```


class Sys:
    def exitSuccess:
        ```exitSuccess```
    def exitFailure:
        ```exitFailure```


###############################################

def cuda:
    ```liftf0 cuda```

def interp:
    ```liftf0 interp```


def readImageWord8 path:
    ```flattenCtx $ liftf1 readImage #{path}```

def readImage path:
    (readImageWord8 path).decompose.reprDouble


def Image.writeWord8 path backend:
    ```flattenCtx $ liftf3 writeImage #{self} #{path} #{backend}```
    self

def Image.write path backend:
    self.reprWord8.compose.writeWord8 path backend

def Image.compose:
    ```flattenCtx $ liftf1 compose #{self}```

def Image.decompose:
    ```flattenCtx $ liftf1 decompose #{self}```

def Image.reprDouble:
    ```liftf1 reprDouble #{self}```

def Image.reprWord8:
    ```liftf1 reprWord8 #{self}```

def Image.adjustCB contrast brightness:
    ```flattenCtx $ liftf3 adjustCB #{contrast} #{brightness} #{self}```

def Image.convolve kernel:
    ```flattenCtx $ liftf2 convolve #{kernel} #{self}```

def Image.getChannel name:
    ```flattenCtx $ liftf2 imgChannelGet #{name} #{self}```

def Image.putChannel name channel:
    ```liftf3 imgChannelInsert #{name} #{channel} #{self}```


def Double.invert:
    ```liftf1 invert #{self}```

def Double.invert_:
    ```liftf1 invert' #{self}```

def Double.sign:
    ```liftf1 sign #{self}```

def Double.parametrize lo hi:
    ```liftf3 parametrize #{lo} #{hi} #{self}```

def Double.bias b:
    ```liftf2 bias #{b} #{self}```

def Double.gain g:
    ```liftf2 gain #{g} #{self}```

def Double.gamma g:
    ```liftf2 gamma #{g} #{self}```

def Double.compress lo hi:
    ```liftf3 gamma #{lo} #{hi} #{self}```

def Double.expand lo hi:
    ```liftf3 expand #{lo} #{hi} #{self}```

def Double.remap loA hiA loB hiB:
    ```liftf5 remap #{loA} #{hiA} #{loB} #{hiB} #{self}```


# # FIXME [wd] zr√≥b to
# # def Channel.map self callback:
#     # ```liftf2 channelMap (val $ ((fromPure.fromSafe) `dot2` call1) #{callback}) #{self}```
#     # ```liftf2 channelMap (val $ call1 #{callback}) #{self}```

# def Channel.erode:
#    ```liftf1 erodeChannel #{self}```

# def constant x:
#     ```liftf1 constant #{x}```



class Vector a:
    x,y,z :: a

    def + v:
        Vector (x + v.x) (y + v.y) (z + v.z)

    def length:
        (x*x + y*y + z*z).sqrt

    def normalize:
        Vector (x/length) (y/length) (z/length)

def main:
    v = Vector 1 2 3
    print v
    print (v + v)
    print v.length
    print v.normalize
    print $ v.normalize + v.normalize
    backend = interp
    # v2 = Vector 0.5 0.5 0.5

    # print ((v2) + (v2))
    # c.print (v+v)

    # a = [1..10].each x:
    #     Console().print x

    # c.print $ a.at 5
    # c.print $ self.testm 15

    path = "lena.bmp"
    outpath = "luna.bmp"
    img = readImage path

    if isError img:
        print "oh no!"
        Sys.exitFailure
    
    print path
    print "=========="
    img.write outpath backend
    print "=========="
    # print img

    # print path
    # img = readImage path
    # # c.print img
    c = 1.5
    b = 0.2
    k = 0.1
    # # kernel = [0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2]
    img = img.adjustCB c b
    
    outpath2 = "luna2.bmp"
    print "=========="
    img.write outpath2 backend
    
    # # img = img.convolve k

    # chR = img.getChannel "r"
    # chG = img.getChannel "g"
    # chB = img.getChannel "b"

    # # chR
    # # chR = chR.map (x : x)
    # # a = [1,2,3].each x : x+1
    # # console.print a
    # # chB = chB.map (x : Main.constant 0.0)

    # img = img.putChannel "r" chR.erode()
    # img = img.putChannel "g" chG.erode()
    # img = img.putChannel "b" chB.erode()

    # img.writeImage outpath
    # # # c.print img

