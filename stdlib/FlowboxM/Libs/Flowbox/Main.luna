import ```Flowbox.Graphics.Mockup```
import ```Flowbox.Graphics.Image.Image```
import ```Flowbox.Graphics.Composition.Generators.Keyer```

class Vector a:
    x,y,z :: a
    def test a b:
        (a, b)

def print msg:
    ```autoLift1 print #{msg}```

def Int.add a:
    ```liftF2 (+) #{self} #{a}```

def Int.sub a:
    ```liftF2 (-) #{self} #{a}```

def Int.mul a:
    ```liftF2 (*) #{self} #{a}```

def Int.div a:
    ```liftF2 (/) #{self} #{a}```

def Int.gt a:
    ```liftF2 (>) #{self} #{a}```

def Int.eq a:
    ```liftF2 (==) #{self} #{a}```

def Int.lt a:
    ```liftF2 (<) #{self} #{a}```

def Int.lte a:
    ```liftF2 (<=) #{self} #{a}```

def Int.gte a:
    ```liftF2 (>=) #{self} #{a}```

# def Int.inc:
#     self.add 1

# def Int.dec:
#     self.sub 1


def load path:
    ```autoLift1 loadImageLuna #{path}```

def Image.save path:
    ```autoLift2 saveImageLuna #{path} #{self}```

def Image.defocus radius:
    ```liftF1 (onEachChannel $ defocus #{radius}) #{self}```

def Image.motionBlur size angle:
    ```liftF1 (onEachChannel $ motionBlur #{size} #{angle}) #{self}```

def Image.bilateral psigma csigma size:
    ```liftF1 (onEachChannel $ bilateral #{psigma} #{csigma} #{size}) #{self}```

def Image.offset value:
    ```liftF1 (onEachValue $ offsetLuna #{value}) #{self}```

def Image.contrast value:
    ```liftF1 (onEachValue $ contrastLuna #{value}) #{self}```

def Image.exposure blackpoint ex:
    ```liftF1 (onEachValue $ exposureLuna #{blackpoint} #{ex}) #{self}```

def Image.colorCorrect saturation contrast gamma gain offset:
    ```liftF1 (onEachRGB $ colorCorrectLuna #{saturation} #{contrast} #{gamma} #{gain} #{offset}) #{self}```

def Image.grade blackpoint whitepoint lift gain multiply offset gamma:
    ```liftF1 (onEachValue $ gradeLuna #{blackpoint} #{whitepoint} #{lift} #{gain} #{multiply} #{offset} #{gamma}) #{self}```

def Image.saturate saturation:
    ```liftF1 (onEachRGB $ saturateLuna #{saturation}) #{self}```

def Image.posterize colors:
    ```liftF1 (onEachValue $ posterizeLuna #{colors}) #{self}```

class ```Bool```:
    True
    False

class ```KeyerMode```:
    Red
    Green
    Blue
    Redscreen
    Greenscreen
    Bluescreen
    Saturation
    Luminance
    Max
    Min

def Image.key mode a b c d:
    ```liftF1 (keyerLuna #{mode} #{a} #{b} #{c} #{d}) #{self}```

def Image.differenceKey offset gain background:
    ```liftF2 (differenceKeyerLuna #{offset} #{gain}) #{background} #{self}```

def main:
    rgba = load "/home/mgw/green.jpg"
    back = load "/home/mgw/g.png"
    defocused = rgba.differenceKey 0 1 back
    defocused.save "/home/mgw/out.png"
