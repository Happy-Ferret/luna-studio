#% +OrphanNames

foreign haskell import qualified Data.Array.Accelerate as A

#include Prelude/Prelude.lunaturbo
#include Graphics/Geom2D/Geom.lunaturbo
#include Graphics/Math/Math.lunaturbo
#include Graphics/Color/Color.lunaturbo
#include Graphics/Matte/Matte.lunaturbo

#include Graphics/Image/Image.lunaturbo
#include Graphics/Image/View.lunaturbo

#include Graphics/Image/Constants.lunaturbo
#include Graphics/Image/Merge.lunaturbo
#include Graphics/Image/Noise.lunaturbo
#include Graphics/Image/Dithering.lunaturbo

#include Graphics/Compo/ColorCorrect/ColorCorrection.lunaturbo
#include Graphics/Compo/FilterTransform/FilterTransform.lunaturbo
#include Graphics/Compo/Keying/Keying.lunaturbo

#
#                OTHER
#

alias Time=Float

def time:
    0.0

def render a path time:
    a.save (applyTime path time)

foreign haskell def applyTime path time:
    liftF2 applyTime time path

def foo a:
	a

def read path gamma:
    img = readRaw path
    img.gammaToLinear gamma

foreign haskell def printfInt str int:
    liftF2 printfInt str int

def readSeq path fileName gamma frame:
    read (printfInt ((path.++"/").++fileName) (frame.floor)) gamma

def Image.save path gamma:
    img = self.gammaFromLinear gamma
    img.saveRaw path
    self
