#
#                STD
#

import ```Data.Maybe (fromJust)```

import ```Flowbox.Graphics.Mockup```
import ```Flowbox.Graphics.Mockup.Basic```

class ```Bool```:
    True
    False

def Bool.toString:
    ```liftF1 show #{self}```

class ```Maybe``` a:
    Just:
        unwrap :: a
    Nothing

class ```Either``` a b:
    Left: l :: a
    Right: r :: b

def Either.unwrap:
    ```liftF1 (either (error "unwrap called on Left") id) #{self}```

class Range:
    lo, hi :: Float

alias FilePath = String

class ```Metric```:
    Chebyshev
    Euclidean
    Minkowski: p :: Float
    Taxicab

class ```Boundary```:
    Clamp
    # Mirror # WARN: does not work yet
    Wrap
    Constant: a :: Float

def null a:
    a

def print msg:
    ```autoLift1 print #{msg}```

# CHAR

def Char.toString:
    ```liftF2 (:) #{self} (val ([] :: String))```

# INT

def Int.+ a:
    ```liftF2 (+) #{self} #{a}```

def Int.- a:
    ```liftF2 (-) #{self} #{a}```

def Int.* a:
    ```liftF2 (*) #{self} #{a}```

def Int./ a:
    ```liftF2 (/) #{self} #{a}```

def Int.> a:
    ```liftF2 (>) #{self} #{a}```

def Int.== a:
    ```liftF2 (==) #{self} #{a}```

def Int.< a:
    ```liftF2 (<) #{self} #{a}```

def Int.<= a:
    ```liftF2 (<=) #{self} #{a}```

def Int.>= a:
    ```liftF2 (>=) #{self} #{a}```

def Int.inc:
    self + 1

def Int.dec:
    self - 1

def Int.fromIntegral:
    ```liftF1 fromIntegral #{self} :: Value Pure Safe Float```

def Int.toString:
    ```liftF1 show #{self}```

# DOUBLE

def Float.acc:
    ```liftF1 variable #{self}```

def Float.truncate:
    ```liftF1 truncate #{self} :: Value Pure Safe Int```

def Float.round:
    ```liftF1 round #{self} :: Value Pure Safe Int```

def Float.floor:
    ```liftF1 floor #{self} :: Value Pure Safe Int```

def Float.ceiling:
    ```liftF1 ceiling #{self} :: Value Pure Safe Int```

def Float.+ a:
    ```liftF2 (+) #{self} #{a}```

def Float.- a:
    ```liftF2 (-) #{self} #{a}```

def Float.* a:
    ```liftF2 (*) #{self} #{a}```

def Float./ a:
    ```liftF2 (/) #{self} #{a}```

def Float.> a:
    ```liftF2 (>) #{self} #{a}```

def Float.== a:
    ```liftF2 (==) #{self} #{a}```

def Float.< a:
    ```liftF2 (<) #{self} #{a}```

def Float.<= a:
    ```liftF2 (<=) #{self} #{a}```

def Float.>= a:
    ```liftF2 (>=) #{self} #{a}```

def Float.toString:
    ```liftF1 show #{self}```

# def Float.floor:
#     ```liftF1 floor #{self}```
