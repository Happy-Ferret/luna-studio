#
#                IMAGE - COLOR CORRECTION
#

foreign haskell import Flowbox.Graphics.Mockup.ColorCorrect

foreign haskell def Image.gammaToLinear gamma:
    -- realGamma = ```val $ Gamma (2.2 :: A.Exp Float)```
    liftF2 gammaToLinearLuna gamma self

foreign haskell def Image.gammaFromLinear gamma:
    -- realGamma = ```val $ Gamma (2.2 :: A.Exp Float)```
    liftF2 gammaFromLinearLuna gamma self

foreign haskell def Image.clamp thresholds clamps:
    liftF3 clampLuna thresholds clamps self

foreign haskell def Image.offsetRaw value matte:
    liftF3 offsetLuna value matte self
def Image.offset value matte:
    self.offsetRaw value.toRGBA matte

foreign haskell def Image.contrastRaw value matte:
    liftF3 contrastLuna value matte self
def Image.contrast value matte:
    self.contrastRaw value.toRGBA matte

foreign haskell def Image.exposureRaw blackpoint ex matte:
    liftF4 exposureLuna blackpoint ex matte self
def Image.exposure blackpoint ex matte:
    self.exposure blackpoint.toRGBA ex.toRGBA matte

foreign haskell def Image.saturateRaw saturation:
    liftF2 saturateLuna saturation self
def Image.saturate saturation:
    self.saturateRaw saturation.toRGBA

# foreign haskell def Image.hsvTool hueRange hueRotation hueRolloff
#             saturationRange saturationAdjustment saturationRolloff
#             brightnessRange brightnessAdjustment brightnessRolloff:
#     hueRangeStart = hueRange.lo
#     hueRangeEnd   = hueRange.hi
#     saturationRangeStart = saturationRange.lo
#     saturationRangeEnd   = saturationRange.hi
#     brightnessRangeStart = brightnessRange.lo
#     brightnessRangeEnd   = brightnessRange.hi
#
#     # ```liftF1 (onEachRGB $ hsvToolLuna hueRangeStart hueRangeEnd hueRotation hueRolloff
#     #                        saturationRangeStart saturationRangeEnd saturationAdjustment saturationRolloff
#     #                        brightnessRangeStart brightnessRangeEnd brightnessAdjustment brightnessRolloff) self```
#     ```hsvToolLuna hueRangeStart hueRangeEnd hueRotation hueRolloff
#               saturationRangeStart saturationRangeEnd saturationAdjustment saturationRolloff
#               brightnessRangeStart brightnessRangeEnd brightnessAdjustment brightnessRolloff self```

foreign haskell def Image.multiplyRaw val matte:
    liftF3 multiplyLuna val matte self
def Image.multiply val matte:
    self.multiplyRaw val.toRGBA matte

foreign haskell def Image.gammaRaw val matte:
    liftF3 gammaLuna val matte self
def Image.gamma val matte:
    self.gammaRaw val.toRGBA matte

foreign haskell def Image.gradeRaw blackpoint whitepoint lift gain multiply offset gamma matte:
    liftF5 (gradeLunaColor blackpoint whitepoint lift gain) multiply offset gamma matte self
def Image.grade blackpoint whitepoint lift gain multiply offset gamma matte:
    self.gradeRaw blackpoint.toRGBA whitepoint.toRGBA lift.toRGBA gain.toRGBA multiply.toRGBA offset.toRGBA gamma.toRGBA matte

# alias HueCorrectGUI = (CurveGUI Float, CurveGUI Float, CurveGUI Float, CurveGUI Float, CurveGUI Float, CurveGUI Float, CurveGUI Float, CurveGUI Float)

foreign haskell class ColorCorrectCurves a:
    ColorCorrectCurves:
        shadows, highlights :: CurveGUI a

foreign haskell class ColorCC color:
    ColorCC:
        saturation, contrast, gamma, gain, offset :: color
    def toRGBA:
        ColorCC saturation contrast gamma gain offset = self
        ColorCC saturation.toRGBA contrast.toRGBA gamma.toRGBA gain.toRGBA offset.toRGBA

foreign haskell def Image.colorCorrectRaw master shadows midtones highlights:
    liftF5 colorCorrectLuna master shadows midtones highlights self
def Image.colorCorrect master shadows midtones highlights:
    self.colorCorrectRaw master.toRGBA shadows.toRGBA midtones.toRGBA highlights.toRGBA

foreign haskell def Image.colorCorrectCurvesRaw curves master shadows midtones highlights:
    liftF5 (colorCorrectLunaCurves curves) master shadows midtones highlights self
def Image.colorCorrectCurves curves master shadows midtones highlights:
    self.colorCorrectCurvesRaw curves master.toRGBA shadows.toRGBA midtones.toRGBA highlights.toRGBA

foreign haskell def Image.hueCorrect curves:
    liftF2 hueCorrectLuna curves self

foreign haskell def Image.premultiply:
    liftF1 premultiplyLuna self

foreign haskell def Image.unpremultiply:
    liftF1 unpremultiplyLuna self

foreign haskell def Image.invert:
    liftF1 invertLuna self
