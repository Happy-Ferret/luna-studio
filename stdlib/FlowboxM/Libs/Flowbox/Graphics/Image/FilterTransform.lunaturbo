#
#                IMAGE - FILTERS & TRANSFORMATIONS
#

import ```Flowbox.Graphics.Mockup.Filter```
import ```Flowbox.Graphics.Mockup.Transform```

def Image.posterize colors:
    ```liftF2 posterizeLuna #{colors} #{self}```

# def Image.defocus radius:
#     ```liftF2 defocus #{radius} #{self}```

# def Image.motionBlur size angle:
#     ```liftF3 motionBlur #{size} #{angle} #{self}```

# def Image.bilateral psigma csigma size:
#     ```liftF4 bilateral #{psigma} #{csigma} #{size} #{self}```

# def Image.cornerPin p1 p2 p3 p4:
#     p1x = p1.x
#     p1y = p1.y
#     p2x = p2.x
#     p2y = p2.y
#     p3x = p3.x
#     p3y = p3.y
#     p4x = p4.x
#     p4y = p4.y

#     ```liftF9 cornerPinLuna #{p1x} #{p1y} #{p2x} #{p2y} #{p3x} #{p3y} #{p4x} #{p4y} #{self}```

def Image.blur kernelSize:
    ```liftF2 blurLuna #{kernelSize} #{self}```

# def Image.laplacian kernelSize centerVal sideVal:
#     ```liftF4 laplacianLuna #{kernelSize} #{centerVal} #{sideVal} #{self}```

class ```V2``` a:
    x, y :: a

def Image.translate vec:
    ```liftF2 translateLuna #{vec} #{self}```

def Image.rotate phi:
    ```liftF2 rotateLuna #{phi} #{self}```

def Image.rotateAt point phi:
    ```liftF3 rotateAtLuna #{point} #{phi} #{self}```

def Image.scale vec:
    ```liftF2 scaleLuna #{vec} #{self}```

def Image.scaleAt point vec:
    ```liftF3 scaleAtLuna #{point} #{vec} #{self}```

def Image.transform trans:
    ```liftF2 transformLuna #{trans} #{self}```

def Image.crop rect:
    ```liftF2 cropLuna #{rect} #{self}```

def Image.erode size:
    ```liftF2 erodeLuna #{size} #{self}```

def Image.dilate size:
    ```liftF2 dilateLuna #{size} #{self}```

def Image.open size:
    ```liftF2 openLuna #{size} #{self}```

def Image.close size:
    ```liftF2 closeLuna #{size} #{self}```

# def Image.radialBlur size angle:
#     ```liftF3 radialBlurLuna #{size} #{angle} #{self}```

def Image.edgeDetect edgeOperator:
    ```liftF2 edgeDetectLuna #{edgeOperator} #{self}```

class ```InterpolationFilter```:
    NearestNeighbour
    Box
    Basic
    Triangle
    Bell
    BSpline
    Lanczos: a :: Float
    Polynomial: a, b :: Float
    Mitchell
    CatmullRom
    Gauss: a :: Float
    Dirac: a :: Float

# def Image.interpolate boundary filter:
#     ```liftF3 interpolateChannelsLuna #{boundary} #{filter} #{self}```

def Image.multisample grid filter:
    ```liftF3 multisampleChannelsLuna #{grid} #{filter} #{self}```
