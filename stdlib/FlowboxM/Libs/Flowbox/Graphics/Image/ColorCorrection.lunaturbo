#
#                IMAGE - COLOR CORRECTION
#

foreign haskell import Flowbox.Graphics.Mockup.ColorCorrect

foreign haskell def Image.gammaToLinear gamma:
    -- realGamma = ```val $ Gamma (2.2 :: A.Exp Float)```
    liftF2 gammaToLinearLuna gamma self

foreign haskell def Image.gammaFromLinear gamma:
    -- realGamma = ```val $ Gamma (2.2 :: A.Exp Float)```
    liftF2 gammaFromLinearLuna gamma self

foreign haskell def Image.clamp thresholds clamps:
    liftF3 clampLuna thresholds clamps self

foreign haskell def Image.offset value matte:
    liftF3 offsetLuna value matte self

foreign haskell def Image.contrast value matte:
    liftF3 contrastLuna value matte self

foreign haskell def Image.exposure blackpoint ex matte:
    liftF4 exposureLuna blackpoint ex matte self

foreign haskell def Image.saturate saturation:
    liftF2 saturateLuna saturation self

foreign haskell def Image.offsetMatte value matte:
    liftF3 offsetMatteLuna value matte self

foreign haskell def Image.contrastMatte value matte:
    liftF3 contrastMatteLuna value matte self

foreign haskell def Image.exposureMatte blackpoint ex matte:
    liftF4 exposureMatteLuna blackpoint ex matte self

foreign haskell def Image.gradeMatte blackpoint whitepoint lift gain multiply offset gamma matte:
    liftF5 (gradeLunaColorMatte blackpoint whitepoint lift gain) multiply offset gamma matte self


# foreign haskell def Image.hsvTool hueRange hueRotation hueRolloff
#             saturationRange saturationAdjustment saturationRolloff
#             brightnessRange brightnessAdjustment brightnessRolloff:
#     hueRangeStart = hueRange.lo
#     hueRangeEnd   = hueRange.hi
#     saturationRangeStart = saturationRange.lo
#     saturationRangeEnd   = saturationRange.hi
#     brightnessRangeStart = brightnessRange.lo
#     brightnessRangeEnd   = brightnessRange.hi
#
#     # ```liftF1 (onEachRGB $ hsvToolLuna hueRangeStart hueRangeEnd hueRotation hueRolloff
#     #                        saturationRangeStart saturationRangeEnd saturationAdjustment saturationRolloff
#     #                        brightnessRangeStart brightnessRangeEnd brightnessAdjustment brightnessRolloff) self```
#     ```hsvToolLuna hueRangeStart hueRangeEnd hueRotation hueRolloff
#               saturationRangeStart saturationRangeEnd saturationAdjustment saturationRolloff
#               brightnessRangeStart brightnessRangeEnd brightnessAdjustment brightnessRolloff self```

foreign haskell def Image.multiply val matte:
    liftF2 multiplyLuna val matte self

foreign haskell def Image.gamma val matte:
    liftF2 gammaLuna val matte self

foreign haskell def Image.grade blackpoint whitepoint lift gain multiply offset gamma matte:
    liftF5 (gradeLunaColor blackpoint whitepoint lift gain) multiply offset gamma matte self

alias ColorCorrectGUI = (CurveGUI, CurveGUI)
alias HueCorrectGUI = (CurveGUI, CurveGUI, CurveGUI, CurveGUI, CurveGUI, CurveGUI, CurveGUI, CurveGUI)
alias Color5 = (Color, Color, Color, Color ,Color)

foreign haskell def Image.colorCorrect master #masterSaturation masterContrast masterGamma masterGain masterOffset
                       shadows #shadowsSaturation shadowsContrast shadowsGamma shadowsGain shadowsOffset
                       midtones #midtonesSaturation midtonesContrast midtonesGamma midtonesGain midtonesOffset
                       highlights: --highlightsSaturation highlightsContrast highlightsGamma highlightsGain highlightsOffset:
    liftF5 colorCorrectLuna master shadows midtones highlights self

foreign haskell def Image.colorCorrectCurves curves
                       master #masterSaturation masterContrast masterGamma masterGain masterOffset
                       shadows #shadowsSaturation shadowsContrast shadowsGamma shadowsGain shadowsOffset
                       midtones #midtonesSaturation midtonesContrast midtonesGamma midtonesGain midtonesOffset
                       highlights: --highlightsSaturation highlightsContrast highlightsGamma highlightsGain highlightsOffset:
    liftF5 (colorCorrectLunaCurves curves) master shadows midtones highlights self

foreign haskell def Image.hueCorrect curves:
    liftF2 hueCorrectLuna curves self

foreign haskell def Image.premultiply:
    liftF1 premultiplyLuna self

foreign haskell def Image.unpremultiply:
    liftF1 unpremultiplyLuna self

foreign haskell def Image.invert:
    liftF1 invertLuna self

foreign haskell def Image.histEq bins:
    liftF2 histEqLuna bins self
