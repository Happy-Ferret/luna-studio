#
#                GEOM
#

foreign haskell import Flowbox.Geom2D.ControlPoint
foreign haskell import Flowbox.Geom2D.Mask
foreign haskell import Flowbox.Geom2D.Path
foreign haskell import Flowbox.Geom2D.Rectangle
foreign haskell import Flowbox.Geom2D.Shape
foreign haskell import Flowbox.Graphics.Mockup.Transform

foreign haskell import Flowbox.Graphics.Mockup (Point2 (..))

# TODO: convert cornerPin to use Point2
class Point a:
    x,y :: a

foreign haskell class Point2 a:
    Point2: x,y :: a

foreign haskell class Rectangle a:
    Rectangle: pA,pB :: Point2 a

foreign haskell class SkewOrder:
    SkewXY
    SkewYX

foreign haskell class Skew a:
    Skew:
        value :: V2 a
        order :: SkewOrder

foreign haskell class Transform a:
    Transform:
        translate :: V2 a
        rotate    :: a
        scale     :: V2 a
        skew      :: Skew a
        center    :: Point2 a

def point x y:
    Point2 x y

foreign haskell def nopoint:
    val (Nothing :: Maybe (Point2 Float))

foreign haskell class ControlPoint a:
    ControlPoint:
        point               :: Point2 a
        handleIn, handleOut :: Maybe (Point2 a)

foreign haskell class Path a:
    Path:
        closed   :: Bool
        vertices :: [ControlPoint a]

foreign haskell class Shape a:
    Shape:
        paths :: [Path a]

foreign haskell class Mask a:
    Mask:
        path    :: Path a
        feather :: Maybe (Path a)
