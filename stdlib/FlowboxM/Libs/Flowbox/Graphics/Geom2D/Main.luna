import ```Flowbox.Graphics.Mockup```
import ```Flowbox.Graphics.Image.Image```
import ```Flowbox.Geom2D.ControlPoint```
import ```Flowbox.Geom2D.Rasterizer```

class ```Bool```:
    True
    False

def Int.- a:
    ```liftF2 (-) #{self} #{a}```

class ```Maybe``` a:
    Just:
        unwarp :: a
    Nothing

class ```Point2``` a:
    x,y :: a

# class ```ControlPoint``` a:
# class ControlPoint2 a:
#     point :: Point2 a
#     handleIn, handleOut :: Maybe (Point2 a)

alias ControlPoint2 a = (Point2 a, Maybe (Point2 a), Maybe (Point2 a))

def controlPoint a b c:
    (a, b, c)

alias Path = String

def load path:
    ```autoLift1 loadImageLuna #{path}```

def Image.save path:
    ```autoLift2 saveImageLuna #{path} #{self}```

def rasterizePath w h closed pointsA pointsB:
    ```liftF4 rasterizeVectorLuna #{w} #{h} #{closed} #{pointsA}```

def print msg:
    ```autoLift1 print #{msg}```

def test obj:
    ```liftF1 test #{obj}```

def main:
    print "- - - vector rasterization test - - -"
    points = [ controlPoint (Point2 212 209) Nothing (Just $ Point2 (211.-212) (114.-209))
             , controlPoint (Point2 338 210) (Just $ Point2 (329.-338) (109.-210)) (Just $ Point2 (450.-338) (211.-210))
             , controlPoint (Point2 343 330) (Just $ Point2 (456.-343) (331.-330)) Nothing
             ]

    # points = [ ControlPoint (Point2 212 209) Nothing (Just $ Point2 (-1) (-95))
    #          , ControlPoint (Point2 338 210) (Just $ Point2 (-9) (-101)) (Just $ Point2 (112) (1))
    #          , ControlPoint (Point2 343 330) (Just $ Point2 (113) (1)) Nothing
    #          ]

    img = rasterizePath 512 512 True points []
    img.save "test.png"

    # [1,2,3].each x:
    #     print x
    #     5

# class Wrapper:
#     list :: [Int]

# def main:
#     list = [1,2,3]
#     wrapper = Wrapper list
