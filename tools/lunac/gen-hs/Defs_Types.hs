{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Defs_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()

import  Attrs_Types
import  Libs_Types
import  Types_Types


type DefID = Int32

data NodeDefinition = NodeDefinition{f_NodeDefinition_cls :: Maybe Types_Types.Type,f_NodeDefinition_flags :: Maybe Attrs_Types.Flags,f_NodeDefinition_attribs :: Maybe Attrs_Types.Attributes,f_NodeDefinition_libID :: Maybe Int32,f_NodeDefinition_defID :: Maybe Int32} deriving (Show,Eq,Typeable)
instance Hashable NodeDefinition where
  hashWithSalt salt record = salt   `hashWithSalt` f_NodeDefinition_cls record   `hashWithSalt` f_NodeDefinition_flags record   `hashWithSalt` f_NodeDefinition_attribs record   `hashWithSalt` f_NodeDefinition_libID record   `hashWithSalt` f_NodeDefinition_defID record  
write_NodeDefinition oprot record = do
  writeStructBegin oprot "NodeDefinition"
  case f_NodeDefinition_cls record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cls",T_STRUCT,1)
    Types_Types.write_Type oprot _v
    writeFieldEnd oprot}
  case f_NodeDefinition_flags record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("flags",T_STRUCT,2)
    Attrs_Types.write_Flags oprot _v
    writeFieldEnd oprot}
  case f_NodeDefinition_attribs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("attribs",T_STRUCT,3)
    Attrs_Types.write_Attributes oprot _v
    writeFieldEnd oprot}
  case f_NodeDefinition_libID record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("libID",T_I32,4)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_NodeDefinition_defID record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("defID",T_I32,5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_NodeDefinition_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_STRUCT then do
        s <- (read_Type iprot)
        read_NodeDefinition_fields iprot record{f_NodeDefinition_cls=Just s}
        else do
          skip iprot _t3
          read_NodeDefinition_fields iprot record
      2 -> if _t3 == T_STRUCT then do
        s <- (read_Flags iprot)
        read_NodeDefinition_fields iprot record{f_NodeDefinition_flags=Just s}
        else do
          skip iprot _t3
          read_NodeDefinition_fields iprot record
      3 -> if _t3 == T_STRUCT then do
        s <- (read_Attributes iprot)
        read_NodeDefinition_fields iprot record{f_NodeDefinition_attribs=Just s}
        else do
          skip iprot _t3
          read_NodeDefinition_fields iprot record
      4 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_NodeDefinition_fields iprot record{f_NodeDefinition_libID=Just s}
        else do
          skip iprot _t3
          read_NodeDefinition_fields iprot record
      5 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_NodeDefinition_fields iprot record{f_NodeDefinition_defID=Just s}
        else do
          skip iprot _t3
          read_NodeDefinition_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_NodeDefinition_fields iprot record
read_NodeDefinition iprot = do
  _ <- readStructBegin iprot
  record <- read_NodeDefinition_fields iprot (NodeDefinition{f_NodeDefinition_cls=Nothing,f_NodeDefinition_flags=Nothing,f_NodeDefinition_attribs=Nothing,f_NodeDefinition_libID=Nothing,f_NodeDefinition_defID=Nothing})
  readStructEnd iprot
  return record
