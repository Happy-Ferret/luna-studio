{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Defs_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()

import  Attrs_Types
import  Libs_Types
import  Types_Types


type DefID = Int32

type Imports = Vector.Vector Import

data Import = Import{f_Import_path :: Maybe (Vector.Vector Text),f_Import_items :: Maybe (Vector.Vector Text)} deriving (Show,Eq,Typeable)
instance Hashable Import where
  hashWithSalt salt record = salt   `hashWithSalt` f_Import_path record   `hashWithSalt` f_Import_items record  
write_Import oprot record = do
  writeStructBegin oprot "Import"
  case f_Import_path record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("path",T_LIST,1)
    (let f = Vector.mapM_ (\_viter2 -> writeString oprot _viter2) in do {writeListBegin oprot (T_STRING,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Import_items record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("items",T_LIST,2)
    (let f = Vector.mapM_ (\_viter3 -> writeString oprot _viter3) in do {writeListBegin oprot (T_STRING,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Import_fields iprot record = do
  (_,_t5,_id6) <- readFieldBegin iprot
  if _t5 == T_STOP then return record else
    case _id6 of 
      1 -> if _t5 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readString iprot) in do {(_etype10,_size7) <- readListBegin iprot; f _size7})
        read_Import_fields iprot record{f_Import_path=Just s}
        else do
          skip iprot _t5
          read_Import_fields iprot record
      2 -> if _t5 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readString iprot) in do {(_etype15,_size12) <- readListBegin iprot; f _size12})
        read_Import_fields iprot record{f_Import_items=Just s}
        else do
          skip iprot _t5
          read_Import_fields iprot record
      _ -> do
        skip iprot _t5
        readFieldEnd iprot
        read_Import_fields iprot record
read_Import iprot = do
  _ <- readStructBegin iprot
  record <- read_Import_fields iprot (Import{f_Import_path=Nothing,f_Import_items=Nothing})
  readStructEnd iprot
  return record
data NodeDef = NodeDef{f_NodeDef_cls :: Maybe Types_Types.Type,f_NodeDef_imports :: Maybe (Vector.Vector Import),f_NodeDef_flags :: Maybe Attrs_Types.Flags,f_NodeDef_attribs :: Maybe Attrs_Types.Attributes,f_NodeDef_libID :: Maybe Int32,f_NodeDef_defID :: Maybe Int32} deriving (Show,Eq,Typeable)
instance Hashable NodeDef where
  hashWithSalt salt record = salt   `hashWithSalt` f_NodeDef_cls record   `hashWithSalt` f_NodeDef_imports record   `hashWithSalt` f_NodeDef_flags record   `hashWithSalt` f_NodeDef_attribs record   `hashWithSalt` f_NodeDef_libID record   `hashWithSalt` f_NodeDef_defID record  
write_NodeDef oprot record = do
  writeStructBegin oprot "NodeDef"
  case f_NodeDef_cls record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cls",T_STRUCT,1)
    Types_Types.write_Type oprot _v
    writeFieldEnd oprot}
  case f_NodeDef_imports record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("imports",T_LIST,2)
    (let f = Vector.mapM_ (\_viter19 -> write_Import oprot _viter19) in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_NodeDef_flags record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("flags",T_STRUCT,3)
    Attrs_Types.write_Flags oprot _v
    writeFieldEnd oprot}
  case f_NodeDef_attribs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("attribs",T_STRUCT,4)
    Attrs_Types.write_Attributes oprot _v
    writeFieldEnd oprot}
  case f_NodeDef_libID record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("libID",T_I32,5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_NodeDef_defID record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("defID",T_I32,6)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_NodeDef_fields iprot record = do
  (_,_t21,_id22) <- readFieldBegin iprot
  if _t21 == T_STOP then return record else
    case _id22 of 
      1 -> if _t21 == T_STRUCT then do
        s <- (read_Type iprot)
        read_NodeDef_fields iprot record{f_NodeDef_cls=Just s}
        else do
          skip iprot _t21
          read_NodeDef_fields iprot record
      2 -> if _t21 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) ((read_Import iprot)) in do {(_etype26,_size23) <- readListBegin iprot; f _size23})
        read_NodeDef_fields iprot record{f_NodeDef_imports=Just s}
        else do
          skip iprot _t21
          read_NodeDef_fields iprot record
      3 -> if _t21 == T_STRUCT then do
        s <- (read_Flags iprot)
        read_NodeDef_fields iprot record{f_NodeDef_flags=Just s}
        else do
          skip iprot _t21
          read_NodeDef_fields iprot record
      4 -> if _t21 == T_STRUCT then do
        s <- (read_Attributes iprot)
        read_NodeDef_fields iprot record{f_NodeDef_attribs=Just s}
        else do
          skip iprot _t21
          read_NodeDef_fields iprot record
      5 -> if _t21 == T_I32 then do
        s <- readI32 iprot
        read_NodeDef_fields iprot record{f_NodeDef_libID=Just s}
        else do
          skip iprot _t21
          read_NodeDef_fields iprot record
      6 -> if _t21 == T_I32 then do
        s <- readI32 iprot
        read_NodeDef_fields iprot record{f_NodeDef_defID=Just s}
        else do
          skip iprot _t21
          read_NodeDef_fields iprot record
      _ -> do
        skip iprot _t21
        readFieldEnd iprot
        read_NodeDef_fields iprot record
read_NodeDef iprot = do
  _ <- readStructBegin iprot
  record <- read_NodeDef_fields iprot (NodeDef{f_NodeDef_cls=Nothing,f_NodeDef_imports=Nothing,f_NodeDef_flags=Nothing,f_NodeDef_attribs=Nothing,f_NodeDef_libID=Nothing,f_NodeDef_defID=Nothing})
  readStructEnd iprot
  return record
