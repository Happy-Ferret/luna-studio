// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Batch.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::flowbox::batch;

class BatchHandler : virtual public BatchIf {
 public:
  BatchHandler() {
    // Your initialization goes here
  }

  void projects(std::vector< ::flowbox::batch::projects::Project> & _return) {
    // Your implementation goes here
    printf("projects\n");
  }

  void createProject(const  ::flowbox::batch::projects::Project& project) {
    // Your implementation goes here
    printf("createProject\n");
  }

  void openProject( ::flowbox::batch::projects::Project& _return, const  ::flowbox::batch::projects::Project& project) {
    // Your implementation goes here
    printf("openProject\n");
  }

  void closeProject(const  ::flowbox::batch::projects::Project& project) {
    // Your implementation goes here
    printf("closeProject\n");
  }

  void storeProject(const  ::flowbox::batch::projects::Project& project) {
    // Your implementation goes here
    printf("storeProject\n");
  }

  void setActiveProject(const  ::flowbox::batch::projects::Project& project) {
    // Your implementation goes here
    printf("setActiveProject\n");
  }

  void libraries(std::vector< ::flowbox::batch::libs::Library> & _return) {
    // Your implementation goes here
    printf("libraries\n");
  }

  void createLibrary( ::flowbox::batch::libs::Library& _return, const  ::flowbox::batch::libs::Library& library) {
    // Your implementation goes here
    printf("createLibrary\n");
  }

  void loadLibrary( ::flowbox::batch::libs::Library& _return, const  ::flowbox::batch::libs::Library& library) {
    // Your implementation goes here
    printf("loadLibrary\n");
  }

  void unloadLibrary(const  ::flowbox::batch::libs::Library& library) {
    // Your implementation goes here
    printf("unloadLibrary\n");
  }

  void storeLibrary(const  ::flowbox::batch::libs::Library& library) {
    // Your implementation goes here
    printf("storeLibrary\n");
  }

  void libraryRootDef( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::libs::Library& library) {
    // Your implementation goes here
    printf("libraryRootDef\n");
  }

  void defsGraph( ::flowbox::batch::defs::DefsGraph& _return) {
    // Your implementation goes here
    printf("defsGraph\n");
  }

  void newDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::types::Type& type, const  ::flowbox::batch::defs::Imports& imports, const  ::flowbox::batch::attrs::Flags& flags, const  ::flowbox::batch::attrs::Attributes& attrs) {
    // Your implementation goes here
    printf("newDefinition\n");
  }

  void addDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::defs::Definition& parent) {
    // Your implementation goes here
    printf("addDefinition\n");
  }

  void updateDefinition(const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("updateDefinition\n");
  }

  void removeDefinition(const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("removeDefinition\n");
  }

  void definitionChildren(std::vector< ::flowbox::batch::defs::Definition> & _return, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("definitionChildren\n");
  }

  void definitionParent( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("definitionParent\n");
  }

  void newTypeModule( ::flowbox::batch::types::Type& _return, const std::string& name) {
    // Your implementation goes here
    printf("newTypeModule\n");
  }

  void newTypeClass( ::flowbox::batch::types::Type& _return, const std::string& name, const std::vector<std::string> & typeparams, const std::vector< ::flowbox::batch::types::Type> & params) {
    // Your implementation goes here
    printf("newTypeClass\n");
  }

  void newTypeFunction( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& inputs, const  ::flowbox::batch::types::Type& outputs) {
    // Your implementation goes here
    printf("newTypeFunction\n");
  }

  void newTypeUdefined( ::flowbox::batch::types::Type& _return) {
    // Your implementation goes here
    printf("newTypeUdefined\n");
  }

  void newTypeNamed( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& type) {
    // Your implementation goes here
    printf("newTypeNamed\n");
  }

  void newTypeVariable( ::flowbox::batch::types::Type& _return, const std::string& name) {
    // Your implementation goes here
    printf("newTypeVariable\n");
  }

  void newTypeList( ::flowbox::batch::types::Type& _return, const  ::flowbox::batch::types::Type& type) {
    // Your implementation goes here
    printf("newTypeList\n");
  }

  void newTypeTuple( ::flowbox::batch::types::Type& _return, const std::vector< ::flowbox::batch::types::Type> & types) {
    // Your implementation goes here
    printf("newTypeTuple\n");
  }

  void graph( ::flowbox::batch::graph::GraphView& _return, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("graph\n");
  }

  void addNode( ::flowbox::batch::graph::Node& _return, const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("addNode\n");
  }

  void updateNode(const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("updateNode\n");
  }

  void removeNode(const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("removeNode\n");
  }

  void connect(const  ::flowbox::batch::graph::Node& srcNode, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::Node& dstNode, const int32_t dstPort, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("connect\n");
  }

  void disconnect(const  ::flowbox::batch::graph::Node& srcNode, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::Node& dstNode, const int32_t dstPort, const  ::flowbox::batch::defs::Definition& definition) {
    // Your implementation goes here
    printf("disconnect\n");
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BatchHandler> handler(new BatchHandler());
  shared_ptr<TProcessor> processor(new BatchProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

