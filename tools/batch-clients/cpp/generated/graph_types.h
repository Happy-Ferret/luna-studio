/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef graph_TYPES_H
#define graph_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "attrs_types.h"


namespace flowbox { namespace batch { namespace graph {

struct DefaultValueType {
  enum type {
    CharV = 0,
    IntV = 1,
    StringV = 2
  };
};

extern const std::map<int, const char*> _DefaultValueType_VALUES_TO_NAMES;

struct NodeType {
  enum type {
    Expr = 0,
    Default = 1,
    Inputs = 2,
    Outputs = 3,
    Tuple = 4
  };
};

extern const std::map<int, const char*> _NodeType_VALUES_TO_NAMES;

struct PortType {
  enum type {
    All = 0,
    Number = 1
  };
};

extern const std::map<int, const char*> _PortType_VALUES_TO_NAMES;

typedef int32_t NodeID;

typedef struct _DefaultValue__isset {
  _DefaultValue__isset() : value(false) {}
  bool value;
} _DefaultValue__isset;

class DefaultValue {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  DefaultValue() : cls((DefaultValueType::type)0), value() {
  }

  virtual ~DefaultValue() throw() {}

  DefaultValueType::type cls;
  std::string value;

  _DefaultValue__isset __isset;

  void __set_cls(const DefaultValueType::type val) {
    cls = val;
  }

  void __set_value(const std::string& val) {
    value = val;
    __isset.value = true;
  }

  bool operator == (const DefaultValue & rhs) const
  {
    if (!(cls == rhs.cls))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DefaultValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DefaultValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DefaultValue &a, DefaultValue &b);

typedef struct _Node__isset {
  _Node__isset() : cls(false), expression(true), nodeID(true), flags(true), attrs(true), defVal(true) {}
  bool cls;
  bool expression;
  bool nodeID;
  bool flags;
  bool attrs;
  bool defVal;
} _Node__isset;

class Node {
 public:

  static const char* ascii_fingerprint; // = "1DCED677DC5D1F60042732BAED531997";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xCE,0xD6,0x77,0xDC,0x5D,0x1F,0x60,0x04,0x27,0x32,0xBA,0xED,0x53,0x19,0x97};

  Node() : cls((NodeType::type)0), expression(""), nodeID(-1) {



  }

  virtual ~Node() throw() {}

  NodeType::type cls;
  std::string expression;
  NodeID nodeID;
   ::flowbox::batch::attrs::Flags flags;
   ::flowbox::batch::attrs::Attributes attrs;
  DefaultValue defVal;

  _Node__isset __isset;

  void __set_cls(const NodeType::type val) {
    cls = val;
    __isset.cls = true;
  }

  void __set_expression(const std::string& val) {
    expression = val;
    __isset.expression = true;
  }

  void __set_nodeID(const NodeID val) {
    nodeID = val;
    __isset.nodeID = true;
  }

  void __set_flags(const  ::flowbox::batch::attrs::Flags& val) {
    flags = val;
    __isset.flags = true;
  }

  void __set_attrs(const  ::flowbox::batch::attrs::Attributes& val) {
    attrs = val;
    __isset.attrs = true;
  }

  void __set_defVal(const DefaultValue& val) {
    defVal = val;
    __isset.defVal = true;
  }

  bool operator == (const Node & rhs) const
  {
    if (__isset.cls != rhs.__isset.cls)
      return false;
    else if (__isset.cls && !(cls == rhs.cls))
      return false;
    if (__isset.expression != rhs.__isset.expression)
      return false;
    else if (__isset.expression && !(expression == rhs.expression))
      return false;
    if (__isset.nodeID != rhs.__isset.nodeID)
      return false;
    else if (__isset.nodeID && !(nodeID == rhs.nodeID))
      return false;
    if (__isset.flags != rhs.__isset.flags)
      return false;
    else if (__isset.flags && !(flags == rhs.flags))
      return false;
    if (__isset.attrs != rhs.__isset.attrs)
      return false;
    else if (__isset.attrs && !(attrs == rhs.attrs))
      return false;
    if (__isset.defVal != rhs.__isset.defVal)
      return false;
    else if (__isset.defVal && !(defVal == rhs.defVal))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Node &a, Node &b);

typedef struct _Port__isset {
  _Port__isset() : cls(false), number(false) {}
  bool cls;
  bool number;
} _Port__isset;

class Port {
 public:

  static const char* ascii_fingerprint; // = "75971A588272C97A80EBFD5BA7E9F503";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x97,0x1A,0x58,0x82,0x72,0xC9,0x7A,0x80,0xEB,0xFD,0x5B,0xA7,0xE9,0xF5,0x03};

  Port() : cls((PortType::type)0), number(0) {
  }

  virtual ~Port() throw() {}

  PortType::type cls;
  int32_t number;

  _Port__isset __isset;

  void __set_cls(const PortType::type val) {
    cls = val;
    __isset.cls = true;
  }

  void __set_number(const int32_t val) {
    number = val;
    __isset.number = true;
  }

  bool operator == (const Port & rhs) const
  {
    if (__isset.cls != rhs.__isset.cls)
      return false;
    else if (__isset.cls && !(cls == rhs.cls))
      return false;
    if (__isset.number != rhs.__isset.number)
      return false;
    else if (__isset.number && !(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const Port &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Port & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Port &a, Port &b);

typedef struct _Edge__isset {
  _Edge__isset() : nodeSrc(false), nodeDst(false), portSrc(false), portDst(false) {}
  bool nodeSrc;
  bool nodeDst;
  bool portSrc;
  bool portDst;
} _Edge__isset;

class Edge {
 public:

  static const char* ascii_fingerprint; // = "1B1D429E9E864B4725E72BF8E70DB698";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x1D,0x42,0x9E,0x9E,0x86,0x4B,0x47,0x25,0xE7,0x2B,0xF8,0xE7,0x0D,0xB6,0x98};

  Edge() : nodeSrc(0), nodeDst(0) {
  }

  virtual ~Edge() throw() {}

  NodeID nodeSrc;
  NodeID nodeDst;
  Port portSrc;
  Port portDst;

  _Edge__isset __isset;

  void __set_nodeSrc(const NodeID val) {
    nodeSrc = val;
    __isset.nodeSrc = true;
  }

  void __set_nodeDst(const NodeID val) {
    nodeDst = val;
    __isset.nodeDst = true;
  }

  void __set_portSrc(const Port& val) {
    portSrc = val;
    __isset.portSrc = true;
  }

  void __set_portDst(const Port& val) {
    portDst = val;
    __isset.portDst = true;
  }

  bool operator == (const Edge & rhs) const
  {
    if (__isset.nodeSrc != rhs.__isset.nodeSrc)
      return false;
    else if (__isset.nodeSrc && !(nodeSrc == rhs.nodeSrc))
      return false;
    if (__isset.nodeDst != rhs.__isset.nodeDst)
      return false;
    else if (__isset.nodeDst && !(nodeDst == rhs.nodeDst))
      return false;
    if (__isset.portSrc != rhs.__isset.portSrc)
      return false;
    else if (__isset.portSrc && !(portSrc == rhs.portSrc))
      return false;
    if (__isset.portDst != rhs.__isset.portDst)
      return false;
    else if (__isset.portDst && !(portDst == rhs.portDst))
      return false;
    return true;
  }
  bool operator != (const Edge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Edge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Edge &a, Edge &b);

typedef struct _Graph__isset {
  _Graph__isset() : nodes(false), edges(false) {}
  bool nodes;
  bool edges;
} _Graph__isset;

class Graph {
 public:

  static const char* ascii_fingerprint; // = "98926E8F3B907A32F4987D48F41D7D00";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x92,0x6E,0x8F,0x3B,0x90,0x7A,0x32,0xF4,0x98,0x7D,0x48,0xF4,0x1D,0x7D,0x00};

  Graph() {
  }

  virtual ~Graph() throw() {}

  std::map<NodeID, Node>  nodes;
  std::vector<Edge>  edges;

  _Graph__isset __isset;

  void __set_nodes(const std::map<NodeID, Node> & val) {
    nodes = val;
    __isset.nodes = true;
  }

  void __set_edges(const std::vector<Edge> & val) {
    edges = val;
    __isset.edges = true;
  }

  bool operator == (const Graph & rhs) const
  {
    if (__isset.nodes != rhs.__isset.nodes)
      return false;
    else if (__isset.nodes && !(nodes == rhs.nodes))
      return false;
    if (__isset.edges != rhs.__isset.edges)
      return false;
    else if (__isset.edges && !(edges == rhs.edges))
      return false;
    return true;
  }
  bool operator != (const Graph &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Graph & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Graph &a, Graph &b);

}}} // namespace

#endif
