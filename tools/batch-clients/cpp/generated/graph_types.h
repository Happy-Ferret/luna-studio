/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef graph_TYPES_H
#define graph_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "attrs_types.h"


namespace flowbox { namespace batch { namespace graph {

struct DefaultValueType {
  enum type {
    CharV = 0,
    IntV = 1,
    StringV = 2
  };
};

extern const std::map<int, const char*> _DefaultValueType_VALUES_TO_NAMES;

struct NodeType {
  enum type {
    Expr = 0,
    Default = 1,
    Inputs = 2,
    Outputs = 3,
    NTuple = 4
  };
};

extern const std::map<int, const char*> _NodeType_VALUES_TO_NAMES;

typedef int32_t NodeID;

typedef struct _DefaultValue__isset {
  _DefaultValue__isset() : s(false) {}
  bool s;
} _DefaultValue__isset;

class DefaultValue {
 public:

  static const char* ascii_fingerprint; // = "543465A32DEDFDAFF94B9327A9320F0A";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x34,0x65,0xA3,0x2D,0xED,0xFD,0xAF,0xF9,0x4B,0x93,0x27,0xA9,0x32,0x0F,0x0A};

  DefaultValue() : cls((DefaultValueType::type)0), s() {
  }

  virtual ~DefaultValue() throw() {}

  DefaultValueType::type cls;
  std::string s;

  _DefaultValue__isset __isset;

  void __set_cls(const DefaultValueType::type val) {
    cls = val;
  }

  void __set_s(const std::string& val) {
    s = val;
    __isset.s = true;
  }

  bool operator == (const DefaultValue & rhs) const
  {
    if (!(cls == rhs.cls))
      return false;
    if (__isset.s != rhs.__isset.s)
      return false;
    else if (__isset.s && !(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const DefaultValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DefaultValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DefaultValue &a, DefaultValue &b);

typedef struct _Node__isset {
  _Node__isset() : cls(false), expression(true), nodeID(true), flags(true), attrs(true), defVal(true) {}
  bool cls;
  bool expression;
  bool nodeID;
  bool flags;
  bool attrs;
  bool defVal;
} _Node__isset;

class Node {
 public:

  static const char* ascii_fingerprint; // = "479D4EF4F82216B5B2BD05A20FE3ADCB";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x9D,0x4E,0xF4,0xF8,0x22,0x16,0xB5,0xB2,0xBD,0x05,0xA2,0x0F,0xE3,0xAD,0xCB};

  Node() : cls((NodeType::type)0), expression(""), nodeID(-1) {



  }

  virtual ~Node() throw() {}

  NodeType::type cls;
  std::string expression;
  NodeID nodeID;
   ::flowbox::batch::attrs::Flags flags;
   ::flowbox::batch::attrs::Attributes attrs;
  DefaultValue defVal;

  _Node__isset __isset;

  void __set_cls(const NodeType::type val) {
    cls = val;
    __isset.cls = true;
  }

  void __set_expression(const std::string& val) {
    expression = val;
    __isset.expression = true;
  }

  void __set_nodeID(const NodeID val) {
    nodeID = val;
    __isset.nodeID = true;
  }

  void __set_flags(const  ::flowbox::batch::attrs::Flags& val) {
    flags = val;
    __isset.flags = true;
  }

  void __set_attrs(const  ::flowbox::batch::attrs::Attributes& val) {
    attrs = val;
    __isset.attrs = true;
  }

  void __set_defVal(const DefaultValue& val) {
    defVal = val;
    __isset.defVal = true;
  }

  bool operator == (const Node & rhs) const
  {
    if (__isset.cls != rhs.__isset.cls)
      return false;
    else if (__isset.cls && !(cls == rhs.cls))
      return false;
    if (__isset.expression != rhs.__isset.expression)
      return false;
    else if (__isset.expression && !(expression == rhs.expression))
      return false;
    if (__isset.nodeID != rhs.__isset.nodeID)
      return false;
    else if (__isset.nodeID && !(nodeID == rhs.nodeID))
      return false;
    if (__isset.flags != rhs.__isset.flags)
      return false;
    else if (__isset.flags && !(flags == rhs.flags))
      return false;
    if (__isset.attrs != rhs.__isset.attrs)
      return false;
    else if (__isset.attrs && !(attrs == rhs.attrs))
      return false;
    if (__isset.defVal != rhs.__isset.defVal)
      return false;
    else if (__isset.defVal && !(defVal == rhs.defVal))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Node &a, Node &b);

typedef struct _Edge__isset {
  _Edge__isset() : portSrc(false), portDst(false), nodeSrc(false), nodeDst(false) {}
  bool portSrc;
  bool portDst;
  bool nodeSrc;
  bool nodeDst;
} _Edge__isset;

class Edge {
 public:

  static const char* ascii_fingerprint; // = "E3E2F869E2831D70F619B6B13F64FB99";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0xE2,0xF8,0x69,0xE2,0x83,0x1D,0x70,0xF6,0x19,0xB6,0xB1,0x3F,0x64,0xFB,0x99};

  Edge() : portSrc(0), portDst(0), nodeSrc(0), nodeDst(0) {
  }

  virtual ~Edge() throw() {}

  int32_t portSrc;
  int32_t portDst;
  NodeID nodeSrc;
  NodeID nodeDst;

  _Edge__isset __isset;

  void __set_portSrc(const int32_t val) {
    portSrc = val;
    __isset.portSrc = true;
  }

  void __set_portDst(const int32_t val) {
    portDst = val;
    __isset.portDst = true;
  }

  void __set_nodeSrc(const NodeID val) {
    nodeSrc = val;
    __isset.nodeSrc = true;
  }

  void __set_nodeDst(const NodeID val) {
    nodeDst = val;
    __isset.nodeDst = true;
  }

  bool operator == (const Edge & rhs) const
  {
    if (__isset.portSrc != rhs.__isset.portSrc)
      return false;
    else if (__isset.portSrc && !(portSrc == rhs.portSrc))
      return false;
    if (__isset.portDst != rhs.__isset.portDst)
      return false;
    else if (__isset.portDst && !(portDst == rhs.portDst))
      return false;
    if (__isset.nodeSrc != rhs.__isset.nodeSrc)
      return false;
    else if (__isset.nodeSrc && !(nodeSrc == rhs.nodeSrc))
      return false;
    if (__isset.nodeDst != rhs.__isset.nodeDst)
      return false;
    else if (__isset.nodeDst && !(nodeDst == rhs.nodeDst))
      return false;
    return true;
  }
  bool operator != (const Edge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Edge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Edge &a, Edge &b);

typedef struct _Graph__isset {
  _Graph__isset() : nodes(false), edges(false) {}
  bool nodes;
  bool edges;
} _Graph__isset;

class Graph {
 public:

  static const char* ascii_fingerprint; // = "264B0D6DEF051B71B36774F812AC7CC4";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x4B,0x0D,0x6D,0xEF,0x05,0x1B,0x71,0xB3,0x67,0x74,0xF8,0x12,0xAC,0x7C,0xC4};

  Graph() {
  }

  virtual ~Graph() throw() {}

  std::map<NodeID, Node>  nodes;
  std::vector<Edge>  edges;

  _Graph__isset __isset;

  void __set_nodes(const std::map<NodeID, Node> & val) {
    nodes = val;
    __isset.nodes = true;
  }

  void __set_edges(const std::vector<Edge> & val) {
    edges = val;
    __isset.edges = true;
  }

  bool operator == (const Graph & rhs) const
  {
    if (__isset.nodes != rhs.__isset.nodes)
      return false;
    else if (__isset.nodes && !(nodes == rhs.nodes))
      return false;
    if (__isset.edges != rhs.__isset.edges)
      return false;
    else if (__isset.edges && !(edges == rhs.edges))
      return false;
    return true;
  }
  bool operator != (const Graph &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Graph & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Graph &a, Graph &b);

}}} // namespace

#endif
