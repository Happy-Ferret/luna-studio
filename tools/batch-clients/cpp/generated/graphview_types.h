/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef graphview_TYPES_H
#define graphview_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "graph_types.h"


namespace flowbox { namespace batch { namespace graph {

typedef std::vector<int32_t>  PortDescriptor;

typedef struct _EdgeView__isset {
  _EdgeView__isset() : srcNode(false), dstNode(false), srcPort(false), dstPort(false) {}
  bool srcNode;
  bool dstNode;
  bool srcPort;
  bool dstPort;
} _EdgeView__isset;

class EdgeView {
 public:

  static const char* ascii_fingerprint; // = "780EB3755E1EE5645CAC472013381820";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x0E,0xB3,0x75,0x5E,0x1E,0xE5,0x64,0x5C,0xAC,0x47,0x20,0x13,0x38,0x18,0x20};

  EdgeView() : srcNode(0), dstNode(0) {
  }

  virtual ~EdgeView() throw() {}

   ::flowbox::batch::graph::NodeID srcNode;
   ::flowbox::batch::graph::NodeID dstNode;
  PortDescriptor srcPort;
  PortDescriptor dstPort;

  _EdgeView__isset __isset;

  void __set_srcNode(const  ::flowbox::batch::graph::NodeID val) {
    srcNode = val;
    __isset.srcNode = true;
  }

  void __set_dstNode(const  ::flowbox::batch::graph::NodeID val) {
    dstNode = val;
    __isset.dstNode = true;
  }

  void __set_srcPort(const PortDescriptor& val) {
    srcPort = val;
    __isset.srcPort = true;
  }

  void __set_dstPort(const PortDescriptor& val) {
    dstPort = val;
    __isset.dstPort = true;
  }

  bool operator == (const EdgeView & rhs) const
  {
    if (__isset.srcNode != rhs.__isset.srcNode)
      return false;
    else if (__isset.srcNode && !(srcNode == rhs.srcNode))
      return false;
    if (__isset.dstNode != rhs.__isset.dstNode)
      return false;
    else if (__isset.dstNode && !(dstNode == rhs.dstNode))
      return false;
    if (__isset.srcPort != rhs.__isset.srcPort)
      return false;
    else if (__isset.srcPort && !(srcPort == rhs.srcPort))
      return false;
    if (__isset.dstPort != rhs.__isset.dstPort)
      return false;
    else if (__isset.dstPort && !(dstPort == rhs.dstPort))
      return false;
    return true;
  }
  bool operator != (const EdgeView &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeView & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EdgeView &a, EdgeView &b);

typedef struct _GraphView__isset {
  _GraphView__isset() : nodes(false), edges(false) {}
  bool nodes;
  bool edges;
} _GraphView__isset;

class GraphView {
 public:

  static const char* ascii_fingerprint; // = "114A1F66C4582F3060FCC963E4C7C5DB";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x4A,0x1F,0x66,0xC4,0x58,0x2F,0x30,0x60,0xFC,0xC9,0x63,0xE4,0xC7,0xC5,0xDB};

  GraphView() {
  }

  virtual ~GraphView() throw() {}

  std::map< ::flowbox::batch::graph::NodeID,  ::flowbox::batch::graph::Node>  nodes;
  std::vector<EdgeView>  edges;

  _GraphView__isset __isset;

  void __set_nodes(const std::map< ::flowbox::batch::graph::NodeID,  ::flowbox::batch::graph::Node> & val) {
    nodes = val;
    __isset.nodes = true;
  }

  void __set_edges(const std::vector<EdgeView> & val) {
    edges = val;
    __isset.edges = true;
  }

  bool operator == (const GraphView & rhs) const
  {
    if (__isset.nodes != rhs.__isset.nodes)
      return false;
    else if (__isset.nodes && !(nodes == rhs.nodes))
      return false;
    if (__isset.edges != rhs.__isset.edges)
      return false;
    else if (__isset.edges && !(edges == rhs.edges))
      return false;
    return true;
  }
  bool operator != (const GraphView &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphView & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GraphView &a, GraphView &b);

}}} // namespace

#endif
