/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef fs_TYPES_H
#define fs_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace flowbox { namespace batch { namespace fs {

struct FSItemType {
  enum type {
    Directory = 0,
    File = 1,
    Other = 2
  };
};

extern const std::map<int, const char*> _FSItemType_VALUES_TO_NAMES;

typedef struct _FSItem__isset {
  _FSItem__isset() : itemType(false), path(false), size(false) {}
  bool itemType;
  bool path;
  bool size;
} _FSItem__isset;

class FSItem {
 public:

  static const char* ascii_fingerprint; // = "6A93F5F459652B86154E951A24D52A7B";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x93,0xF5,0xF4,0x59,0x65,0x2B,0x86,0x15,0x4E,0x95,0x1A,0x24,0xD5,0x2A,0x7B};

  FSItem() : itemType((FSItemType::type)0), path(), size(0) {
  }

  virtual ~FSItem() throw() {}

  FSItemType::type itemType;
  std::string path;
  int32_t size;

  _FSItem__isset __isset;

  void __set_itemType(const FSItemType::type val) {
    itemType = val;
    __isset.itemType = true;
  }

  void __set_path(const std::string& val) {
    path = val;
    __isset.path = true;
  }

  void __set_size(const int32_t val) {
    size = val;
    __isset.size = true;
  }

  bool operator == (const FSItem & rhs) const
  {
    if (__isset.itemType != rhs.__isset.itemType)
      return false;
    else if (__isset.itemType && !(itemType == rhs.itemType))
      return false;
    if (__isset.path != rhs.__isset.path)
      return false;
    else if (__isset.path && !(path == rhs.path))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const FSItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FSItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FSItem &a, FSItem &b);

}}} // namespace

#endif
