/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Batch_H
#define Batch_H

#include <thrift/TDispatchProcessor.h>
#include "batch_types.h"

namespace flowbox { namespace batch {

class BatchIf {
 public:
  virtual ~BatchIf() {}
  virtual void projects(std::vector< ::flowbox::batch::projects::Project> & _return) = 0;
  virtual void createProject(const  ::flowbox::batch::projects::Project& project) = 0;
  virtual void openProject( ::flowbox::batch::projects::Project& _return, const std::string& path) = 0;
  virtual void closeProject(const  ::flowbox::batch::projects::ProjectID projectID) = 0;
  virtual void storeProject(const  ::flowbox::batch::projects::ProjectID projectID) = 0;
  virtual void setActiveProject(const  ::flowbox::batch::projects::ProjectID projectID) = 0;
  virtual void libraries(std::vector< ::flowbox::batch::libs::Library> & _return) = 0;
  virtual void createLibrary( ::flowbox::batch::libs::Library& _return, const  ::flowbox::batch::libs::Library& library) = 0;
  virtual void loadLibrary( ::flowbox::batch::libs::Library& _return, const std::string& path) = 0;
  virtual void unloadLibrary(const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void storeLibrary(const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void buildLibrary(const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void libraryRootDef( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void defsGraph( ::flowbox::batch::defs::DefsGraph& _return, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void newDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::types::Type& type, const  ::flowbox::batch::defs::Imports& imports, const  ::flowbox::batch::attrs::Flags& flags, const  ::flowbox::batch::attrs::Attributes& attrs) = 0;
  virtual void addDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::defs::DefID parentID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void updateDefinition(const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void removeDefinition(const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void definitionChildren(std::vector< ::flowbox::batch::defs::Definition> & _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void definitionParent( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void newTypeModule( ::flowbox::batch::types::Type& _return, const std::string& name) = 0;
  virtual void newTypeClass( ::flowbox::batch::types::Type& _return, const std::string& name, const std::vector<std::string> & typeparams, const std::vector< ::flowbox::batch::types::Type> & params) = 0;
  virtual void newTypeFunction( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& inputs, const  ::flowbox::batch::types::Type& outputs) = 0;
  virtual void newTypeUdefined( ::flowbox::batch::types::Type& _return) = 0;
  virtual void newTypeNamed( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& type) = 0;
  virtual void newTypeVariable( ::flowbox::batch::types::Type& _return, const std::string& name) = 0;
  virtual void newTypeList( ::flowbox::batch::types::Type& _return, const  ::flowbox::batch::types::Type& type) = 0;
  virtual void newTypeTuple( ::flowbox::batch::types::Type& _return, const std::vector< ::flowbox::batch::types::Type> & types) = 0;
  virtual void nodesGraph( ::flowbox::batch::graph::GraphView& _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void addNode( ::flowbox::batch::graph::Node& _return, const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void updateNode(const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void removeNode(const  ::flowbox::batch::graph::NodeID nodeID, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void connect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void disconnect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) = 0;
  virtual void ping() = 0;
};

class BatchIfFactory {
 public:
  typedef BatchIf Handler;

  virtual ~BatchIfFactory() {}

  virtual BatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BatchIf* /* handler */) = 0;
};

class BatchIfSingletonFactory : virtual public BatchIfFactory {
 public:
  BatchIfSingletonFactory(const boost::shared_ptr<BatchIf>& iface) : iface_(iface) {}
  virtual ~BatchIfSingletonFactory() {}

  virtual BatchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BatchIf* /* handler */) {}

 protected:
  boost::shared_ptr<BatchIf> iface_;
};

class BatchNull : virtual public BatchIf {
 public:
  virtual ~BatchNull() {}
  void projects(std::vector< ::flowbox::batch::projects::Project> & /* _return */) {
    return;
  }
  void createProject(const  ::flowbox::batch::projects::Project& /* project */) {
    return;
  }
  void openProject( ::flowbox::batch::projects::Project& /* _return */, const std::string& /* path */) {
    return;
  }
  void closeProject(const  ::flowbox::batch::projects::ProjectID /* projectID */) {
    return;
  }
  void storeProject(const  ::flowbox::batch::projects::ProjectID /* projectID */) {
    return;
  }
  void setActiveProject(const  ::flowbox::batch::projects::ProjectID /* projectID */) {
    return;
  }
  void libraries(std::vector< ::flowbox::batch::libs::Library> & /* _return */) {
    return;
  }
  void createLibrary( ::flowbox::batch::libs::Library& /* _return */, const  ::flowbox::batch::libs::Library& /* library */) {
    return;
  }
  void loadLibrary( ::flowbox::batch::libs::Library& /* _return */, const std::string& /* path */) {
    return;
  }
  void unloadLibrary(const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void storeLibrary(const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void buildLibrary(const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void libraryRootDef( ::flowbox::batch::defs::Definition& /* _return */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void defsGraph( ::flowbox::batch::defs::DefsGraph& /* _return */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void newDefinition( ::flowbox::batch::defs::Definition& /* _return */, const  ::flowbox::batch::types::Type& /* type */, const  ::flowbox::batch::defs::Imports& /* imports */, const  ::flowbox::batch::attrs::Flags& /* flags */, const  ::flowbox::batch::attrs::Attributes& /* attrs */) {
    return;
  }
  void addDefinition( ::flowbox::batch::defs::Definition& /* _return */, const  ::flowbox::batch::defs::Definition& /* definition */, const  ::flowbox::batch::defs::DefID /* parentID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void updateDefinition(const  ::flowbox::batch::defs::Definition& /* definition */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void removeDefinition(const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void definitionChildren(std::vector< ::flowbox::batch::defs::Definition> & /* _return */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void definitionParent( ::flowbox::batch::defs::Definition& /* _return */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void newTypeModule( ::flowbox::batch::types::Type& /* _return */, const std::string& /* name */) {
    return;
  }
  void newTypeClass( ::flowbox::batch::types::Type& /* _return */, const std::string& /* name */, const std::vector<std::string> & /* typeparams */, const std::vector< ::flowbox::batch::types::Type> & /* params */) {
    return;
  }
  void newTypeFunction( ::flowbox::batch::types::Type& /* _return */, const std::string& /* name */, const  ::flowbox::batch::types::Type& /* inputs */, const  ::flowbox::batch::types::Type& /* outputs */) {
    return;
  }
  void newTypeUdefined( ::flowbox::batch::types::Type& /* _return */) {
    return;
  }
  void newTypeNamed( ::flowbox::batch::types::Type& /* _return */, const std::string& /* name */, const  ::flowbox::batch::types::Type& /* type */) {
    return;
  }
  void newTypeVariable( ::flowbox::batch::types::Type& /* _return */, const std::string& /* name */) {
    return;
  }
  void newTypeList( ::flowbox::batch::types::Type& /* _return */, const  ::flowbox::batch::types::Type& /* type */) {
    return;
  }
  void newTypeTuple( ::flowbox::batch::types::Type& /* _return */, const std::vector< ::flowbox::batch::types::Type> & /* types */) {
    return;
  }
  void nodesGraph( ::flowbox::batch::graph::GraphView& /* _return */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void addNode( ::flowbox::batch::graph::Node& /* _return */, const  ::flowbox::batch::graph::Node& /* node */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void updateNode(const  ::flowbox::batch::graph::Node& /* node */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void removeNode(const  ::flowbox::batch::graph::NodeID /* nodeID */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void connect(const  ::flowbox::batch::graph::NodeID /* srcNodeID */, const  ::flowbox::batch::graph::PortDescriptor& /* srcPort */, const  ::flowbox::batch::graph::NodeID /* dstNodeID */, const int32_t /* dstPort */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void disconnect(const  ::flowbox::batch::graph::NodeID /* srcNodeID */, const  ::flowbox::batch::graph::PortDescriptor& /* srcPort */, const  ::flowbox::batch::graph::NodeID /* dstNodeID */, const int32_t /* dstPort */, const  ::flowbox::batch::defs::DefID /* defID */, const  ::flowbox::batch::libs::LibID /* libID */) {
    return;
  }
  void ping() {
    return;
  }
};


class Batch_projects_args {
 public:

  Batch_projects_args() {
  }

  virtual ~Batch_projects_args() throw() {}


  bool operator == (const Batch_projects_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Batch_projects_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_projects_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_projects_pargs {
 public:


  virtual ~Batch_projects_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_projects_result__isset {
  _Batch_projects_result__isset() : success(false) {}
  bool success;
} _Batch_projects_result__isset;

class Batch_projects_result {
 public:

  Batch_projects_result() {
  }

  virtual ~Batch_projects_result() throw() {}

  std::vector< ::flowbox::batch::projects::Project>  success;

  _Batch_projects_result__isset __isset;

  void __set_success(const std::vector< ::flowbox::batch::projects::Project> & val) {
    success = val;
  }

  bool operator == (const Batch_projects_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Batch_projects_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_projects_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_projects_presult__isset {
  _Batch_projects_presult__isset() : success(false) {}
  bool success;
} _Batch_projects_presult__isset;

class Batch_projects_presult {
 public:


  virtual ~Batch_projects_presult() throw() {}

  std::vector< ::flowbox::batch::projects::Project> * success;

  _Batch_projects_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_createProject_args__isset {
  _Batch_createProject_args__isset() : project(false) {}
  bool project;
} _Batch_createProject_args__isset;

class Batch_createProject_args {
 public:

  Batch_createProject_args() {
  }

  virtual ~Batch_createProject_args() throw() {}

   ::flowbox::batch::projects::Project project;

  _Batch_createProject_args__isset __isset;

  void __set_project(const  ::flowbox::batch::projects::Project& val) {
    project = val;
  }

  bool operator == (const Batch_createProject_args & rhs) const
  {
    if (!(project == rhs.project))
      return false;
    return true;
  }
  bool operator != (const Batch_createProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_createProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_createProject_pargs {
 public:


  virtual ~Batch_createProject_pargs() throw() {}

  const  ::flowbox::batch::projects::Project* project;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_createProject_result__isset {
  _Batch_createProject_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_createProject_result__isset;

class Batch_createProject_result {
 public:

  Batch_createProject_result() {
  }

  virtual ~Batch_createProject_result() throw() {}

  ArgumentException missingFields;

  _Batch_createProject_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_createProject_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_createProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_createProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_createProject_presult__isset {
  _Batch_createProject_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_createProject_presult__isset;

class Batch_createProject_presult {
 public:


  virtual ~Batch_createProject_presult() throw() {}

  ArgumentException missingFields;

  _Batch_createProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_openProject_args__isset {
  _Batch_openProject_args__isset() : path(false) {}
  bool path;
} _Batch_openProject_args__isset;

class Batch_openProject_args {
 public:

  Batch_openProject_args() : path() {
  }

  virtual ~Batch_openProject_args() throw() {}

  std::string path;

  _Batch_openProject_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const Batch_openProject_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Batch_openProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_openProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_openProject_pargs {
 public:


  virtual ~Batch_openProject_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_openProject_result__isset {
  _Batch_openProject_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_openProject_result__isset;

class Batch_openProject_result {
 public:

  Batch_openProject_result() {
  }

  virtual ~Batch_openProject_result() throw() {}

   ::flowbox::batch::projects::Project success;
  ArgumentException missingFields;

  _Batch_openProject_result__isset __isset;

  void __set_success(const  ::flowbox::batch::projects::Project& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_openProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_openProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_openProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_openProject_presult__isset {
  _Batch_openProject_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_openProject_presult__isset;

class Batch_openProject_presult {
 public:


  virtual ~Batch_openProject_presult() throw() {}

   ::flowbox::batch::projects::Project* success;
  ArgumentException missingFields;

  _Batch_openProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_closeProject_args__isset {
  _Batch_closeProject_args__isset() : projectID(false) {}
  bool projectID;
} _Batch_closeProject_args__isset;

class Batch_closeProject_args {
 public:

  Batch_closeProject_args() : projectID(0) {
  }

  virtual ~Batch_closeProject_args() throw() {}

   ::flowbox::batch::projects::ProjectID projectID;

  _Batch_closeProject_args__isset __isset;

  void __set_projectID(const  ::flowbox::batch::projects::ProjectID val) {
    projectID = val;
  }

  bool operator == (const Batch_closeProject_args & rhs) const
  {
    if (!(projectID == rhs.projectID))
      return false;
    return true;
  }
  bool operator != (const Batch_closeProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_closeProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_closeProject_pargs {
 public:


  virtual ~Batch_closeProject_pargs() throw() {}

  const  ::flowbox::batch::projects::ProjectID* projectID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_closeProject_result__isset {
  _Batch_closeProject_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_closeProject_result__isset;

class Batch_closeProject_result {
 public:

  Batch_closeProject_result() {
  }

  virtual ~Batch_closeProject_result() throw() {}

  ArgumentException missingFields;

  _Batch_closeProject_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_closeProject_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_closeProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_closeProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_closeProject_presult__isset {
  _Batch_closeProject_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_closeProject_presult__isset;

class Batch_closeProject_presult {
 public:


  virtual ~Batch_closeProject_presult() throw() {}

  ArgumentException missingFields;

  _Batch_closeProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_storeProject_args__isset {
  _Batch_storeProject_args__isset() : projectID(false) {}
  bool projectID;
} _Batch_storeProject_args__isset;

class Batch_storeProject_args {
 public:

  Batch_storeProject_args() : projectID(0) {
  }

  virtual ~Batch_storeProject_args() throw() {}

   ::flowbox::batch::projects::ProjectID projectID;

  _Batch_storeProject_args__isset __isset;

  void __set_projectID(const  ::flowbox::batch::projects::ProjectID val) {
    projectID = val;
  }

  bool operator == (const Batch_storeProject_args & rhs) const
  {
    if (!(projectID == rhs.projectID))
      return false;
    return true;
  }
  bool operator != (const Batch_storeProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_storeProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_storeProject_pargs {
 public:


  virtual ~Batch_storeProject_pargs() throw() {}

  const  ::flowbox::batch::projects::ProjectID* projectID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_storeProject_result__isset {
  _Batch_storeProject_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_storeProject_result__isset;

class Batch_storeProject_result {
 public:

  Batch_storeProject_result() {
  }

  virtual ~Batch_storeProject_result() throw() {}

  ArgumentException missingFields;

  _Batch_storeProject_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_storeProject_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_storeProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_storeProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_storeProject_presult__isset {
  _Batch_storeProject_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_storeProject_presult__isset;

class Batch_storeProject_presult {
 public:


  virtual ~Batch_storeProject_presult() throw() {}

  ArgumentException missingFields;

  _Batch_storeProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_setActiveProject_args__isset {
  _Batch_setActiveProject_args__isset() : projectID(false) {}
  bool projectID;
} _Batch_setActiveProject_args__isset;

class Batch_setActiveProject_args {
 public:

  Batch_setActiveProject_args() : projectID(0) {
  }

  virtual ~Batch_setActiveProject_args() throw() {}

   ::flowbox::batch::projects::ProjectID projectID;

  _Batch_setActiveProject_args__isset __isset;

  void __set_projectID(const  ::flowbox::batch::projects::ProjectID val) {
    projectID = val;
  }

  bool operator == (const Batch_setActiveProject_args & rhs) const
  {
    if (!(projectID == rhs.projectID))
      return false;
    return true;
  }
  bool operator != (const Batch_setActiveProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_setActiveProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_setActiveProject_pargs {
 public:


  virtual ~Batch_setActiveProject_pargs() throw() {}

  const  ::flowbox::batch::projects::ProjectID* projectID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_setActiveProject_result__isset {
  _Batch_setActiveProject_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_setActiveProject_result__isset;

class Batch_setActiveProject_result {
 public:

  Batch_setActiveProject_result() {
  }

  virtual ~Batch_setActiveProject_result() throw() {}

  ArgumentException missingFields;

  _Batch_setActiveProject_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_setActiveProject_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_setActiveProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_setActiveProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_setActiveProject_presult__isset {
  _Batch_setActiveProject_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_setActiveProject_presult__isset;

class Batch_setActiveProject_presult {
 public:


  virtual ~Batch_setActiveProject_presult() throw() {}

  ArgumentException missingFields;

  _Batch_setActiveProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Batch_libraries_args {
 public:

  Batch_libraries_args() {
  }

  virtual ~Batch_libraries_args() throw() {}


  bool operator == (const Batch_libraries_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Batch_libraries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_libraries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_libraries_pargs {
 public:


  virtual ~Batch_libraries_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_libraries_result__isset {
  _Batch_libraries_result__isset() : success(false) {}
  bool success;
} _Batch_libraries_result__isset;

class Batch_libraries_result {
 public:

  Batch_libraries_result() {
  }

  virtual ~Batch_libraries_result() throw() {}

  std::vector< ::flowbox::batch::libs::Library>  success;

  _Batch_libraries_result__isset __isset;

  void __set_success(const std::vector< ::flowbox::batch::libs::Library> & val) {
    success = val;
  }

  bool operator == (const Batch_libraries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Batch_libraries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_libraries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_libraries_presult__isset {
  _Batch_libraries_presult__isset() : success(false) {}
  bool success;
} _Batch_libraries_presult__isset;

class Batch_libraries_presult {
 public:


  virtual ~Batch_libraries_presult() throw() {}

  std::vector< ::flowbox::batch::libs::Library> * success;

  _Batch_libraries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_createLibrary_args__isset {
  _Batch_createLibrary_args__isset() : library(false) {}
  bool library;
} _Batch_createLibrary_args__isset;

class Batch_createLibrary_args {
 public:

  Batch_createLibrary_args() {
  }

  virtual ~Batch_createLibrary_args() throw() {}

   ::flowbox::batch::libs::Library library;

  _Batch_createLibrary_args__isset __isset;

  void __set_library(const  ::flowbox::batch::libs::Library& val) {
    library = val;
  }

  bool operator == (const Batch_createLibrary_args & rhs) const
  {
    if (!(library == rhs.library))
      return false;
    return true;
  }
  bool operator != (const Batch_createLibrary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_createLibrary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_createLibrary_pargs {
 public:


  virtual ~Batch_createLibrary_pargs() throw() {}

  const  ::flowbox::batch::libs::Library* library;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_createLibrary_result__isset {
  _Batch_createLibrary_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_createLibrary_result__isset;

class Batch_createLibrary_result {
 public:

  Batch_createLibrary_result() {
  }

  virtual ~Batch_createLibrary_result() throw() {}

   ::flowbox::batch::libs::Library success;
  ArgumentException missingFields;

  _Batch_createLibrary_result__isset __isset;

  void __set_success(const  ::flowbox::batch::libs::Library& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_createLibrary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_createLibrary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_createLibrary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_createLibrary_presult__isset {
  _Batch_createLibrary_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_createLibrary_presult__isset;

class Batch_createLibrary_presult {
 public:


  virtual ~Batch_createLibrary_presult() throw() {}

   ::flowbox::batch::libs::Library* success;
  ArgumentException missingFields;

  _Batch_createLibrary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_loadLibrary_args__isset {
  _Batch_loadLibrary_args__isset() : path(false) {}
  bool path;
} _Batch_loadLibrary_args__isset;

class Batch_loadLibrary_args {
 public:

  Batch_loadLibrary_args() : path() {
  }

  virtual ~Batch_loadLibrary_args() throw() {}

  std::string path;

  _Batch_loadLibrary_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const Batch_loadLibrary_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Batch_loadLibrary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_loadLibrary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_loadLibrary_pargs {
 public:


  virtual ~Batch_loadLibrary_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_loadLibrary_result__isset {
  _Batch_loadLibrary_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_loadLibrary_result__isset;

class Batch_loadLibrary_result {
 public:

  Batch_loadLibrary_result() {
  }

  virtual ~Batch_loadLibrary_result() throw() {}

   ::flowbox::batch::libs::Library success;
  ArgumentException missingFields;

  _Batch_loadLibrary_result__isset __isset;

  void __set_success(const  ::flowbox::batch::libs::Library& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_loadLibrary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_loadLibrary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_loadLibrary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_loadLibrary_presult__isset {
  _Batch_loadLibrary_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_loadLibrary_presult__isset;

class Batch_loadLibrary_presult {
 public:


  virtual ~Batch_loadLibrary_presult() throw() {}

   ::flowbox::batch::libs::Library* success;
  ArgumentException missingFields;

  _Batch_loadLibrary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_unloadLibrary_args__isset {
  _Batch_unloadLibrary_args__isset() : libID(false) {}
  bool libID;
} _Batch_unloadLibrary_args__isset;

class Batch_unloadLibrary_args {
 public:

  Batch_unloadLibrary_args() : libID(0) {
  }

  virtual ~Batch_unloadLibrary_args() throw() {}

   ::flowbox::batch::libs::LibID libID;

  _Batch_unloadLibrary_args__isset __isset;

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_unloadLibrary_args & rhs) const
  {
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_unloadLibrary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_unloadLibrary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_unloadLibrary_pargs {
 public:


  virtual ~Batch_unloadLibrary_pargs() throw() {}

  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_unloadLibrary_result__isset {
  _Batch_unloadLibrary_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_unloadLibrary_result__isset;

class Batch_unloadLibrary_result {
 public:

  Batch_unloadLibrary_result() {
  }

  virtual ~Batch_unloadLibrary_result() throw() {}

  ArgumentException missingFields;

  _Batch_unloadLibrary_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_unloadLibrary_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_unloadLibrary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_unloadLibrary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_unloadLibrary_presult__isset {
  _Batch_unloadLibrary_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_unloadLibrary_presult__isset;

class Batch_unloadLibrary_presult {
 public:


  virtual ~Batch_unloadLibrary_presult() throw() {}

  ArgumentException missingFields;

  _Batch_unloadLibrary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_storeLibrary_args__isset {
  _Batch_storeLibrary_args__isset() : libID(false) {}
  bool libID;
} _Batch_storeLibrary_args__isset;

class Batch_storeLibrary_args {
 public:

  Batch_storeLibrary_args() : libID(0) {
  }

  virtual ~Batch_storeLibrary_args() throw() {}

   ::flowbox::batch::libs::LibID libID;

  _Batch_storeLibrary_args__isset __isset;

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_storeLibrary_args & rhs) const
  {
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_storeLibrary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_storeLibrary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_storeLibrary_pargs {
 public:


  virtual ~Batch_storeLibrary_pargs() throw() {}

  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_storeLibrary_result__isset {
  _Batch_storeLibrary_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_storeLibrary_result__isset;

class Batch_storeLibrary_result {
 public:

  Batch_storeLibrary_result() {
  }

  virtual ~Batch_storeLibrary_result() throw() {}

  ArgumentException missingFields;

  _Batch_storeLibrary_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_storeLibrary_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_storeLibrary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_storeLibrary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_storeLibrary_presult__isset {
  _Batch_storeLibrary_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_storeLibrary_presult__isset;

class Batch_storeLibrary_presult {
 public:


  virtual ~Batch_storeLibrary_presult() throw() {}

  ArgumentException missingFields;

  _Batch_storeLibrary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_buildLibrary_args__isset {
  _Batch_buildLibrary_args__isset() : libID(false) {}
  bool libID;
} _Batch_buildLibrary_args__isset;

class Batch_buildLibrary_args {
 public:

  Batch_buildLibrary_args() : libID(0) {
  }

  virtual ~Batch_buildLibrary_args() throw() {}

   ::flowbox::batch::libs::LibID libID;

  _Batch_buildLibrary_args__isset __isset;

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_buildLibrary_args & rhs) const
  {
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_buildLibrary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_buildLibrary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_buildLibrary_pargs {
 public:


  virtual ~Batch_buildLibrary_pargs() throw() {}

  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_buildLibrary_result__isset {
  _Batch_buildLibrary_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_buildLibrary_result__isset;

class Batch_buildLibrary_result {
 public:

  Batch_buildLibrary_result() {
  }

  virtual ~Batch_buildLibrary_result() throw() {}

  ArgumentException missingFields;

  _Batch_buildLibrary_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_buildLibrary_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_buildLibrary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_buildLibrary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_buildLibrary_presult__isset {
  _Batch_buildLibrary_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_buildLibrary_presult__isset;

class Batch_buildLibrary_presult {
 public:


  virtual ~Batch_buildLibrary_presult() throw() {}

  ArgumentException missingFields;

  _Batch_buildLibrary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_libraryRootDef_args__isset {
  _Batch_libraryRootDef_args__isset() : libID(false) {}
  bool libID;
} _Batch_libraryRootDef_args__isset;

class Batch_libraryRootDef_args {
 public:

  Batch_libraryRootDef_args() : libID(0) {
  }

  virtual ~Batch_libraryRootDef_args() throw() {}

   ::flowbox::batch::libs::LibID libID;

  _Batch_libraryRootDef_args__isset __isset;

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_libraryRootDef_args & rhs) const
  {
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_libraryRootDef_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_libraryRootDef_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_libraryRootDef_pargs {
 public:


  virtual ~Batch_libraryRootDef_pargs() throw() {}

  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_libraryRootDef_result__isset {
  _Batch_libraryRootDef_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_libraryRootDef_result__isset;

class Batch_libraryRootDef_result {
 public:

  Batch_libraryRootDef_result() {
  }

  virtual ~Batch_libraryRootDef_result() throw() {}

   ::flowbox::batch::defs::Definition success;
  ArgumentException missingFields;

  _Batch_libraryRootDef_result__isset __isset;

  void __set_success(const  ::flowbox::batch::defs::Definition& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_libraryRootDef_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_libraryRootDef_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_libraryRootDef_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_libraryRootDef_presult__isset {
  _Batch_libraryRootDef_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_libraryRootDef_presult__isset;

class Batch_libraryRootDef_presult {
 public:


  virtual ~Batch_libraryRootDef_presult() throw() {}

   ::flowbox::batch::defs::Definition* success;
  ArgumentException missingFields;

  _Batch_libraryRootDef_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_defsGraph_args__isset {
  _Batch_defsGraph_args__isset() : libID(false) {}
  bool libID;
} _Batch_defsGraph_args__isset;

class Batch_defsGraph_args {
 public:

  Batch_defsGraph_args() : libID(0) {
  }

  virtual ~Batch_defsGraph_args() throw() {}

   ::flowbox::batch::libs::LibID libID;

  _Batch_defsGraph_args__isset __isset;

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_defsGraph_args & rhs) const
  {
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_defsGraph_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_defsGraph_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_defsGraph_pargs {
 public:


  virtual ~Batch_defsGraph_pargs() throw() {}

  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_defsGraph_result__isset {
  _Batch_defsGraph_result__isset() : success(false) {}
  bool success;
} _Batch_defsGraph_result__isset;

class Batch_defsGraph_result {
 public:

  Batch_defsGraph_result() {
  }

  virtual ~Batch_defsGraph_result() throw() {}

   ::flowbox::batch::defs::DefsGraph success;

  _Batch_defsGraph_result__isset __isset;

  void __set_success(const  ::flowbox::batch::defs::DefsGraph& val) {
    success = val;
  }

  bool operator == (const Batch_defsGraph_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Batch_defsGraph_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_defsGraph_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_defsGraph_presult__isset {
  _Batch_defsGraph_presult__isset() : success(false) {}
  bool success;
} _Batch_defsGraph_presult__isset;

class Batch_defsGraph_presult {
 public:


  virtual ~Batch_defsGraph_presult() throw() {}

   ::flowbox::batch::defs::DefsGraph* success;

  _Batch_defsGraph_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newDefinition_args__isset {
  _Batch_newDefinition_args__isset() : type(false), imports(false), flags(false), attrs(false) {}
  bool type;
  bool imports;
  bool flags;
  bool attrs;
} _Batch_newDefinition_args__isset;

class Batch_newDefinition_args {
 public:

  Batch_newDefinition_args() {
  }

  virtual ~Batch_newDefinition_args() throw() {}

   ::flowbox::batch::types::Type type;
   ::flowbox::batch::defs::Imports imports;
   ::flowbox::batch::attrs::Flags flags;
   ::flowbox::batch::attrs::Attributes attrs;

  _Batch_newDefinition_args__isset __isset;

  void __set_type(const  ::flowbox::batch::types::Type& val) {
    type = val;
  }

  void __set_imports(const  ::flowbox::batch::defs::Imports& val) {
    imports = val;
  }

  void __set_flags(const  ::flowbox::batch::attrs::Flags& val) {
    flags = val;
  }

  void __set_attrs(const  ::flowbox::batch::attrs::Attributes& val) {
    attrs = val;
  }

  bool operator == (const Batch_newDefinition_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(imports == rhs.imports))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    return true;
  }
  bool operator != (const Batch_newDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newDefinition_pargs {
 public:


  virtual ~Batch_newDefinition_pargs() throw() {}

  const  ::flowbox::batch::types::Type* type;
  const  ::flowbox::batch::defs::Imports* imports;
  const  ::flowbox::batch::attrs::Flags* flags;
  const  ::flowbox::batch::attrs::Attributes* attrs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newDefinition_result__isset {
  _Batch_newDefinition_result__isset() : success(false) {}
  bool success;
} _Batch_newDefinition_result__isset;

class Batch_newDefinition_result {
 public:

  Batch_newDefinition_result() {
  }

  virtual ~Batch_newDefinition_result() throw() {}

   ::flowbox::batch::defs::Definition success;

  _Batch_newDefinition_result__isset __isset;

  void __set_success(const  ::flowbox::batch::defs::Definition& val) {
    success = val;
  }

  bool operator == (const Batch_newDefinition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Batch_newDefinition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newDefinition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newDefinition_presult__isset {
  _Batch_newDefinition_presult__isset() : success(false) {}
  bool success;
} _Batch_newDefinition_presult__isset;

class Batch_newDefinition_presult {
 public:


  virtual ~Batch_newDefinition_presult() throw() {}

   ::flowbox::batch::defs::Definition* success;

  _Batch_newDefinition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_addDefinition_args__isset {
  _Batch_addDefinition_args__isset() : definition(false), parentID(false), libID(false) {}
  bool definition;
  bool parentID;
  bool libID;
} _Batch_addDefinition_args__isset;

class Batch_addDefinition_args {
 public:

  Batch_addDefinition_args() : parentID(0), libID(0) {
  }

  virtual ~Batch_addDefinition_args() throw() {}

   ::flowbox::batch::defs::Definition definition;
   ::flowbox::batch::defs::DefID parentID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_addDefinition_args__isset __isset;

  void __set_definition(const  ::flowbox::batch::defs::Definition& val) {
    definition = val;
  }

  void __set_parentID(const  ::flowbox::batch::defs::DefID val) {
    parentID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_addDefinition_args & rhs) const
  {
    if (!(definition == rhs.definition))
      return false;
    if (!(parentID == rhs.parentID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_addDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_addDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_addDefinition_pargs {
 public:


  virtual ~Batch_addDefinition_pargs() throw() {}

  const  ::flowbox::batch::defs::Definition* definition;
  const  ::flowbox::batch::defs::DefID* parentID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_addDefinition_result__isset {
  _Batch_addDefinition_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_addDefinition_result__isset;

class Batch_addDefinition_result {
 public:

  Batch_addDefinition_result() {
  }

  virtual ~Batch_addDefinition_result() throw() {}

   ::flowbox::batch::defs::Definition success;
  ArgumentException missingFields;

  _Batch_addDefinition_result__isset __isset;

  void __set_success(const  ::flowbox::batch::defs::Definition& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_addDefinition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_addDefinition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_addDefinition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_addDefinition_presult__isset {
  _Batch_addDefinition_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_addDefinition_presult__isset;

class Batch_addDefinition_presult {
 public:


  virtual ~Batch_addDefinition_presult() throw() {}

   ::flowbox::batch::defs::Definition* success;
  ArgumentException missingFields;

  _Batch_addDefinition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_updateDefinition_args__isset {
  _Batch_updateDefinition_args__isset() : definition(false), libID(false) {}
  bool definition;
  bool libID;
} _Batch_updateDefinition_args__isset;

class Batch_updateDefinition_args {
 public:

  Batch_updateDefinition_args() : libID(0) {
  }

  virtual ~Batch_updateDefinition_args() throw() {}

   ::flowbox::batch::defs::Definition definition;
   ::flowbox::batch::libs::LibID libID;

  _Batch_updateDefinition_args__isset __isset;

  void __set_definition(const  ::flowbox::batch::defs::Definition& val) {
    definition = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_updateDefinition_args & rhs) const
  {
    if (!(definition == rhs.definition))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_updateDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_updateDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_updateDefinition_pargs {
 public:


  virtual ~Batch_updateDefinition_pargs() throw() {}

  const  ::flowbox::batch::defs::Definition* definition;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_updateDefinition_result__isset {
  _Batch_updateDefinition_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_updateDefinition_result__isset;

class Batch_updateDefinition_result {
 public:

  Batch_updateDefinition_result() {
  }

  virtual ~Batch_updateDefinition_result() throw() {}

  ArgumentException missingFields;

  _Batch_updateDefinition_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_updateDefinition_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_updateDefinition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_updateDefinition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_updateDefinition_presult__isset {
  _Batch_updateDefinition_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_updateDefinition_presult__isset;

class Batch_updateDefinition_presult {
 public:


  virtual ~Batch_updateDefinition_presult() throw() {}

  ArgumentException missingFields;

  _Batch_updateDefinition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_removeDefinition_args__isset {
  _Batch_removeDefinition_args__isset() : defID(false), libID(false) {}
  bool defID;
  bool libID;
} _Batch_removeDefinition_args__isset;

class Batch_removeDefinition_args {
 public:

  Batch_removeDefinition_args() : defID(0), libID(0) {
  }

  virtual ~Batch_removeDefinition_args() throw() {}

   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_removeDefinition_args__isset __isset;

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_removeDefinition_args & rhs) const
  {
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_removeDefinition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_removeDefinition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_removeDefinition_pargs {
 public:


  virtual ~Batch_removeDefinition_pargs() throw() {}

  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_removeDefinition_result__isset {
  _Batch_removeDefinition_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_removeDefinition_result__isset;

class Batch_removeDefinition_result {
 public:

  Batch_removeDefinition_result() {
  }

  virtual ~Batch_removeDefinition_result() throw() {}

  ArgumentException missingFields;

  _Batch_removeDefinition_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_removeDefinition_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_removeDefinition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_removeDefinition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_removeDefinition_presult__isset {
  _Batch_removeDefinition_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_removeDefinition_presult__isset;

class Batch_removeDefinition_presult {
 public:


  virtual ~Batch_removeDefinition_presult() throw() {}

  ArgumentException missingFields;

  _Batch_removeDefinition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_definitionChildren_args__isset {
  _Batch_definitionChildren_args__isset() : defID(false), libID(false) {}
  bool defID;
  bool libID;
} _Batch_definitionChildren_args__isset;

class Batch_definitionChildren_args {
 public:

  Batch_definitionChildren_args() : defID(0), libID(0) {
  }

  virtual ~Batch_definitionChildren_args() throw() {}

   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_definitionChildren_args__isset __isset;

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_definitionChildren_args & rhs) const
  {
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_definitionChildren_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_definitionChildren_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_definitionChildren_pargs {
 public:


  virtual ~Batch_definitionChildren_pargs() throw() {}

  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_definitionChildren_result__isset {
  _Batch_definitionChildren_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_definitionChildren_result__isset;

class Batch_definitionChildren_result {
 public:

  Batch_definitionChildren_result() {
  }

  virtual ~Batch_definitionChildren_result() throw() {}

  std::vector< ::flowbox::batch::defs::Definition>  success;
  ArgumentException missingFields;

  _Batch_definitionChildren_result__isset __isset;

  void __set_success(const std::vector< ::flowbox::batch::defs::Definition> & val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_definitionChildren_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_definitionChildren_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_definitionChildren_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_definitionChildren_presult__isset {
  _Batch_definitionChildren_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_definitionChildren_presult__isset;

class Batch_definitionChildren_presult {
 public:


  virtual ~Batch_definitionChildren_presult() throw() {}

  std::vector< ::flowbox::batch::defs::Definition> * success;
  ArgumentException missingFields;

  _Batch_definitionChildren_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_definitionParent_args__isset {
  _Batch_definitionParent_args__isset() : defID(false), libID(false) {}
  bool defID;
  bool libID;
} _Batch_definitionParent_args__isset;

class Batch_definitionParent_args {
 public:

  Batch_definitionParent_args() : defID(0), libID(0) {
  }

  virtual ~Batch_definitionParent_args() throw() {}

   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_definitionParent_args__isset __isset;

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_definitionParent_args & rhs) const
  {
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_definitionParent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_definitionParent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_definitionParent_pargs {
 public:


  virtual ~Batch_definitionParent_pargs() throw() {}

  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_definitionParent_result__isset {
  _Batch_definitionParent_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_definitionParent_result__isset;

class Batch_definitionParent_result {
 public:

  Batch_definitionParent_result() {
  }

  virtual ~Batch_definitionParent_result() throw() {}

   ::flowbox::batch::defs::Definition success;
  ArgumentException missingFields;

  _Batch_definitionParent_result__isset __isset;

  void __set_success(const  ::flowbox::batch::defs::Definition& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_definitionParent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_definitionParent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_definitionParent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_definitionParent_presult__isset {
  _Batch_definitionParent_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_definitionParent_presult__isset;

class Batch_definitionParent_presult {
 public:


  virtual ~Batch_definitionParent_presult() throw() {}

   ::flowbox::batch::defs::Definition* success;
  ArgumentException missingFields;

  _Batch_definitionParent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newTypeModule_args__isset {
  _Batch_newTypeModule_args__isset() : name(false) {}
  bool name;
} _Batch_newTypeModule_args__isset;

class Batch_newTypeModule_args {
 public:

  Batch_newTypeModule_args() : name() {
  }

  virtual ~Batch_newTypeModule_args() throw() {}

  std::string name;

  _Batch_newTypeModule_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Batch_newTypeModule_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeModule_pargs {
 public:


  virtual ~Batch_newTypeModule_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeModule_result__isset {
  _Batch_newTypeModule_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeModule_result__isset;

class Batch_newTypeModule_result {
 public:

  Batch_newTypeModule_result() {
  }

  virtual ~Batch_newTypeModule_result() throw() {}

   ::flowbox::batch::types::Type success;
  ArgumentException missingFields;

  _Batch_newTypeModule_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_newTypeModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeModule_presult__isset {
  _Batch_newTypeModule_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeModule_presult__isset;

class Batch_newTypeModule_presult {
 public:


  virtual ~Batch_newTypeModule_presult() throw() {}

   ::flowbox::batch::types::Type* success;
  ArgumentException missingFields;

  _Batch_newTypeModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newTypeClass_args__isset {
  _Batch_newTypeClass_args__isset() : name(false), typeparams(false), params(false) {}
  bool name;
  bool typeparams;
  bool params;
} _Batch_newTypeClass_args__isset;

class Batch_newTypeClass_args {
 public:

  Batch_newTypeClass_args() : name() {
  }

  virtual ~Batch_newTypeClass_args() throw() {}

  std::string name;
  std::vector<std::string>  typeparams;
  std::vector< ::flowbox::batch::types::Type>  params;

  _Batch_newTypeClass_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_typeparams(const std::vector<std::string> & val) {
    typeparams = val;
  }

  void __set_params(const std::vector< ::flowbox::batch::types::Type> & val) {
    params = val;
  }

  bool operator == (const Batch_newTypeClass_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(typeparams == rhs.typeparams))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeClass_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeClass_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeClass_pargs {
 public:


  virtual ~Batch_newTypeClass_pargs() throw() {}

  const std::string* name;
  const std::vector<std::string> * typeparams;
  const std::vector< ::flowbox::batch::types::Type> * params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeClass_result__isset {
  _Batch_newTypeClass_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeClass_result__isset;

class Batch_newTypeClass_result {
 public:

  Batch_newTypeClass_result() {
  }

  virtual ~Batch_newTypeClass_result() throw() {}

   ::flowbox::batch::types::Type success;
  ArgumentException missingFields;

  _Batch_newTypeClass_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_newTypeClass_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeClass_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeClass_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeClass_presult__isset {
  _Batch_newTypeClass_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeClass_presult__isset;

class Batch_newTypeClass_presult {
 public:


  virtual ~Batch_newTypeClass_presult() throw() {}

   ::flowbox::batch::types::Type* success;
  ArgumentException missingFields;

  _Batch_newTypeClass_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newTypeFunction_args__isset {
  _Batch_newTypeFunction_args__isset() : name(false), inputs(false), outputs(false) {}
  bool name;
  bool inputs;
  bool outputs;
} _Batch_newTypeFunction_args__isset;

class Batch_newTypeFunction_args {
 public:

  Batch_newTypeFunction_args() : name() {
  }

  virtual ~Batch_newTypeFunction_args() throw() {}

  std::string name;
   ::flowbox::batch::types::Type inputs;
   ::flowbox::batch::types::Type outputs;

  _Batch_newTypeFunction_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_inputs(const  ::flowbox::batch::types::Type& val) {
    inputs = val;
  }

  void __set_outputs(const  ::flowbox::batch::types::Type& val) {
    outputs = val;
  }

  bool operator == (const Batch_newTypeFunction_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(inputs == rhs.inputs))
      return false;
    if (!(outputs == rhs.outputs))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeFunction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeFunction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeFunction_pargs {
 public:


  virtual ~Batch_newTypeFunction_pargs() throw() {}

  const std::string* name;
  const  ::flowbox::batch::types::Type* inputs;
  const  ::flowbox::batch::types::Type* outputs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeFunction_result__isset {
  _Batch_newTypeFunction_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeFunction_result__isset;

class Batch_newTypeFunction_result {
 public:

  Batch_newTypeFunction_result() {
  }

  virtual ~Batch_newTypeFunction_result() throw() {}

   ::flowbox::batch::types::Type success;
  ArgumentException missingFields;

  _Batch_newTypeFunction_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_newTypeFunction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeFunction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeFunction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeFunction_presult__isset {
  _Batch_newTypeFunction_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeFunction_presult__isset;

class Batch_newTypeFunction_presult {
 public:


  virtual ~Batch_newTypeFunction_presult() throw() {}

   ::flowbox::batch::types::Type* success;
  ArgumentException missingFields;

  _Batch_newTypeFunction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Batch_newTypeUdefined_args {
 public:

  Batch_newTypeUdefined_args() {
  }

  virtual ~Batch_newTypeUdefined_args() throw() {}


  bool operator == (const Batch_newTypeUdefined_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Batch_newTypeUdefined_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeUdefined_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeUdefined_pargs {
 public:


  virtual ~Batch_newTypeUdefined_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeUdefined_result__isset {
  _Batch_newTypeUdefined_result__isset() : success(false) {}
  bool success;
} _Batch_newTypeUdefined_result__isset;

class Batch_newTypeUdefined_result {
 public:

  Batch_newTypeUdefined_result() {
  }

  virtual ~Batch_newTypeUdefined_result() throw() {}

   ::flowbox::batch::types::Type success;

  _Batch_newTypeUdefined_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  bool operator == (const Batch_newTypeUdefined_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeUdefined_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeUdefined_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeUdefined_presult__isset {
  _Batch_newTypeUdefined_presult__isset() : success(false) {}
  bool success;
} _Batch_newTypeUdefined_presult__isset;

class Batch_newTypeUdefined_presult {
 public:


  virtual ~Batch_newTypeUdefined_presult() throw() {}

   ::flowbox::batch::types::Type* success;

  _Batch_newTypeUdefined_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newTypeNamed_args__isset {
  _Batch_newTypeNamed_args__isset() : name(false), type(false) {}
  bool name;
  bool type;
} _Batch_newTypeNamed_args__isset;

class Batch_newTypeNamed_args {
 public:

  Batch_newTypeNamed_args() : name() {
  }

  virtual ~Batch_newTypeNamed_args() throw() {}

  std::string name;
   ::flowbox::batch::types::Type type;

  _Batch_newTypeNamed_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_type(const  ::flowbox::batch::types::Type& val) {
    type = val;
  }

  bool operator == (const Batch_newTypeNamed_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeNamed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeNamed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeNamed_pargs {
 public:


  virtual ~Batch_newTypeNamed_pargs() throw() {}

  const std::string* name;
  const  ::flowbox::batch::types::Type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeNamed_result__isset {
  _Batch_newTypeNamed_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeNamed_result__isset;

class Batch_newTypeNamed_result {
 public:

  Batch_newTypeNamed_result() {
  }

  virtual ~Batch_newTypeNamed_result() throw() {}

   ::flowbox::batch::types::Type success;
  ArgumentException missingFields;

  _Batch_newTypeNamed_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_newTypeNamed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeNamed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeNamed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeNamed_presult__isset {
  _Batch_newTypeNamed_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeNamed_presult__isset;

class Batch_newTypeNamed_presult {
 public:


  virtual ~Batch_newTypeNamed_presult() throw() {}

   ::flowbox::batch::types::Type* success;
  ArgumentException missingFields;

  _Batch_newTypeNamed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newTypeVariable_args__isset {
  _Batch_newTypeVariable_args__isset() : name(false) {}
  bool name;
} _Batch_newTypeVariable_args__isset;

class Batch_newTypeVariable_args {
 public:

  Batch_newTypeVariable_args() : name() {
  }

  virtual ~Batch_newTypeVariable_args() throw() {}

  std::string name;

  _Batch_newTypeVariable_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Batch_newTypeVariable_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeVariable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeVariable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeVariable_pargs {
 public:


  virtual ~Batch_newTypeVariable_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeVariable_result__isset {
  _Batch_newTypeVariable_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeVariable_result__isset;

class Batch_newTypeVariable_result {
 public:

  Batch_newTypeVariable_result() {
  }

  virtual ~Batch_newTypeVariable_result() throw() {}

   ::flowbox::batch::types::Type success;
  ArgumentException missingFields;

  _Batch_newTypeVariable_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_newTypeVariable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeVariable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeVariable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeVariable_presult__isset {
  _Batch_newTypeVariable_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeVariable_presult__isset;

class Batch_newTypeVariable_presult {
 public:


  virtual ~Batch_newTypeVariable_presult() throw() {}

   ::flowbox::batch::types::Type* success;
  ArgumentException missingFields;

  _Batch_newTypeVariable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newTypeList_args__isset {
  _Batch_newTypeList_args__isset() : type(false) {}
  bool type;
} _Batch_newTypeList_args__isset;

class Batch_newTypeList_args {
 public:

  Batch_newTypeList_args() {
  }

  virtual ~Batch_newTypeList_args() throw() {}

   ::flowbox::batch::types::Type type;

  _Batch_newTypeList_args__isset __isset;

  void __set_type(const  ::flowbox::batch::types::Type& val) {
    type = val;
  }

  bool operator == (const Batch_newTypeList_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeList_pargs {
 public:


  virtual ~Batch_newTypeList_pargs() throw() {}

  const  ::flowbox::batch::types::Type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeList_result__isset {
  _Batch_newTypeList_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeList_result__isset;

class Batch_newTypeList_result {
 public:

  Batch_newTypeList_result() {
  }

  virtual ~Batch_newTypeList_result() throw() {}

   ::flowbox::batch::types::Type success;
  ArgumentException missingFields;

  _Batch_newTypeList_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_newTypeList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeList_presult__isset {
  _Batch_newTypeList_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeList_presult__isset;

class Batch_newTypeList_presult {
 public:


  virtual ~Batch_newTypeList_presult() throw() {}

   ::flowbox::batch::types::Type* success;
  ArgumentException missingFields;

  _Batch_newTypeList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_newTypeTuple_args__isset {
  _Batch_newTypeTuple_args__isset() : types(false) {}
  bool types;
} _Batch_newTypeTuple_args__isset;

class Batch_newTypeTuple_args {
 public:

  Batch_newTypeTuple_args() {
  }

  virtual ~Batch_newTypeTuple_args() throw() {}

  std::vector< ::flowbox::batch::types::Type>  types;

  _Batch_newTypeTuple_args__isset __isset;

  void __set_types(const std::vector< ::flowbox::batch::types::Type> & val) {
    types = val;
  }

  bool operator == (const Batch_newTypeTuple_args & rhs) const
  {
    if (!(types == rhs.types))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeTuple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeTuple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_newTypeTuple_pargs {
 public:


  virtual ~Batch_newTypeTuple_pargs() throw() {}

  const std::vector< ::flowbox::batch::types::Type> * types;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeTuple_result__isset {
  _Batch_newTypeTuple_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeTuple_result__isset;

class Batch_newTypeTuple_result {
 public:

  Batch_newTypeTuple_result() {
  }

  virtual ~Batch_newTypeTuple_result() throw() {}

   ::flowbox::batch::types::Type success;
  ArgumentException missingFields;

  _Batch_newTypeTuple_result__isset __isset;

  void __set_success(const  ::flowbox::batch::types::Type& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_newTypeTuple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_newTypeTuple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_newTypeTuple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_newTypeTuple_presult__isset {
  _Batch_newTypeTuple_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_newTypeTuple_presult__isset;

class Batch_newTypeTuple_presult {
 public:


  virtual ~Batch_newTypeTuple_presult() throw() {}

   ::flowbox::batch::types::Type* success;
  ArgumentException missingFields;

  _Batch_newTypeTuple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_nodesGraph_args__isset {
  _Batch_nodesGraph_args__isset() : defID(false), libID(false) {}
  bool defID;
  bool libID;
} _Batch_nodesGraph_args__isset;

class Batch_nodesGraph_args {
 public:

  Batch_nodesGraph_args() : defID(0), libID(0) {
  }

  virtual ~Batch_nodesGraph_args() throw() {}

   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_nodesGraph_args__isset __isset;

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_nodesGraph_args & rhs) const
  {
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_nodesGraph_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_nodesGraph_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_nodesGraph_pargs {
 public:


  virtual ~Batch_nodesGraph_pargs() throw() {}

  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_nodesGraph_result__isset {
  _Batch_nodesGraph_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_nodesGraph_result__isset;

class Batch_nodesGraph_result {
 public:

  Batch_nodesGraph_result() {
  }

  virtual ~Batch_nodesGraph_result() throw() {}

   ::flowbox::batch::graph::GraphView success;
  ArgumentException missingFields;

  _Batch_nodesGraph_result__isset __isset;

  void __set_success(const  ::flowbox::batch::graph::GraphView& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_nodesGraph_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_nodesGraph_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_nodesGraph_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_nodesGraph_presult__isset {
  _Batch_nodesGraph_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_nodesGraph_presult__isset;

class Batch_nodesGraph_presult {
 public:


  virtual ~Batch_nodesGraph_presult() throw() {}

   ::flowbox::batch::graph::GraphView* success;
  ArgumentException missingFields;

  _Batch_nodesGraph_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_addNode_args__isset {
  _Batch_addNode_args__isset() : node(false), defID(false), libID(false) {}
  bool node;
  bool defID;
  bool libID;
} _Batch_addNode_args__isset;

class Batch_addNode_args {
 public:

  Batch_addNode_args() : defID(0), libID(0) {
  }

  virtual ~Batch_addNode_args() throw() {}

   ::flowbox::batch::graph::Node node;
   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_addNode_args__isset __isset;

  void __set_node(const  ::flowbox::batch::graph::Node& val) {
    node = val;
  }

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_addNode_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_addNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_addNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_addNode_pargs {
 public:


  virtual ~Batch_addNode_pargs() throw() {}

  const  ::flowbox::batch::graph::Node* node;
  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_addNode_result__isset {
  _Batch_addNode_result__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_addNode_result__isset;

class Batch_addNode_result {
 public:

  Batch_addNode_result() {
  }

  virtual ~Batch_addNode_result() throw() {}

   ::flowbox::batch::graph::Node success;
  ArgumentException missingFields;

  _Batch_addNode_result__isset __isset;

  void __set_success(const  ::flowbox::batch::graph::Node& val) {
    success = val;
  }

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_addNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_addNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_addNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_addNode_presult__isset {
  _Batch_addNode_presult__isset() : success(false), missingFields(false) {}
  bool success;
  bool missingFields;
} _Batch_addNode_presult__isset;

class Batch_addNode_presult {
 public:


  virtual ~Batch_addNode_presult() throw() {}

   ::flowbox::batch::graph::Node* success;
  ArgumentException missingFields;

  _Batch_addNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_updateNode_args__isset {
  _Batch_updateNode_args__isset() : node(false), defID(false), libID(false) {}
  bool node;
  bool defID;
  bool libID;
} _Batch_updateNode_args__isset;

class Batch_updateNode_args {
 public:

  Batch_updateNode_args() : defID(0), libID(0) {
  }

  virtual ~Batch_updateNode_args() throw() {}

   ::flowbox::batch::graph::Node node;
   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_updateNode_args__isset __isset;

  void __set_node(const  ::flowbox::batch::graph::Node& val) {
    node = val;
  }

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_updateNode_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_updateNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_updateNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_updateNode_pargs {
 public:


  virtual ~Batch_updateNode_pargs() throw() {}

  const  ::flowbox::batch::graph::Node* node;
  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_updateNode_result__isset {
  _Batch_updateNode_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_updateNode_result__isset;

class Batch_updateNode_result {
 public:

  Batch_updateNode_result() {
  }

  virtual ~Batch_updateNode_result() throw() {}

  ArgumentException missingFields;

  _Batch_updateNode_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_updateNode_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_updateNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_updateNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_updateNode_presult__isset {
  _Batch_updateNode_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_updateNode_presult__isset;

class Batch_updateNode_presult {
 public:


  virtual ~Batch_updateNode_presult() throw() {}

  ArgumentException missingFields;

  _Batch_updateNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_removeNode_args__isset {
  _Batch_removeNode_args__isset() : nodeID(false), defID(false), libID(false) {}
  bool nodeID;
  bool defID;
  bool libID;
} _Batch_removeNode_args__isset;

class Batch_removeNode_args {
 public:

  Batch_removeNode_args() : nodeID(0), defID(0), libID(0) {
  }

  virtual ~Batch_removeNode_args() throw() {}

   ::flowbox::batch::graph::NodeID nodeID;
   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_removeNode_args__isset __isset;

  void __set_nodeID(const  ::flowbox::batch::graph::NodeID val) {
    nodeID = val;
  }

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_removeNode_args & rhs) const
  {
    if (!(nodeID == rhs.nodeID))
      return false;
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_removeNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_removeNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_removeNode_pargs {
 public:


  virtual ~Batch_removeNode_pargs() throw() {}

  const  ::flowbox::batch::graph::NodeID* nodeID;
  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_removeNode_result__isset {
  _Batch_removeNode_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_removeNode_result__isset;

class Batch_removeNode_result {
 public:

  Batch_removeNode_result() {
  }

  virtual ~Batch_removeNode_result() throw() {}

  ArgumentException missingFields;

  _Batch_removeNode_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_removeNode_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_removeNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_removeNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_removeNode_presult__isset {
  _Batch_removeNode_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_removeNode_presult__isset;

class Batch_removeNode_presult {
 public:


  virtual ~Batch_removeNode_presult() throw() {}

  ArgumentException missingFields;

  _Batch_removeNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_connect_args__isset {
  _Batch_connect_args__isset() : srcNodeID(false), srcPort(false), dstNodeID(false), dstPort(false), defID(false), libID(false) {}
  bool srcNodeID;
  bool srcPort;
  bool dstNodeID;
  bool dstPort;
  bool defID;
  bool libID;
} _Batch_connect_args__isset;

class Batch_connect_args {
 public:

  Batch_connect_args() : srcNodeID(0), dstNodeID(0), dstPort(0), defID(0), libID(0) {
  }

  virtual ~Batch_connect_args() throw() {}

   ::flowbox::batch::graph::NodeID srcNodeID;
   ::flowbox::batch::graph::PortDescriptor srcPort;
   ::flowbox::batch::graph::NodeID dstNodeID;
  int32_t dstPort;
   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_connect_args__isset __isset;

  void __set_srcNodeID(const  ::flowbox::batch::graph::NodeID val) {
    srcNodeID = val;
  }

  void __set_srcPort(const  ::flowbox::batch::graph::PortDescriptor& val) {
    srcPort = val;
  }

  void __set_dstNodeID(const  ::flowbox::batch::graph::NodeID val) {
    dstNodeID = val;
  }

  void __set_dstPort(const int32_t val) {
    dstPort = val;
  }

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_connect_args & rhs) const
  {
    if (!(srcNodeID == rhs.srcNodeID))
      return false;
    if (!(srcPort == rhs.srcPort))
      return false;
    if (!(dstNodeID == rhs.dstNodeID))
      return false;
    if (!(dstPort == rhs.dstPort))
      return false;
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_connect_pargs {
 public:


  virtual ~Batch_connect_pargs() throw() {}

  const  ::flowbox::batch::graph::NodeID* srcNodeID;
  const  ::flowbox::batch::graph::PortDescriptor* srcPort;
  const  ::flowbox::batch::graph::NodeID* dstNodeID;
  const int32_t* dstPort;
  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_connect_result__isset {
  _Batch_connect_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_connect_result__isset;

class Batch_connect_result {
 public:

  Batch_connect_result() {
  }

  virtual ~Batch_connect_result() throw() {}

  ArgumentException missingFields;

  _Batch_connect_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_connect_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_connect_presult__isset {
  _Batch_connect_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_connect_presult__isset;

class Batch_connect_presult {
 public:


  virtual ~Batch_connect_presult() throw() {}

  ArgumentException missingFields;

  _Batch_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Batch_disconnect_args__isset {
  _Batch_disconnect_args__isset() : srcNodeID(false), srcPort(false), dstNodeID(false), dstPort(false), defID(false), libID(false) {}
  bool srcNodeID;
  bool srcPort;
  bool dstNodeID;
  bool dstPort;
  bool defID;
  bool libID;
} _Batch_disconnect_args__isset;

class Batch_disconnect_args {
 public:

  Batch_disconnect_args() : srcNodeID(0), dstNodeID(0), dstPort(0), defID(0), libID(0) {
  }

  virtual ~Batch_disconnect_args() throw() {}

   ::flowbox::batch::graph::NodeID srcNodeID;
   ::flowbox::batch::graph::PortDescriptor srcPort;
   ::flowbox::batch::graph::NodeID dstNodeID;
  int32_t dstPort;
   ::flowbox::batch::defs::DefID defID;
   ::flowbox::batch::libs::LibID libID;

  _Batch_disconnect_args__isset __isset;

  void __set_srcNodeID(const  ::flowbox::batch::graph::NodeID val) {
    srcNodeID = val;
  }

  void __set_srcPort(const  ::flowbox::batch::graph::PortDescriptor& val) {
    srcPort = val;
  }

  void __set_dstNodeID(const  ::flowbox::batch::graph::NodeID val) {
    dstNodeID = val;
  }

  void __set_dstPort(const int32_t val) {
    dstPort = val;
  }

  void __set_defID(const  ::flowbox::batch::defs::DefID val) {
    defID = val;
  }

  void __set_libID(const  ::flowbox::batch::libs::LibID val) {
    libID = val;
  }

  bool operator == (const Batch_disconnect_args & rhs) const
  {
    if (!(srcNodeID == rhs.srcNodeID))
      return false;
    if (!(srcPort == rhs.srcPort))
      return false;
    if (!(dstNodeID == rhs.dstNodeID))
      return false;
    if (!(dstPort == rhs.dstPort))
      return false;
    if (!(defID == rhs.defID))
      return false;
    if (!(libID == rhs.libID))
      return false;
    return true;
  }
  bool operator != (const Batch_disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_disconnect_pargs {
 public:


  virtual ~Batch_disconnect_pargs() throw() {}

  const  ::flowbox::batch::graph::NodeID* srcNodeID;
  const  ::flowbox::batch::graph::PortDescriptor* srcPort;
  const  ::flowbox::batch::graph::NodeID* dstNodeID;
  const int32_t* dstPort;
  const  ::flowbox::batch::defs::DefID* defID;
  const  ::flowbox::batch::libs::LibID* libID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_disconnect_result__isset {
  _Batch_disconnect_result__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_disconnect_result__isset;

class Batch_disconnect_result {
 public:

  Batch_disconnect_result() {
  }

  virtual ~Batch_disconnect_result() throw() {}

  ArgumentException missingFields;

  _Batch_disconnect_result__isset __isset;

  void __set_missingFields(const ArgumentException& val) {
    missingFields = val;
  }

  bool operator == (const Batch_disconnect_result & rhs) const
  {
    if (!(missingFields == rhs.missingFields))
      return false;
    return true;
  }
  bool operator != (const Batch_disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Batch_disconnect_presult__isset {
  _Batch_disconnect_presult__isset() : missingFields(false) {}
  bool missingFields;
} _Batch_disconnect_presult__isset;

class Batch_disconnect_presult {
 public:


  virtual ~Batch_disconnect_presult() throw() {}

  ArgumentException missingFields;

  _Batch_disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Batch_ping_args {
 public:

  Batch_ping_args() {
  }

  virtual ~Batch_ping_args() throw() {}


  bool operator == (const Batch_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Batch_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_ping_pargs {
 public:


  virtual ~Batch_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_ping_result {
 public:

  Batch_ping_result() {
  }

  virtual ~Batch_ping_result() throw() {}


  bool operator == (const Batch_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Batch_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_ping_presult {
 public:


  virtual ~Batch_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BatchClient : virtual public BatchIf {
 public:
  BatchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BatchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void projects(std::vector< ::flowbox::batch::projects::Project> & _return);
  void send_projects();
  void recv_projects(std::vector< ::flowbox::batch::projects::Project> & _return);
  void createProject(const  ::flowbox::batch::projects::Project& project);
  void send_createProject(const  ::flowbox::batch::projects::Project& project);
  void recv_createProject();
  void openProject( ::flowbox::batch::projects::Project& _return, const std::string& path);
  void send_openProject(const std::string& path);
  void recv_openProject( ::flowbox::batch::projects::Project& _return);
  void closeProject(const  ::flowbox::batch::projects::ProjectID projectID);
  void send_closeProject(const  ::flowbox::batch::projects::ProjectID projectID);
  void recv_closeProject();
  void storeProject(const  ::flowbox::batch::projects::ProjectID projectID);
  void send_storeProject(const  ::flowbox::batch::projects::ProjectID projectID);
  void recv_storeProject();
  void setActiveProject(const  ::flowbox::batch::projects::ProjectID projectID);
  void send_setActiveProject(const  ::flowbox::batch::projects::ProjectID projectID);
  void recv_setActiveProject();
  void libraries(std::vector< ::flowbox::batch::libs::Library> & _return);
  void send_libraries();
  void recv_libraries(std::vector< ::flowbox::batch::libs::Library> & _return);
  void createLibrary( ::flowbox::batch::libs::Library& _return, const  ::flowbox::batch::libs::Library& library);
  void send_createLibrary(const  ::flowbox::batch::libs::Library& library);
  void recv_createLibrary( ::flowbox::batch::libs::Library& _return);
  void loadLibrary( ::flowbox::batch::libs::Library& _return, const std::string& path);
  void send_loadLibrary(const std::string& path);
  void recv_loadLibrary( ::flowbox::batch::libs::Library& _return);
  void unloadLibrary(const  ::flowbox::batch::libs::LibID libID);
  void send_unloadLibrary(const  ::flowbox::batch::libs::LibID libID);
  void recv_unloadLibrary();
  void storeLibrary(const  ::flowbox::batch::libs::LibID libID);
  void send_storeLibrary(const  ::flowbox::batch::libs::LibID libID);
  void recv_storeLibrary();
  void buildLibrary(const  ::flowbox::batch::libs::LibID libID);
  void send_buildLibrary(const  ::flowbox::batch::libs::LibID libID);
  void recv_buildLibrary();
  void libraryRootDef( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::libs::LibID libID);
  void send_libraryRootDef(const  ::flowbox::batch::libs::LibID libID);
  void recv_libraryRootDef( ::flowbox::batch::defs::Definition& _return);
  void defsGraph( ::flowbox::batch::defs::DefsGraph& _return, const  ::flowbox::batch::libs::LibID libID);
  void send_defsGraph(const  ::flowbox::batch::libs::LibID libID);
  void recv_defsGraph( ::flowbox::batch::defs::DefsGraph& _return);
  void newDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::types::Type& type, const  ::flowbox::batch::defs::Imports& imports, const  ::flowbox::batch::attrs::Flags& flags, const  ::flowbox::batch::attrs::Attributes& attrs);
  void send_newDefinition(const  ::flowbox::batch::types::Type& type, const  ::flowbox::batch::defs::Imports& imports, const  ::flowbox::batch::attrs::Flags& flags, const  ::flowbox::batch::attrs::Attributes& attrs);
  void recv_newDefinition( ::flowbox::batch::defs::Definition& _return);
  void addDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::defs::DefID parentID, const  ::flowbox::batch::libs::LibID libID);
  void send_addDefinition(const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::defs::DefID parentID, const  ::flowbox::batch::libs::LibID libID);
  void recv_addDefinition( ::flowbox::batch::defs::Definition& _return);
  void updateDefinition(const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::libs::LibID libID);
  void send_updateDefinition(const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::libs::LibID libID);
  void recv_updateDefinition();
  void removeDefinition(const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_removeDefinition(const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_removeDefinition();
  void definitionChildren(std::vector< ::flowbox::batch::defs::Definition> & _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_definitionChildren(const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_definitionChildren(std::vector< ::flowbox::batch::defs::Definition> & _return);
  void definitionParent( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_definitionParent(const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_definitionParent( ::flowbox::batch::defs::Definition& _return);
  void newTypeModule( ::flowbox::batch::types::Type& _return, const std::string& name);
  void send_newTypeModule(const std::string& name);
  void recv_newTypeModule( ::flowbox::batch::types::Type& _return);
  void newTypeClass( ::flowbox::batch::types::Type& _return, const std::string& name, const std::vector<std::string> & typeparams, const std::vector< ::flowbox::batch::types::Type> & params);
  void send_newTypeClass(const std::string& name, const std::vector<std::string> & typeparams, const std::vector< ::flowbox::batch::types::Type> & params);
  void recv_newTypeClass( ::flowbox::batch::types::Type& _return);
  void newTypeFunction( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& inputs, const  ::flowbox::batch::types::Type& outputs);
  void send_newTypeFunction(const std::string& name, const  ::flowbox::batch::types::Type& inputs, const  ::flowbox::batch::types::Type& outputs);
  void recv_newTypeFunction( ::flowbox::batch::types::Type& _return);
  void newTypeUdefined( ::flowbox::batch::types::Type& _return);
  void send_newTypeUdefined();
  void recv_newTypeUdefined( ::flowbox::batch::types::Type& _return);
  void newTypeNamed( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& type);
  void send_newTypeNamed(const std::string& name, const  ::flowbox::batch::types::Type& type);
  void recv_newTypeNamed( ::flowbox::batch::types::Type& _return);
  void newTypeVariable( ::flowbox::batch::types::Type& _return, const std::string& name);
  void send_newTypeVariable(const std::string& name);
  void recv_newTypeVariable( ::flowbox::batch::types::Type& _return);
  void newTypeList( ::flowbox::batch::types::Type& _return, const  ::flowbox::batch::types::Type& type);
  void send_newTypeList(const  ::flowbox::batch::types::Type& type);
  void recv_newTypeList( ::flowbox::batch::types::Type& _return);
  void newTypeTuple( ::flowbox::batch::types::Type& _return, const std::vector< ::flowbox::batch::types::Type> & types);
  void send_newTypeTuple(const std::vector< ::flowbox::batch::types::Type> & types);
  void recv_newTypeTuple( ::flowbox::batch::types::Type& _return);
  void nodesGraph( ::flowbox::batch::graph::GraphView& _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_nodesGraph(const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_nodesGraph( ::flowbox::batch::graph::GraphView& _return);
  void addNode( ::flowbox::batch::graph::Node& _return, const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_addNode(const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_addNode( ::flowbox::batch::graph::Node& _return);
  void updateNode(const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_updateNode(const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_updateNode();
  void removeNode(const  ::flowbox::batch::graph::NodeID nodeID, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_removeNode(const  ::flowbox::batch::graph::NodeID nodeID, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_removeNode();
  void connect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_connect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_connect();
  void disconnect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void send_disconnect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID);
  void recv_disconnect();
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BatchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BatchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BatchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_projects(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setActiveProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_libraries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createLibrary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadLibrary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unloadLibrary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeLibrary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_buildLibrary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_libraryRootDef(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_defsGraph(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeDefinition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_definitionChildren(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_definitionParent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeClass(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeFunction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeUdefined(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeNamed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeVariable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newTypeTuple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nodesGraph(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BatchProcessor(boost::shared_ptr<BatchIf> iface) :
    iface_(iface) {
    processMap_["projects"] = &BatchProcessor::process_projects;
    processMap_["createProject"] = &BatchProcessor::process_createProject;
    processMap_["openProject"] = &BatchProcessor::process_openProject;
    processMap_["closeProject"] = &BatchProcessor::process_closeProject;
    processMap_["storeProject"] = &BatchProcessor::process_storeProject;
    processMap_["setActiveProject"] = &BatchProcessor::process_setActiveProject;
    processMap_["libraries"] = &BatchProcessor::process_libraries;
    processMap_["createLibrary"] = &BatchProcessor::process_createLibrary;
    processMap_["loadLibrary"] = &BatchProcessor::process_loadLibrary;
    processMap_["unloadLibrary"] = &BatchProcessor::process_unloadLibrary;
    processMap_["storeLibrary"] = &BatchProcessor::process_storeLibrary;
    processMap_["buildLibrary"] = &BatchProcessor::process_buildLibrary;
    processMap_["libraryRootDef"] = &BatchProcessor::process_libraryRootDef;
    processMap_["defsGraph"] = &BatchProcessor::process_defsGraph;
    processMap_["newDefinition"] = &BatchProcessor::process_newDefinition;
    processMap_["addDefinition"] = &BatchProcessor::process_addDefinition;
    processMap_["updateDefinition"] = &BatchProcessor::process_updateDefinition;
    processMap_["removeDefinition"] = &BatchProcessor::process_removeDefinition;
    processMap_["definitionChildren"] = &BatchProcessor::process_definitionChildren;
    processMap_["definitionParent"] = &BatchProcessor::process_definitionParent;
    processMap_["newTypeModule"] = &BatchProcessor::process_newTypeModule;
    processMap_["newTypeClass"] = &BatchProcessor::process_newTypeClass;
    processMap_["newTypeFunction"] = &BatchProcessor::process_newTypeFunction;
    processMap_["newTypeUdefined"] = &BatchProcessor::process_newTypeUdefined;
    processMap_["newTypeNamed"] = &BatchProcessor::process_newTypeNamed;
    processMap_["newTypeVariable"] = &BatchProcessor::process_newTypeVariable;
    processMap_["newTypeList"] = &BatchProcessor::process_newTypeList;
    processMap_["newTypeTuple"] = &BatchProcessor::process_newTypeTuple;
    processMap_["nodesGraph"] = &BatchProcessor::process_nodesGraph;
    processMap_["addNode"] = &BatchProcessor::process_addNode;
    processMap_["updateNode"] = &BatchProcessor::process_updateNode;
    processMap_["removeNode"] = &BatchProcessor::process_removeNode;
    processMap_["connect"] = &BatchProcessor::process_connect;
    processMap_["disconnect"] = &BatchProcessor::process_disconnect;
    processMap_["ping"] = &BatchProcessor::process_ping;
  }

  virtual ~BatchProcessor() {}
};

class BatchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BatchProcessorFactory(const ::boost::shared_ptr< BatchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BatchIfFactory > handlerFactory_;
};

class BatchMultiface : virtual public BatchIf {
 public:
  BatchMultiface(std::vector<boost::shared_ptr<BatchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BatchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BatchIf> > ifaces_;
  BatchMultiface() {}
  void add(boost::shared_ptr<BatchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void projects(std::vector< ::flowbox::batch::projects::Project> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->projects(_return);
    }
    ifaces_[i]->projects(_return);
    return;
  }

  void createProject(const  ::flowbox::batch::projects::Project& project) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createProject(project);
    }
    ifaces_[i]->createProject(project);
  }

  void openProject( ::flowbox::batch::projects::Project& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openProject(_return, path);
    }
    ifaces_[i]->openProject(_return, path);
    return;
  }

  void closeProject(const  ::flowbox::batch::projects::ProjectID projectID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeProject(projectID);
    }
    ifaces_[i]->closeProject(projectID);
  }

  void storeProject(const  ::flowbox::batch::projects::ProjectID projectID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeProject(projectID);
    }
    ifaces_[i]->storeProject(projectID);
  }

  void setActiveProject(const  ::flowbox::batch::projects::ProjectID projectID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setActiveProject(projectID);
    }
    ifaces_[i]->setActiveProject(projectID);
  }

  void libraries(std::vector< ::flowbox::batch::libs::Library> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->libraries(_return);
    }
    ifaces_[i]->libraries(_return);
    return;
  }

  void createLibrary( ::flowbox::batch::libs::Library& _return, const  ::flowbox::batch::libs::Library& library) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createLibrary(_return, library);
    }
    ifaces_[i]->createLibrary(_return, library);
    return;
  }

  void loadLibrary( ::flowbox::batch::libs::Library& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadLibrary(_return, path);
    }
    ifaces_[i]->loadLibrary(_return, path);
    return;
  }

  void unloadLibrary(const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unloadLibrary(libID);
    }
    ifaces_[i]->unloadLibrary(libID);
  }

  void storeLibrary(const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeLibrary(libID);
    }
    ifaces_[i]->storeLibrary(libID);
  }

  void buildLibrary(const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->buildLibrary(libID);
    }
    ifaces_[i]->buildLibrary(libID);
  }

  void libraryRootDef( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->libraryRootDef(_return, libID);
    }
    ifaces_[i]->libraryRootDef(_return, libID);
    return;
  }

  void defsGraph( ::flowbox::batch::defs::DefsGraph& _return, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->defsGraph(_return, libID);
    }
    ifaces_[i]->defsGraph(_return, libID);
    return;
  }

  void newDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::types::Type& type, const  ::flowbox::batch::defs::Imports& imports, const  ::flowbox::batch::attrs::Flags& flags, const  ::flowbox::batch::attrs::Attributes& attrs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newDefinition(_return, type, imports, flags, attrs);
    }
    ifaces_[i]->newDefinition(_return, type, imports, flags, attrs);
    return;
  }

  void addDefinition( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::defs::DefID parentID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDefinition(_return, definition, parentID, libID);
    }
    ifaces_[i]->addDefinition(_return, definition, parentID, libID);
    return;
  }

  void updateDefinition(const  ::flowbox::batch::defs::Definition& definition, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDefinition(definition, libID);
    }
    ifaces_[i]->updateDefinition(definition, libID);
  }

  void removeDefinition(const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeDefinition(defID, libID);
    }
    ifaces_[i]->removeDefinition(defID, libID);
  }

  void definitionChildren(std::vector< ::flowbox::batch::defs::Definition> & _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->definitionChildren(_return, defID, libID);
    }
    ifaces_[i]->definitionChildren(_return, defID, libID);
    return;
  }

  void definitionParent( ::flowbox::batch::defs::Definition& _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->definitionParent(_return, defID, libID);
    }
    ifaces_[i]->definitionParent(_return, defID, libID);
    return;
  }

  void newTypeModule( ::flowbox::batch::types::Type& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeModule(_return, name);
    }
    ifaces_[i]->newTypeModule(_return, name);
    return;
  }

  void newTypeClass( ::flowbox::batch::types::Type& _return, const std::string& name, const std::vector<std::string> & typeparams, const std::vector< ::flowbox::batch::types::Type> & params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeClass(_return, name, typeparams, params);
    }
    ifaces_[i]->newTypeClass(_return, name, typeparams, params);
    return;
  }

  void newTypeFunction( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& inputs, const  ::flowbox::batch::types::Type& outputs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeFunction(_return, name, inputs, outputs);
    }
    ifaces_[i]->newTypeFunction(_return, name, inputs, outputs);
    return;
  }

  void newTypeUdefined( ::flowbox::batch::types::Type& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeUdefined(_return);
    }
    ifaces_[i]->newTypeUdefined(_return);
    return;
  }

  void newTypeNamed( ::flowbox::batch::types::Type& _return, const std::string& name, const  ::flowbox::batch::types::Type& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeNamed(_return, name, type);
    }
    ifaces_[i]->newTypeNamed(_return, name, type);
    return;
  }

  void newTypeVariable( ::flowbox::batch::types::Type& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeVariable(_return, name);
    }
    ifaces_[i]->newTypeVariable(_return, name);
    return;
  }

  void newTypeList( ::flowbox::batch::types::Type& _return, const  ::flowbox::batch::types::Type& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeList(_return, type);
    }
    ifaces_[i]->newTypeList(_return, type);
    return;
  }

  void newTypeTuple( ::flowbox::batch::types::Type& _return, const std::vector< ::flowbox::batch::types::Type> & types) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newTypeTuple(_return, types);
    }
    ifaces_[i]->newTypeTuple(_return, types);
    return;
  }

  void nodesGraph( ::flowbox::batch::graph::GraphView& _return, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nodesGraph(_return, defID, libID);
    }
    ifaces_[i]->nodesGraph(_return, defID, libID);
    return;
  }

  void addNode( ::flowbox::batch::graph::Node& _return, const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addNode(_return, node, defID, libID);
    }
    ifaces_[i]->addNode(_return, node, defID, libID);
    return;
  }

  void updateNode(const  ::flowbox::batch::graph::Node& node, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateNode(node, defID, libID);
    }
    ifaces_[i]->updateNode(node, defID, libID);
  }

  void removeNode(const  ::flowbox::batch::graph::NodeID nodeID, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeNode(nodeID, defID, libID);
    }
    ifaces_[i]->removeNode(nodeID, defID, libID);
  }

  void connect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect(srcNodeID, srcPort, dstNodeID, dstPort, defID, libID);
    }
    ifaces_[i]->connect(srcNodeID, srcPort, dstNodeID, dstPort, defID, libID);
  }

  void disconnect(const  ::flowbox::batch::graph::NodeID srcNodeID, const  ::flowbox::batch::graph::PortDescriptor& srcPort, const  ::flowbox::batch::graph::NodeID dstNodeID, const int32_t dstPort, const  ::flowbox::batch::defs::DefID defID, const  ::flowbox::batch::libs::LibID libID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect(srcNodeID, srcPort, dstNodeID, dstPort, defID, libID);
    }
    ifaces_[i]->disconnect(srcNodeID, srcPort, dstNodeID, dstPort, defID, libID);
  }

  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

};

}} // namespace

#endif
