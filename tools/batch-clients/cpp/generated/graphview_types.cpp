/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "graphview_types.h"

#include <algorithm>

namespace flowbox { namespace batch { namespace graph {

const char* EdgeView::ascii_fingerprint = "A8C2A7C113E82F9E83C944457CEF1050";
const uint8_t EdgeView::binary_fingerprint[16] = {0xA8,0xC2,0xA7,0xC1,0x13,0xE8,0x2F,0x9E,0x83,0xC9,0x44,0x45,0x7C,0xEF,0x10,0x50};

uint32_t EdgeView::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->srcNode);
          this->__isset.srcNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dstNode);
          this->__isset.dstNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->srcPort.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->srcPort.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->srcPort[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.srcPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dstPort);
          this->__isset.dstPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EdgeView::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EdgeView");

  if (this->__isset.srcNode) {
    xfer += oprot->writeFieldBegin("srcNode", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->srcNode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dstNode) {
    xfer += oprot->writeFieldBegin("dstNode", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->dstNode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcPort) {
    xfer += oprot->writeFieldBegin("srcPort", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->srcPort.size()));
      std::vector<int32_t> ::const_iterator _iter5;
      for (_iter5 = this->srcPort.begin(); _iter5 != this->srcPort.end(); ++_iter5)
      {
        xfer += oprot->writeI32((*_iter5));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dstPort) {
    xfer += oprot->writeFieldBegin("dstPort", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->dstPort);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EdgeView &a, EdgeView &b) {
  using ::std::swap;
  swap(a.srcNode, b.srcNode);
  swap(a.dstNode, b.dstNode);
  swap(a.srcPort, b.srcPort);
  swap(a.dstPort, b.dstPort);
  swap(a.__isset, b.__isset);
}

const char* GraphView::ascii_fingerprint = "858C6E7D8E0007C97144342852E2D151";
const uint8_t GraphView::binary_fingerprint[16] = {0x85,0x8C,0x6E,0x7D,0x8E,0x00,0x07,0xC9,0x71,0x44,0x34,0x28,0x52,0xE2,0xD1,0x51};

uint32_t GraphView::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->nodes.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _ktype7;
            ::apache::thrift::protocol::TType _vtype8;
            xfer += iprot->readMapBegin(_ktype7, _vtype8, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
               ::flowbox::batch::graph::NodeID _key11;
              xfer += iprot->readI32(_key11);
               ::flowbox::batch::graph::Node& _val12 = this->nodes[_key11];
              xfer += _val12.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->edges.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->edges.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->edges[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.edges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GraphView::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GraphView");

  if (this->__isset.nodes) {
    xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
      std::map< ::flowbox::batch::graph::NodeID,  ::flowbox::batch::graph::Node> ::const_iterator _iter18;
      for (_iter18 = this->nodes.begin(); _iter18 != this->nodes.end(); ++_iter18)
      {
        xfer += oprot->writeI32(_iter18->first);
        xfer += _iter18->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.edges) {
    xfer += oprot->writeFieldBegin("edges", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->edges.size()));
      std::vector<EdgeView> ::const_iterator _iter19;
      for (_iter19 = this->edges.begin(); _iter19 != this->edges.end(); ++_iter19)
      {
        xfer += (*_iter19).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GraphView &a, GraphView &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.edges, b.edges);
  swap(a.__isset, b.__isset);
}

}}} // namespace
