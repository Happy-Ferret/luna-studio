/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "fs_types.h"

#include <algorithm>

namespace flowbox { namespace batch { namespace fs {

int _kFSItemTypeValues[] = {
  FSItemType::Directory,
  FSItemType::File,
  FSItemType::Other
};
const char* _kFSItemTypeNames[] = {
  "Directory",
  "File",
  "Other"
};
const std::map<int, const char*> _FSItemType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kFSItemTypeValues, _kFSItemTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* FSItem::ascii_fingerprint = "6A93F5F459652B86154E951A24D52A7B";
const uint8_t FSItem::binary_fingerprint[16] = {0x6A,0x93,0xF5,0xF4,0x59,0x65,0x2B,0x86,0x15,0x4E,0x95,0x1A,0x24,0xD5,0x2A,0x7B};

uint32_t FSItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->itemType = (FSItemType::type)ecast0;
          this->__isset.itemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FSItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FSItem");

  if (this->__isset.itemType) {
    xfer += oprot->writeFieldBegin("itemType", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->itemType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.path) {
    xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->path);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->size);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FSItem &a, FSItem &b) {
  using ::std::swap;
  swap(a.itemType, b.itemType);
  swap(a.path, b.path);
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

}}} // namespace
