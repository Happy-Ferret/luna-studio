// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crumb.proto

#ifndef PROTOBUF_crumb_2eproto__INCLUDED
#define PROTOBUF_crumb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace crumb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_crumb_2eproto();
void protobuf_AssignDesc_crumb_2eproto();
void protobuf_ShutdownFile_crumb_2eproto();

class Crumb;
class Breadcrumbs;

enum Crumb_Cls {
  Crumb_Cls_FunctionCrumb = 1,
  Crumb_Cls_ClassCrumb = 2,
  Crumb_Cls_ModuleCrumb = 3
};
bool Crumb_Cls_IsValid(int value);
const Crumb_Cls Crumb_Cls_Cls_MIN = Crumb_Cls_FunctionCrumb;
const Crumb_Cls Crumb_Cls_Cls_MAX = Crumb_Cls_ModuleCrumb;
const int Crumb_Cls_Cls_ARRAYSIZE = Crumb_Cls_Cls_MAX + 1;

const ::google::protobuf::EnumDescriptor* Crumb_Cls_descriptor();
inline const ::std::string& Crumb_Cls_Name(Crumb_Cls value) {
  return ::google::protobuf::internal::NameOfEnum(
    Crumb_Cls_descriptor(), value);
}
inline bool Crumb_Cls_Parse(
    const ::std::string& name, Crumb_Cls* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Crumb_Cls>(
    Crumb_Cls_descriptor(), name, value);
}
// ===================================================================

class Crumb : public ::google::protobuf::Message {
 public:
  Crumb();
  virtual ~Crumb();
  
  Crumb(const Crumb& from);
  
  inline Crumb& operator=(const Crumb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Crumb& default_instance();
  
  void Swap(Crumb* other);
  
  // implements Message ----------------------------------------------
  
  Crumb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Crumb& from);
  void MergeFrom(const Crumb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Crumb_Cls Cls;
  static const Cls FunctionCrumb = Crumb_Cls_FunctionCrumb;
  static const Cls ClassCrumb = Crumb_Cls_ClassCrumb;
  static const Cls ModuleCrumb = Crumb_Cls_ModuleCrumb;
  static inline bool Cls_IsValid(int value) {
    return Crumb_Cls_IsValid(value);
  }
  static const Cls Cls_MIN =
    Crumb_Cls_Cls_MIN;
  static const Cls Cls_MAX =
    Crumb_Cls_Cls_MAX;
  static const int Cls_ARRAYSIZE =
    Crumb_Cls_Cls_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cls_descriptor() {
    return Crumb_Cls_descriptor();
  }
  static inline const ::std::string& Cls_Name(Cls value) {
    return Crumb_Cls_Name(value);
  }
  static inline bool Cls_Parse(const ::std::string& name,
      Cls* value) {
    return Crumb_Cls_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .generated.proto.crumb.Crumb.Cls cls = 1;
  inline bool has_cls() const;
  inline void clear_cls();
  static const int kClsFieldNumber = 1;
  inline ::generated::proto::crumb::Crumb_Cls cls() const;
  inline void set_cls(::generated::proto::crumb::Crumb_Cls value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:generated.proto.crumb.Crumb)
 private:
  inline void set_has_cls();
  inline void clear_has_cls();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int cls_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_crumb_2eproto();
  friend void protobuf_AssignDesc_crumb_2eproto();
  friend void protobuf_ShutdownFile_crumb_2eproto();
  
  void InitAsDefaultInstance();
  static Crumb* default_instance_;
};
// -------------------------------------------------------------------

class Breadcrumbs : public ::google::protobuf::Message {
 public:
  Breadcrumbs();
  virtual ~Breadcrumbs();
  
  Breadcrumbs(const Breadcrumbs& from);
  
  inline Breadcrumbs& operator=(const Breadcrumbs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Breadcrumbs& default_instance();
  
  void Swap(Breadcrumbs* other);
  
  // implements Message ----------------------------------------------
  
  Breadcrumbs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Breadcrumbs& from);
  void MergeFrom(const Breadcrumbs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .generated.proto.crumb.Crumb crumbs = 1;
  inline int crumbs_size() const;
  inline void clear_crumbs();
  static const int kCrumbsFieldNumber = 1;
  inline const ::generated::proto::crumb::Crumb& crumbs(int index) const;
  inline ::generated::proto::crumb::Crumb* mutable_crumbs(int index);
  inline ::generated::proto::crumb::Crumb* add_crumbs();
  inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::crumb::Crumb >&
      crumbs() const;
  inline ::google::protobuf::RepeatedPtrField< ::generated::proto::crumb::Crumb >*
      mutable_crumbs();
  
  // @@protoc_insertion_point(class_scope:generated.proto.crumb.Breadcrumbs)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::generated::proto::crumb::Crumb > crumbs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_crumb_2eproto();
  friend void protobuf_AssignDesc_crumb_2eproto();
  friend void protobuf_ShutdownFile_crumb_2eproto();
  
  void InitAsDefaultInstance();
  static Breadcrumbs* default_instance_;
};
// ===================================================================


// ===================================================================

// Crumb

// required .generated.proto.crumb.Crumb.Cls cls = 1;
inline bool Crumb::has_cls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crumb::set_has_cls() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Crumb::clear_has_cls() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Crumb::clear_cls() {
  cls_ = 1;
  clear_has_cls();
}
inline ::generated::proto::crumb::Crumb_Cls Crumb::cls() const {
  return static_cast< ::generated::proto::crumb::Crumb_Cls >(cls_);
}
inline void Crumb::set_cls(::generated::proto::crumb::Crumb_Cls value) {
  GOOGLE_DCHECK(::generated::proto::crumb::Crumb_Cls_IsValid(value));
  set_has_cls();
  cls_ = value;
}

// optional string name = 2;
inline bool Crumb::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Crumb::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Crumb::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Crumb::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Crumb::name() const {
  return *name_;
}
inline void Crumb::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Crumb::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Crumb::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Crumb::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Crumb::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Breadcrumbs

// repeated .generated.proto.crumb.Crumb crumbs = 1;
inline int Breadcrumbs::crumbs_size() const {
  return crumbs_.size();
}
inline void Breadcrumbs::clear_crumbs() {
  crumbs_.Clear();
}
inline const ::generated::proto::crumb::Crumb& Breadcrumbs::crumbs(int index) const {
  return crumbs_.Get(index);
}
inline ::generated::proto::crumb::Crumb* Breadcrumbs::mutable_crumbs(int index) {
  return crumbs_.Mutable(index);
}
inline ::generated::proto::crumb::Crumb* Breadcrumbs::add_crumbs() {
  return crumbs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::crumb::Crumb >&
Breadcrumbs::crumbs() const {
  return crumbs_;
}
inline ::google::protobuf::RepeatedPtrField< ::generated::proto::crumb::Crumb >*
Breadcrumbs::mutable_crumbs() {
  return &crumbs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace crumb
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::generated::proto::crumb::Crumb_Cls>() {
  return ::generated::proto::crumb::Crumb_Cls_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_crumb_2eproto__INCLUDED
