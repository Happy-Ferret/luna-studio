// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace graph {

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Node_Cls_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_graph_2eproto() {
  protobuf_AddDesc_graph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graph.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, attrs_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  Node_Cls_descriptor_ = Node_descriptor_->enum_type(0);
  Edge_descriptor_ = file->message_type(1);
  static const int Edge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, nodesrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, nodedst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, portsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, portdst_),
  };
  Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge));
  Graph_descriptor_ = file->message_type(2);
  static const int Graph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edges_),
  };
  Graph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Graph_descriptor_,
      Graph::default_instance_,
      Graph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Graph));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Graph_descriptor_, &Graph::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graph_2eproto() {
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete Graph::default_instance_;
  delete Graph_reflection_;
}

void protobuf_AddDesc_graph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::attributes::protobuf_AddDesc_attributes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013graph.proto\022\025generated.proto.graph\032\020at"
    "tributes.proto\"\345\001\n\004Node\022,\n\003cls\030\001 \002(\0162\037.g"
    "enerated.proto.graph.Node.Cls\022\016\n\006nodeID\030"
    "\002 \001(\005\022\014\n\004name\030\003 \001(\t\0220\n\005flags\030\004 \001(\0132!.gen"
    "erated.proto.attributes.Flags\0225\n\005attrs\030\005"
    " \001(\0132&.generated.proto.attributes.Attrib"
    "utes\"(\n\003Cls\022\010\n\004Expr\020\001\022\n\n\006Inputs\020\002\022\013\n\007Out"
    "puts\020\003\"J\n\004Edge\022\017\n\007nodeSrc\030\001 \001(\005\022\017\n\007nodeD"
    "st\030\002 \001(\005\022\017\n\007portSrc\030\003 \001(\005\022\017\n\007portDst\030\004 \001"
    "(\005\"_\n\005Graph\022*\n\005nodes\030\001 \003(\0132\033.generated.p"
    "roto.graph.Node\022*\n\005edges\030\002 \003(\0132\033.generat"
    "ed.proto.graph.Edge", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graph.proto", &protobuf_RegisterTypes);
  Node::default_instance_ = new Node();
  Edge::default_instance_ = new Edge();
  Graph::default_instance_ = new Graph();
  Node::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  Graph::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graph_2eproto {
  StaticDescriptorInitializer_graph_2eproto() {
    protobuf_AddDesc_graph_2eproto();
  }
} static_descriptor_initializer_graph_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Node_Cls_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_Cls_descriptor_;
}
bool Node_Cls_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Node_Cls Node::Expr;
const Node_Cls Node::Inputs;
const Node_Cls Node::Outputs;
const Node_Cls Node::Cls_MIN;
const Node_Cls Node::Cls_MAX;
const int Node::Cls_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Node::kClsFieldNumber;
const int Node::kNodeIDFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kFlagsFieldNumber;
const int Node::kAttrsFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
  flags_ = const_cast< ::generated::proto::attributes::Flags*>(&::generated::proto::attributes::Flags::default_instance());
  attrs_ = const_cast< ::generated::proto::attributes::Attributes*>(&::generated::proto::attributes::Attributes::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  cls_ = 1;
  nodeid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = NULL;
  attrs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete flags_;
    delete attrs_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2eproto();  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cls_ = 1;
    nodeid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_flags()) {
      if (flags_ != NULL) flags_->::generated::proto::attributes::Flags::Clear();
    }
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::generated::proto::attributes::Attributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.graph.Node.Cls cls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::generated::proto::graph::Node_Cls_IsValid(value)) {
            set_cls(static_cast< ::generated::proto::graph::Node_Cls >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nodeID;
        break;
      }
      
      // optional int32 nodeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_flags;
        break;
      }
      
      // optional .generated.proto.attributes.Flags flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attrs;
        break;
      }
      
      // optional .generated.proto.attributes.Attributes attrs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.graph.Node.Cls cls = 1;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cls(), output);
  }
  
  // optional int32 nodeID = 2;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nodeid(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional .generated.proto.attributes.Flags flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->flags(), output);
  }
  
  // optional .generated.proto.attributes.Attributes attrs = 5;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attrs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.graph.Node.Cls cls = 1;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cls(), target);
  }
  
  // optional int32 nodeID = 2;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nodeid(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional .generated.proto.attributes.Flags flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->flags(), target);
  }
  
  // optional .generated.proto.attributes.Attributes attrs = 5;
  if (has_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attrs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.graph.Node.Cls cls = 1;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cls());
    }
    
    // optional int32 nodeID = 2;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodeid());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .generated.proto.attributes.Flags flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flags());
    }
    
    // optional .generated.proto.attributes.Attributes attrs = 5;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls()) {
      set_cls(from.cls());
    }
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flags()) {
      mutable_flags()->::generated::proto::attributes::Flags::MergeFrom(from.flags());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::generated::proto::attributes::Attributes::MergeFrom(from.attrs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_attrs()) {
    if (!this->attrs().IsInitialized()) return false;
  }
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(cls_, other->cls_);
    std::swap(nodeid_, other->nodeid_);
    std::swap(name_, other->name_);
    std::swap(flags_, other->flags_);
    std::swap(attrs_, other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Edge::kNodeSrcFieldNumber;
const int Edge::kNodeDstFieldNumber;
const int Edge::kPortSrcFieldNumber;
const int Edge::kPortDstFieldNumber;
#endif  // !_MSC_VER

Edge::Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edge::InitAsDefaultInstance() {
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edge::SharedCtor() {
  _cached_size_ = 0;
  nodesrc_ = 0;
  nodedst_ = 0;
  portsrc_ = 0;
  portdst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge::~Edge() {
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2eproto();  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New() const {
  return new Edge;
}

void Edge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nodesrc_ = 0;
    nodedst_ = 0;
    portsrc_ = 0;
    portdst_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nodeSrc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodesrc_)));
          set_has_nodesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nodeDst;
        break;
      }
      
      // optional int32 nodeDst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeDst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodedst_)));
          set_has_nodedst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_portSrc;
        break;
      }
      
      // optional int32 portSrc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portSrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portsrc_)));
          set_has_portsrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_portDst;
        break;
      }
      
      // optional int32 portDst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portDst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portdst_)));
          set_has_portdst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nodeSrc = 1;
  if (has_nodesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nodesrc(), output);
  }
  
  // optional int32 nodeDst = 2;
  if (has_nodedst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nodedst(), output);
  }
  
  // optional int32 portSrc = 3;
  if (has_portsrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->portsrc(), output);
  }
  
  // optional int32 portDst = 4;
  if (has_portdst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->portdst(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nodeSrc = 1;
  if (has_nodesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nodesrc(), target);
  }
  
  // optional int32 nodeDst = 2;
  if (has_nodedst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nodedst(), target);
  }
  
  // optional int32 portSrc = 3;
  if (has_portsrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->portsrc(), target);
  }
  
  // optional int32 portDst = 4;
  if (has_portdst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->portdst(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nodeSrc = 1;
    if (has_nodesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodesrc());
    }
    
    // optional int32 nodeDst = 2;
    if (has_nodedst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodedst());
    }
    
    // optional int32 portSrc = 3;
    if (has_portsrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->portsrc());
    }
    
    // optional int32 portDst = 4;
    if (has_portdst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->portdst());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodesrc()) {
      set_nodesrc(from.nodesrc());
    }
    if (from.has_nodedst()) {
      set_nodedst(from.nodedst());
    }
    if (from.has_portsrc()) {
      set_portsrc(from.portsrc());
    }
    if (from.has_portdst()) {
      set_portdst(from.portdst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  
  return true;
}

void Edge::Swap(Edge* other) {
  if (other != this) {
    std::swap(nodesrc_, other->nodesrc_);
    std::swap(nodedst_, other->nodedst_);
    std::swap(portsrc_, other->portsrc_);
    std::swap(portdst_, other->portdst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Graph::kNodesFieldNumber;
const int Graph::kEdgesFieldNumber;
#endif  // !_MSC_VER

Graph::Graph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Graph::InitAsDefaultInstance() {
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Graph::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Graph::~Graph() {
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2eproto();  return *default_instance_;
}

Graph* Graph::default_instance_ = NULL;

Graph* Graph::New() const {
  return new Graph;
}

void Graph::Clear() {
  nodes_.Clear();
  edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.graph.Node nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectTag(18)) goto parse_edges;
        break;
      }
      
      // repeated .generated.proto.graph.Edge edges = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edges;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.graph.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }
  
  // repeated .generated.proto.graph.Edge edges = 2;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edges(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Graph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.graph.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  // repeated .generated.proto.graph.Edge edges = 2;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->edges(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Graph::ByteSize() const {
  int total_size = 0;
  
  // repeated .generated.proto.graph.Node nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  // repeated .generated.proto.graph.Edge edges = 2;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Graph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Graph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void Graph::Swap(Graph* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    edges_.Swap(&other->edges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
