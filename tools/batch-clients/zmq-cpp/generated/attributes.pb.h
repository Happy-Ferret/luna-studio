// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attributes.proto

#ifndef PROTOBUF_attributes_2eproto__INCLUDED
#define PROTOBUF_attributes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace attributes {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_attributes_2eproto();
void protobuf_AssignDesc_attributes_2eproto();
void protobuf_ShutdownFile_attributes_2eproto();

class Flags;
class Attributes;
class Attributes_Space;
class Attributes_Space_KeyValue;

// ===================================================================

class Flags : public ::google::protobuf::Message {
 public:
  Flags();
  virtual ~Flags();
  
  Flags(const Flags& from);
  
  inline Flags& operator=(const Flags& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Flags& default_instance();
  
  void Swap(Flags* other);
  
  // implements Message ----------------------------------------------
  
  Flags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Flags& from);
  void MergeFrom(const Flags& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool io = 1 [default = false];
  inline bool has_io() const;
  inline void clear_io();
  static const int kIoFieldNumber = 1;
  inline bool io() const;
  inline void set_io(bool value);
  
  // optional bool omit = 2 [default = false];
  inline bool has_omit() const;
  inline void clear_omit();
  static const int kOmitFieldNumber = 2;
  inline bool omit() const;
  inline void set_omit(bool value);
  
  // @@protoc_insertion_point(class_scope:generated.proto.attributes.Flags)
 private:
  inline void set_has_io();
  inline void clear_has_io();
  inline void set_has_omit();
  inline void clear_has_omit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool io_;
  bool omit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_attributes_2eproto();
  friend void protobuf_AssignDesc_attributes_2eproto();
  friend void protobuf_ShutdownFile_attributes_2eproto();
  
  void InitAsDefaultInstance();
  static Flags* default_instance_;
};
// -------------------------------------------------------------------

class Attributes_Space_KeyValue : public ::google::protobuf::Message {
 public:
  Attributes_Space_KeyValue();
  virtual ~Attributes_Space_KeyValue();
  
  Attributes_Space_KeyValue(const Attributes_Space_KeyValue& from);
  
  inline Attributes_Space_KeyValue& operator=(const Attributes_Space_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attributes_Space_KeyValue& default_instance();
  
  void Swap(Attributes_Space_KeyValue* other);
  
  // implements Message ----------------------------------------------
  
  Attributes_Space_KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attributes_Space_KeyValue& from);
  void MergeFrom(const Attributes_Space_KeyValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:generated.proto.attributes.Attributes.Space.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_attributes_2eproto();
  friend void protobuf_AssignDesc_attributes_2eproto();
  friend void protobuf_ShutdownFile_attributes_2eproto();
  
  void InitAsDefaultInstance();
  static Attributes_Space_KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class Attributes_Space : public ::google::protobuf::Message {
 public:
  Attributes_Space();
  virtual ~Attributes_Space();
  
  Attributes_Space(const Attributes_Space& from);
  
  inline Attributes_Space& operator=(const Attributes_Space& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attributes_Space& default_instance();
  
  void Swap(Attributes_Space* other);
  
  // implements Message ----------------------------------------------
  
  Attributes_Space* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attributes_Space& from);
  void MergeFrom(const Attributes_Space& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Attributes_Space_KeyValue KeyValue;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .generated.proto.attributes.Attributes.Space.KeyValue items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::generated::proto::attributes::Attributes_Space_KeyValue& items(int index) const;
  inline ::generated::proto::attributes::Attributes_Space_KeyValue* mutable_items(int index);
  inline ::generated::proto::attributes::Attributes_Space_KeyValue* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space_KeyValue >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space_KeyValue >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:generated.proto.attributes.Attributes.Space)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space_KeyValue > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_attributes_2eproto();
  friend void protobuf_AssignDesc_attributes_2eproto();
  friend void protobuf_ShutdownFile_attributes_2eproto();
  
  void InitAsDefaultInstance();
  static Attributes_Space* default_instance_;
};
// -------------------------------------------------------------------

class Attributes : public ::google::protobuf::Message {
 public:
  Attributes();
  virtual ~Attributes();
  
  Attributes(const Attributes& from);
  
  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attributes& default_instance();
  
  void Swap(Attributes* other);
  
  // implements Message ----------------------------------------------
  
  Attributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Attributes_Space Space;
  
  // accessors -------------------------------------------------------
  
  // repeated .generated.proto.attributes.Attributes.Space spaces = 1;
  inline int spaces_size() const;
  inline void clear_spaces();
  static const int kSpacesFieldNumber = 1;
  inline const ::generated::proto::attributes::Attributes_Space& spaces(int index) const;
  inline ::generated::proto::attributes::Attributes_Space* mutable_spaces(int index);
  inline ::generated::proto::attributes::Attributes_Space* add_spaces();
  inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space >&
      spaces() const;
  inline ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space >*
      mutable_spaces();
  
  // @@protoc_insertion_point(class_scope:generated.proto.attributes.Attributes)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space > spaces_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_attributes_2eproto();
  friend void protobuf_AssignDesc_attributes_2eproto();
  friend void protobuf_ShutdownFile_attributes_2eproto();
  
  void InitAsDefaultInstance();
  static Attributes* default_instance_;
};
// ===================================================================


// ===================================================================

// Flags

// optional bool io = 1 [default = false];
inline bool Flags::has_io() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Flags::set_has_io() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Flags::clear_has_io() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Flags::clear_io() {
  io_ = false;
  clear_has_io();
}
inline bool Flags::io() const {
  return io_;
}
inline void Flags::set_io(bool value) {
  set_has_io();
  io_ = value;
}

// optional bool omit = 2 [default = false];
inline bool Flags::has_omit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Flags::set_has_omit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Flags::clear_has_omit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Flags::clear_omit() {
  omit_ = false;
  clear_has_omit();
}
inline bool Flags::omit() const {
  return omit_;
}
inline void Flags::set_omit(bool value) {
  set_has_omit();
  omit_ = value;
}

// -------------------------------------------------------------------

// Attributes_Space_KeyValue

// required string key = 1;
inline bool Attributes_Space_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attributes_Space_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attributes_Space_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attributes_Space_KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Attributes_Space_KeyValue::key() const {
  return *key_;
}
inline void Attributes_Space_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Attributes_Space_KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Attributes_Space_KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attributes_Space_KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Attributes_Space_KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool Attributes_Space_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attributes_Space_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attributes_Space_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attributes_Space_KeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Attributes_Space_KeyValue::value() const {
  return *value_;
}
inline void Attributes_Space_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Attributes_Space_KeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Attributes_Space_KeyValue::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attributes_Space_KeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Attributes_Space_KeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Attributes_Space

// required string name = 1;
inline bool Attributes_Space::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attributes_Space::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attributes_Space::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attributes_Space::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Attributes_Space::name() const {
  return *name_;
}
inline void Attributes_Space::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Attributes_Space::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Attributes_Space::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attributes_Space::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Attributes_Space::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .generated.proto.attributes.Attributes.Space.KeyValue items = 2;
inline int Attributes_Space::items_size() const {
  return items_.size();
}
inline void Attributes_Space::clear_items() {
  items_.Clear();
}
inline const ::generated::proto::attributes::Attributes_Space_KeyValue& Attributes_Space::items(int index) const {
  return items_.Get(index);
}
inline ::generated::proto::attributes::Attributes_Space_KeyValue* Attributes_Space::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::generated::proto::attributes::Attributes_Space_KeyValue* Attributes_Space::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space_KeyValue >&
Attributes_Space::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space_KeyValue >*
Attributes_Space::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// Attributes

// repeated .generated.proto.attributes.Attributes.Space spaces = 1;
inline int Attributes::spaces_size() const {
  return spaces_.size();
}
inline void Attributes::clear_spaces() {
  spaces_.Clear();
}
inline const ::generated::proto::attributes::Attributes_Space& Attributes::spaces(int index) const {
  return spaces_.Get(index);
}
inline ::generated::proto::attributes::Attributes_Space* Attributes::mutable_spaces(int index) {
  return spaces_.Mutable(index);
}
inline ::generated::proto::attributes::Attributes_Space* Attributes::add_spaces() {
  return spaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space >&
Attributes::spaces() const {
  return spaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::generated::proto::attributes::Attributes_Space >*
Attributes::mutable_spaces() {
  return &spaces_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace attributes
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_attributes_2eproto__INCLUDED
