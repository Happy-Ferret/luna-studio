// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef PROTOBUF_graph_2eproto__INCLUDED
#define PROTOBUF_graph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "attributes.pb.h"
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace graph {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_graph_2eproto();
void protobuf_AssignDesc_graph_2eproto();
void protobuf_ShutdownFile_graph_2eproto();

class Node;
class Edge;
class Graph;

enum Node_Cls {
  Node_Cls_Expr = 1,
  Node_Cls_Inputs = 2,
  Node_Cls_Outputs = 3
};
bool Node_Cls_IsValid(int value);
const Node_Cls Node_Cls_Cls_MIN = Node_Cls_Expr;
const Node_Cls Node_Cls_Cls_MAX = Node_Cls_Outputs;
const int Node_Cls_Cls_ARRAYSIZE = Node_Cls_Cls_MAX + 1;

const ::google::protobuf::EnumDescriptor* Node_Cls_descriptor();
inline const ::std::string& Node_Cls_Name(Node_Cls value) {
  return ::google::protobuf::internal::NameOfEnum(
    Node_Cls_descriptor(), value);
}
inline bool Node_Cls_Parse(
    const ::std::string& name, Node_Cls* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Node_Cls>(
    Node_Cls_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();
  
  Node(const Node& from);
  
  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();
  
  void Swap(Node* other);
  
  // implements Message ----------------------------------------------
  
  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Node_Cls Cls;
  static const Cls Expr = Node_Cls_Expr;
  static const Cls Inputs = Node_Cls_Inputs;
  static const Cls Outputs = Node_Cls_Outputs;
  static inline bool Cls_IsValid(int value) {
    return Node_Cls_IsValid(value);
  }
  static const Cls Cls_MIN =
    Node_Cls_Cls_MIN;
  static const Cls Cls_MAX =
    Node_Cls_Cls_MAX;
  static const int Cls_ARRAYSIZE =
    Node_Cls_Cls_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cls_descriptor() {
    return Node_Cls_descriptor();
  }
  static inline const ::std::string& Cls_Name(Cls value) {
    return Node_Cls_Name(value);
  }
  static inline bool Cls_Parse(const ::std::string& name,
      Cls* value) {
    return Node_Cls_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .generated.proto.graph.Node.Cls cls = 1;
  inline bool has_cls() const;
  inline void clear_cls();
  static const int kClsFieldNumber = 1;
  inline ::generated::proto::graph::Node_Cls cls() const;
  inline void set_cls(::generated::proto::graph::Node_Cls value);
  
  // optional int32 nodeID = 2;
  inline bool has_nodeid() const;
  inline void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  inline ::google::protobuf::int32 nodeid() const;
  inline void set_nodeid(::google::protobuf::int32 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .generated.proto.attributes.Flags flags = 4;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 4;
  inline const ::generated::proto::attributes::Flags& flags() const;
  inline ::generated::proto::attributes::Flags* mutable_flags();
  inline ::generated::proto::attributes::Flags* release_flags();
  
  // optional .generated.proto.attributes.Attributes attrs = 5;
  inline bool has_attrs() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 5;
  inline const ::generated::proto::attributes::Attributes& attrs() const;
  inline ::generated::proto::attributes::Attributes* mutable_attrs();
  inline ::generated::proto::attributes::Attributes* release_attrs();
  
  // @@protoc_insertion_point(class_scope:generated.proto.graph.Node)
 private:
  inline void set_has_cls();
  inline void clear_has_cls();
  inline void set_has_nodeid();
  inline void clear_has_nodeid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_attrs();
  inline void clear_has_attrs();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int cls_;
  ::google::protobuf::int32 nodeid_;
  ::std::string* name_;
  ::generated::proto::attributes::Flags* flags_;
  ::generated::proto::attributes::Attributes* attrs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_graph_2eproto();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();
  
  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message {
 public:
  Edge();
  virtual ~Edge();
  
  Edge(const Edge& from);
  
  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();
  
  void Swap(Edge* other);
  
  // implements Message ----------------------------------------------
  
  Edge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nodeSrc = 1;
  inline bool has_nodesrc() const;
  inline void clear_nodesrc();
  static const int kNodeSrcFieldNumber = 1;
  inline ::google::protobuf::int32 nodesrc() const;
  inline void set_nodesrc(::google::protobuf::int32 value);
  
  // optional int32 nodeDst = 2;
  inline bool has_nodedst() const;
  inline void clear_nodedst();
  static const int kNodeDstFieldNumber = 2;
  inline ::google::protobuf::int32 nodedst() const;
  inline void set_nodedst(::google::protobuf::int32 value);
  
  // optional int32 portSrc = 3;
  inline bool has_portsrc() const;
  inline void clear_portsrc();
  static const int kPortSrcFieldNumber = 3;
  inline ::google::protobuf::int32 portsrc() const;
  inline void set_portsrc(::google::protobuf::int32 value);
  
  // optional int32 portDst = 4;
  inline bool has_portdst() const;
  inline void clear_portdst();
  static const int kPortDstFieldNumber = 4;
  inline ::google::protobuf::int32 portdst() const;
  inline void set_portdst(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:generated.proto.graph.Edge)
 private:
  inline void set_has_nodesrc();
  inline void clear_has_nodesrc();
  inline void set_has_nodedst();
  inline void clear_has_nodedst();
  inline void set_has_portsrc();
  inline void clear_has_portsrc();
  inline void set_has_portdst();
  inline void clear_has_portdst();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 nodesrc_;
  ::google::protobuf::int32 nodedst_;
  ::google::protobuf::int32 portsrc_;
  ::google::protobuf::int32 portdst_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_graph_2eproto();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();
  
  void InitAsDefaultInstance();
  static Edge* default_instance_;
};
// -------------------------------------------------------------------

class Graph : public ::google::protobuf::Message {
 public:
  Graph();
  virtual ~Graph();
  
  Graph(const Graph& from);
  
  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Graph& default_instance();
  
  void Swap(Graph* other);
  
  // implements Message ----------------------------------------------
  
  Graph* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .generated.proto.graph.Node nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::generated::proto::graph::Node& nodes(int index) const;
  inline ::generated::proto::graph::Node* mutable_nodes(int index);
  inline ::generated::proto::graph::Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Node >*
      mutable_nodes();
  
  // repeated .generated.proto.graph.Edge edges = 2;
  inline int edges_size() const;
  inline void clear_edges();
  static const int kEdgesFieldNumber = 2;
  inline const ::generated::proto::graph::Edge& edges(int index) const;
  inline ::generated::proto::graph::Edge* mutable_edges(int index);
  inline ::generated::proto::graph::Edge* add_edges();
  inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Edge >&
      edges() const;
  inline ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Edge >*
      mutable_edges();
  
  // @@protoc_insertion_point(class_scope:generated.proto.graph.Graph)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Node > nodes_;
  ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Edge > edges_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_graph_2eproto();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();
  
  void InitAsDefaultInstance();
  static Graph* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required .generated.proto.graph.Node.Cls cls = 1;
inline bool Node::has_cls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_cls() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_cls() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_cls() {
  cls_ = 1;
  clear_has_cls();
}
inline ::generated::proto::graph::Node_Cls Node::cls() const {
  return static_cast< ::generated::proto::graph::Node_Cls >(cls_);
}
inline void Node::set_cls(::generated::proto::graph::Node_Cls value) {
  GOOGLE_DCHECK(::generated::proto::graph::Node_Cls_IsValid(value));
  set_has_cls();
  cls_ = value;
}

// optional int32 nodeID = 2;
inline bool Node::has_nodeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_nodeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_nodeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_nodeid() {
  nodeid_ = 0;
  clear_has_nodeid();
}
inline ::google::protobuf::int32 Node::nodeid() const {
  return nodeid_;
}
inline void Node::set_nodeid(::google::protobuf::int32 value) {
  set_has_nodeid();
  nodeid_ = value;
}

// optional string name = 3;
inline bool Node::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Node::name() const {
  return *name_;
}
inline void Node::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Node::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Node::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Node::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .generated.proto.attributes.Flags flags = 4;
inline bool Node::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_flags() {
  if (flags_ != NULL) flags_->::generated::proto::attributes::Flags::Clear();
  clear_has_flags();
}
inline const ::generated::proto::attributes::Flags& Node::flags() const {
  return flags_ != NULL ? *flags_ : *default_instance_->flags_;
}
inline ::generated::proto::attributes::Flags* Node::mutable_flags() {
  set_has_flags();
  if (flags_ == NULL) flags_ = new ::generated::proto::attributes::Flags;
  return flags_;
}
inline ::generated::proto::attributes::Flags* Node::release_flags() {
  clear_has_flags();
  ::generated::proto::attributes::Flags* temp = flags_;
  flags_ = NULL;
  return temp;
}

// optional .generated.proto.attributes.Attributes attrs = 5;
inline bool Node::has_attrs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_attrs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_attrs() {
  if (attrs_ != NULL) attrs_->::generated::proto::attributes::Attributes::Clear();
  clear_has_attrs();
}
inline const ::generated::proto::attributes::Attributes& Node::attrs() const {
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
inline ::generated::proto::attributes::Attributes* Node::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) attrs_ = new ::generated::proto::attributes::Attributes;
  return attrs_;
}
inline ::generated::proto::attributes::Attributes* Node::release_attrs() {
  clear_has_attrs();
  ::generated::proto::attributes::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Edge

// optional int32 nodeSrc = 1;
inline bool Edge::has_nodesrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Edge::set_has_nodesrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Edge::clear_has_nodesrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Edge::clear_nodesrc() {
  nodesrc_ = 0;
  clear_has_nodesrc();
}
inline ::google::protobuf::int32 Edge::nodesrc() const {
  return nodesrc_;
}
inline void Edge::set_nodesrc(::google::protobuf::int32 value) {
  set_has_nodesrc();
  nodesrc_ = value;
}

// optional int32 nodeDst = 2;
inline bool Edge::has_nodedst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edge::set_has_nodedst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edge::clear_has_nodedst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edge::clear_nodedst() {
  nodedst_ = 0;
  clear_has_nodedst();
}
inline ::google::protobuf::int32 Edge::nodedst() const {
  return nodedst_;
}
inline void Edge::set_nodedst(::google::protobuf::int32 value) {
  set_has_nodedst();
  nodedst_ = value;
}

// optional int32 portSrc = 3;
inline bool Edge::has_portsrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Edge::set_has_portsrc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Edge::clear_has_portsrc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Edge::clear_portsrc() {
  portsrc_ = 0;
  clear_has_portsrc();
}
inline ::google::protobuf::int32 Edge::portsrc() const {
  return portsrc_;
}
inline void Edge::set_portsrc(::google::protobuf::int32 value) {
  set_has_portsrc();
  portsrc_ = value;
}

// optional int32 portDst = 4;
inline bool Edge::has_portdst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Edge::set_has_portdst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Edge::clear_has_portdst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Edge::clear_portdst() {
  portdst_ = 0;
  clear_has_portdst();
}
inline ::google::protobuf::int32 Edge::portdst() const {
  return portdst_;
}
inline void Edge::set_portdst(::google::protobuf::int32 value) {
  set_has_portdst();
  portdst_ = value;
}

// -------------------------------------------------------------------

// Graph

// repeated .generated.proto.graph.Node nodes = 1;
inline int Graph::nodes_size() const {
  return nodes_.size();
}
inline void Graph::clear_nodes() {
  nodes_.Clear();
}
inline const ::generated::proto::graph::Node& Graph::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::generated::proto::graph::Node* Graph::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::generated::proto::graph::Node* Graph::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Node >&
Graph::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Node >*
Graph::mutable_nodes() {
  return &nodes_;
}

// repeated .generated.proto.graph.Edge edges = 2;
inline int Graph::edges_size() const {
  return edges_.size();
}
inline void Graph::clear_edges() {
  edges_.Clear();
}
inline const ::generated::proto::graph::Edge& Graph::edges(int index) const {
  return edges_.Get(index);
}
inline ::generated::proto::graph::Edge* Graph::mutable_edges(int index) {
  return edges_.Mutable(index);
}
inline ::generated::proto::graph::Edge* Graph::add_edges() {
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Edge >&
Graph::edges() const {
  return edges_;
}
inline ::google::protobuf::RepeatedPtrField< ::generated::proto::graph::Edge >*
Graph::mutable_edges() {
  return &edges_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::generated::proto::graph::Node_Cls>() {
  return ::generated::proto::graph::Node_Cls_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graph_2eproto__INCLUDED
