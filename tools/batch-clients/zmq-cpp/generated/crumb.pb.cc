// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "crumb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace crumb {

namespace {

const ::google::protobuf::Descriptor* Crumb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Crumb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Crumb_Cls_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Breadcrumbs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Breadcrumbs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_crumb_2eproto() {
  protobuf_AddDesc_crumb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "crumb.proto");
  GOOGLE_CHECK(file != NULL);
  Crumb_descriptor_ = file->message_type(0);
  static const int Crumb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crumb, cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crumb, name_),
  };
  Crumb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Crumb_descriptor_,
      Crumb::default_instance_,
      Crumb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crumb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crumb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Crumb));
  Crumb_Cls_descriptor_ = Crumb_descriptor_->enum_type(0);
  Breadcrumbs_descriptor_ = file->message_type(1);
  static const int Breadcrumbs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breadcrumbs, crumbs_),
  };
  Breadcrumbs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Breadcrumbs_descriptor_,
      Breadcrumbs::default_instance_,
      Breadcrumbs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breadcrumbs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breadcrumbs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Breadcrumbs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_crumb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Crumb_descriptor_, &Crumb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Breadcrumbs_descriptor_, &Breadcrumbs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_crumb_2eproto() {
  delete Crumb::default_instance_;
  delete Crumb_reflection_;
  delete Breadcrumbs::default_instance_;
  delete Breadcrumbs_reflection_;
}

void protobuf_AddDesc_crumb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013crumb.proto\022\025generated.proto.crumb\"\177\n\005"
    "Crumb\022-\n\003cls\030\001 \002(\0162 .generated.proto.cru"
    "mb.Crumb.Cls\022\014\n\004name\030\002 \001(\t\"9\n\003Cls\022\021\n\rFun"
    "ctionCrumb\020\001\022\016\n\nClassCrumb\020\002\022\017\n\013ModuleCr"
    "umb\020\003\";\n\013Breadcrumbs\022,\n\006crumbs\030\001 \003(\0132\034.g"
    "enerated.proto.crumb.Crumb", 226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "crumb.proto", &protobuf_RegisterTypes);
  Crumb::default_instance_ = new Crumb();
  Breadcrumbs::default_instance_ = new Breadcrumbs();
  Crumb::default_instance_->InitAsDefaultInstance();
  Breadcrumbs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_crumb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_crumb_2eproto {
  StaticDescriptorInitializer_crumb_2eproto() {
    protobuf_AddDesc_crumb_2eproto();
  }
} static_descriptor_initializer_crumb_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Crumb_Cls_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Crumb_Cls_descriptor_;
}
bool Crumb_Cls_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Crumb_Cls Crumb::FunctionCrumb;
const Crumb_Cls Crumb::ClassCrumb;
const Crumb_Cls Crumb::ModuleCrumb;
const Crumb_Cls Crumb::Cls_MIN;
const Crumb_Cls Crumb::Cls_MAX;
const int Crumb::Cls_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Crumb::kClsFieldNumber;
const int Crumb::kNameFieldNumber;
#endif  // !_MSC_VER

Crumb::Crumb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Crumb::InitAsDefaultInstance() {
}

Crumb::Crumb(const Crumb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Crumb::SharedCtor() {
  _cached_size_ = 0;
  cls_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Crumb::~Crumb() {
  SharedDtor();
}

void Crumb::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Crumb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Crumb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Crumb_descriptor_;
}

const Crumb& Crumb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crumb_2eproto();  return *default_instance_;
}

Crumb* Crumb::default_instance_ = NULL;

Crumb* Crumb::New() const {
  return new Crumb;
}

void Crumb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cls_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Crumb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.crumb.Crumb.Cls cls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::generated::proto::crumb::Crumb_Cls_IsValid(value)) {
            set_cls(static_cast< ::generated::proto::crumb::Crumb_Cls >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Crumb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.crumb.Crumb.Cls cls = 1;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cls(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Crumb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.crumb.Crumb.Cls cls = 1;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cls(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Crumb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.crumb.Crumb.Cls cls = 1;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cls());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Crumb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Crumb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Crumb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Crumb::MergeFrom(const Crumb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls()) {
      set_cls(from.cls());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Crumb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crumb::CopyFrom(const Crumb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crumb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Crumb::Swap(Crumb* other) {
  if (other != this) {
    std::swap(cls_, other->cls_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Crumb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Crumb_descriptor_;
  metadata.reflection = Crumb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Breadcrumbs::kCrumbsFieldNumber;
#endif  // !_MSC_VER

Breadcrumbs::Breadcrumbs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Breadcrumbs::InitAsDefaultInstance() {
}

Breadcrumbs::Breadcrumbs(const Breadcrumbs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Breadcrumbs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Breadcrumbs::~Breadcrumbs() {
  SharedDtor();
}

void Breadcrumbs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Breadcrumbs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Breadcrumbs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Breadcrumbs_descriptor_;
}

const Breadcrumbs& Breadcrumbs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crumb_2eproto();  return *default_instance_;
}

Breadcrumbs* Breadcrumbs::default_instance_ = NULL;

Breadcrumbs* Breadcrumbs::New() const {
  return new Breadcrumbs;
}

void Breadcrumbs::Clear() {
  crumbs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Breadcrumbs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.crumb.Crumb crumbs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crumbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crumbs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_crumbs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Breadcrumbs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.crumb.Crumb crumbs = 1;
  for (int i = 0; i < this->crumbs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->crumbs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Breadcrumbs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.crumb.Crumb crumbs = 1;
  for (int i = 0; i < this->crumbs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->crumbs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Breadcrumbs::ByteSize() const {
  int total_size = 0;
  
  // repeated .generated.proto.crumb.Crumb crumbs = 1;
  total_size += 1 * this->crumbs_size();
  for (int i = 0; i < this->crumbs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crumbs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Breadcrumbs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Breadcrumbs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Breadcrumbs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Breadcrumbs::MergeFrom(const Breadcrumbs& from) {
  GOOGLE_CHECK_NE(&from, this);
  crumbs_.MergeFrom(from.crumbs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Breadcrumbs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Breadcrumbs::CopyFrom(const Breadcrumbs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Breadcrumbs::IsInitialized() const {
  
  for (int i = 0; i < crumbs_size(); i++) {
    if (!this->crumbs(i).IsInitialized()) return false;
  }
  return true;
}

void Breadcrumbs::Swap(Breadcrumbs* other) {
  if (other != this) {
    crumbs_.Swap(&other->crumbs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Breadcrumbs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Breadcrumbs_descriptor_;
  metadata.reflection = Breadcrumbs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace crumb
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
