/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "attrs_types.h"

#include <algorithm>

namespace flowbox { namespace batch { namespace attrs {

const char* Flags::ascii_fingerprint = "1959DF646639D95C0F1375CF60F71F5B";
const uint8_t Flags::binary_fingerprint[16] = {0x19,0x59,0xDF,0x64,0x66,0x39,0xD9,0x5C,0x0F,0x13,0x75,0xCF,0x60,0xF7,0x1F,0x5B};

uint32_t Flags::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->io);
          this->__isset.io = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->omit);
          this->__isset.omit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Flags::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Flags");

  if (this->__isset.io) {
    xfer += oprot->writeFieldBegin("io", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->io);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.omit) {
    xfer += oprot->writeFieldBegin("omit", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->omit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Flags &a, Flags &b) {
  using ::std::swap;
  swap(a.io, b.io);
  swap(a.omit, b.omit);
  swap(a.__isset, b.__isset);
}

const char* Attributes::ascii_fingerprint = "951945F8453D39BB0F43C336D8A2E43A";
const uint8_t Attributes::binary_fingerprint[16] = {0x95,0x19,0x45,0xF8,0x45,0x3D,0x39,0xBB,0x0F,0x43,0xC3,0x36,0xD8,0xA2,0xE4,0x3A};

uint32_t Attributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->spaces.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::map<std::string, std::string> & _val6 = this->spaces[_key5];
              {
                _val6.clear();
                uint32_t _size7;
                ::apache::thrift::protocol::TType _ktype8;
                ::apache::thrift::protocol::TType _vtype9;
                xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
                uint32_t _i11;
                for (_i11 = 0; _i11 < _size7; ++_i11)
                {
                  std::string _key12;
                  xfer += iprot->readString(_key12);
                  std::string& _val13 = _val6[_key12];
                  xfer += iprot->readString(_val13);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.spaces = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Attributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Attributes");

  if (this->__isset.spaces) {
    xfer += oprot->writeFieldBegin("spaces", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->spaces.size()));
      std::map<std::string, std::map<std::string, std::string> > ::const_iterator _iter14;
      for (_iter14 = this->spaces.begin(); _iter14 != this->spaces.end(); ++_iter14)
      {
        xfer += oprot->writeString(_iter14->first);
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter14->second.size()));
          std::map<std::string, std::string> ::const_iterator _iter15;
          for (_iter15 = _iter14->second.begin(); _iter15 != _iter14->second.end(); ++_iter15)
          {
            xfer += oprot->writeString(_iter15->first);
            xfer += oprot->writeString(_iter15->second);
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Attributes &a, Attributes &b) {
  using ::std::swap;
  swap(a.spaces, b.spaces);
  swap(a.__isset, b.__isset);
}

}}} // namespace
