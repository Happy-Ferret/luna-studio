/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Batch_H
#define Batch_H

#include <thrift/TDispatchProcessor.h>
#include "batch_types.h"



class BatchIf {
 public:
  virtual ~BatchIf() {}
  virtual void ping() = 0;
};

class BatchIfFactory {
 public:
  typedef BatchIf Handler;

  virtual ~BatchIfFactory() {}

  virtual BatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BatchIf* /* handler */) = 0;
};

class BatchIfSingletonFactory : virtual public BatchIfFactory {
 public:
  BatchIfSingletonFactory(const boost::shared_ptr<BatchIf>& iface) : iface_(iface) {}
  virtual ~BatchIfSingletonFactory() {}

  virtual BatchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BatchIf* /* handler */) {}

 protected:
  boost::shared_ptr<BatchIf> iface_;
};

class BatchNull : virtual public BatchIf {
 public:
  virtual ~BatchNull() {}
  void ping() {
    return;
  }
};


class Batch_ping_args {
 public:

  Batch_ping_args() {
  }

  virtual ~Batch_ping_args() throw() {}


  bool operator == (const Batch_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Batch_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_ping_pargs {
 public:


  virtual ~Batch_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_ping_result {
 public:

  Batch_ping_result() {
  }

  virtual ~Batch_ping_result() throw() {}


  bool operator == (const Batch_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Batch_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Batch_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Batch_ping_presult {
 public:


  virtual ~Batch_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BatchClient : virtual public BatchIf {
 public:
  BatchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BatchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BatchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BatchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BatchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BatchProcessor(boost::shared_ptr<BatchIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &BatchProcessor::process_ping;
  }

  virtual ~BatchProcessor() {}
};

class BatchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BatchProcessorFactory(const ::boost::shared_ptr< BatchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BatchIfFactory > handlerFactory_;
};

class BatchMultiface : virtual public BatchIf {
 public:
  BatchMultiface(std::vector<boost::shared_ptr<BatchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BatchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BatchIf> > ifaces_;
  BatchMultiface() {}
  void add(boost::shared_ptr<BatchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

};



#endif
