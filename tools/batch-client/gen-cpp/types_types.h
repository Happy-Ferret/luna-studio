/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef types_TYPES_H
#define types_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace flowbox { namespace batch {

struct TypeType {
  enum type {
    Undefined = 0,
    Module = 1,
    Function = 2,
    Class = 3,
    Interface = 4,
    Named = 5,
    TypeVariable = 6,
    Tuple = 7,
    List = 8
  };
};

extern const std::map<int, const char*> _TypeType_VALUES_TO_NAMES;

typedef struct _TypeProto__isset {
  _TypeProto__isset() : name(false), items(true), typeparams(true), params(true), inputs(false), outputs(false), type(false) {}
  bool name;
  bool items;
  bool typeparams;
  bool params;
  bool inputs;
  bool outputs;
  bool type;
} _TypeProto__isset;

class TypeProto {
 public:

  static const char* ascii_fingerprint; // = "41C95B9BAE14CE08755F6104411F858E";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0xC9,0x5B,0x9B,0xAE,0x14,0xCE,0x08,0x75,0x5F,0x61,0x04,0x41,0x1F,0x85,0x8E};

  TypeProto() : cls((TypeType::type)0), name(), inputs(0), outputs(0), type(0) {



  }

  virtual ~TypeProto() throw() {}

  TypeType::type cls;
  std::string name;
  std::vector<int32_t>  items;
  std::vector<std::string>  typeparams;
  std::vector<int32_t>  params;
  int32_t inputs;
  int32_t outputs;
  int32_t type;

  _TypeProto__isset __isset;

  void __set_cls(const TypeType::type val) {
    cls = val;
  }

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  void __set_items(const std::vector<int32_t> & val) {
    items = val;
    __isset.items = true;
  }

  void __set_typeparams(const std::vector<std::string> & val) {
    typeparams = val;
    __isset.typeparams = true;
  }

  void __set_params(const std::vector<int32_t> & val) {
    params = val;
    __isset.params = true;
  }

  void __set_inputs(const int32_t val) {
    inputs = val;
    __isset.inputs = true;
  }

  void __set_outputs(const int32_t val) {
    outputs = val;
    __isset.outputs = true;
  }

  void __set_type(const int32_t val) {
    type = val;
    __isset.type = true;
  }

  bool operator == (const TypeProto & rhs) const
  {
    if (!(cls == rhs.cls))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.items != rhs.__isset.items)
      return false;
    else if (__isset.items && !(items == rhs.items))
      return false;
    if (__isset.typeparams != rhs.__isset.typeparams)
      return false;
    else if (__isset.typeparams && !(typeparams == rhs.typeparams))
      return false;
    if (__isset.params != rhs.__isset.params)
      return false;
    else if (__isset.params && !(params == rhs.params))
      return false;
    if (__isset.inputs != rhs.__isset.inputs)
      return false;
    else if (__isset.inputs && !(inputs == rhs.inputs))
      return false;
    if (__isset.outputs != rhs.__isset.outputs)
      return false;
    else if (__isset.outputs && !(outputs == rhs.outputs))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const TypeProto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TypeProto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TypeProto &a, TypeProto &b);

typedef struct _Type__isset {
  _Type__isset() : types(false) {}
  bool types;
} _Type__isset;

class Type {
 public:

  static const char* ascii_fingerprint; // = "185A0137F50C4C459C9AE3958F05F421";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x5A,0x01,0x37,0xF5,0x0C,0x4C,0x45,0x9C,0x9A,0xE3,0x95,0x8F,0x05,0xF4,0x21};

  Type() {
  }

  virtual ~Type() throw() {}

  std::vector<TypeProto>  types;

  _Type__isset __isset;

  void __set_types(const std::vector<TypeProto> & val) {
    types = val;
    __isset.types = true;
  }

  bool operator == (const Type & rhs) const
  {
    if (__isset.types != rhs.__isset.types)
      return false;
    else if (__isset.types && !(types == rhs.types))
      return false;
    return true;
  }
  bool operator != (const Type &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Type & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Type &a, Type &b);

}} // namespace

#endif
