/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef graph_TYPES_H
#define graph_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "attrs_types.h"




struct NodeType {
  enum type {
    Type = 0,
    Call = 1,
    Default = 2,
    New = 3,
    Inputs = 4,
    Outputs = 5,
    Tuple = 6
  };
};

extern const std::map<int, const char*> _NodeType_VALUES_TO_NAMES;

typedef int32_t NodeID;

typedef std::vector<int32_t>  PortDescriptor;

typedef struct _Node__isset {
  _Node__isset() : cls(false), name(false), nodeID(false), flags(false), attrs(false) {}
  bool cls;
  bool name;
  bool nodeID;
  bool flags;
  bool attrs;
} _Node__isset;

class Node {
 public:

  static const char* ascii_fingerprint; // = "5F9145A514865E1FC587B553E8ECE2F6";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x91,0x45,0xA5,0x14,0x86,0x5E,0x1F,0xC5,0x87,0xB5,0x53,0xE8,0xEC,0xE2,0xF6};

  Node() : cls((NodeType::type)0), name(), nodeID(0) {
  }

  virtual ~Node() throw() {}

  NodeType::type cls;
  std::string name;
  NodeID nodeID;
   ::Flags flags;
   ::Attributes attrs;

  _Node__isset __isset;

  void __set_cls(const NodeType::type val) {
    cls = val;
    __isset.cls = true;
  }

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  void __set_nodeID(const NodeID val) {
    nodeID = val;
    __isset.nodeID = true;
  }

  void __set_flags(const  ::Flags& val) {
    flags = val;
    __isset.flags = true;
  }

  void __set_attrs(const  ::Attributes& val) {
    attrs = val;
    __isset.attrs = true;
  }

  bool operator == (const Node & rhs) const
  {
    if (__isset.cls != rhs.__isset.cls)
      return false;
    else if (__isset.cls && !(cls == rhs.cls))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.nodeID != rhs.__isset.nodeID)
      return false;
    else if (__isset.nodeID && !(nodeID == rhs.nodeID))
      return false;
    if (__isset.flags != rhs.__isset.flags)
      return false;
    else if (__isset.flags && !(flags == rhs.flags))
      return false;
    if (__isset.attrs != rhs.__isset.attrs)
      return false;
    else if (__isset.attrs && !(attrs == rhs.attrs))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Node &a, Node &b);

typedef struct _Edge__isset {
  _Edge__isset() : src(false), dst(false) {}
  bool src;
  bool dst;
} _Edge__isset;

class Edge {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  Edge() : src(0), dst(0) {
  }

  virtual ~Edge() throw() {}

  NodeID src;
  NodeID dst;

  _Edge__isset __isset;

  void __set_src(const NodeID val) {
    src = val;
    __isset.src = true;
  }

  void __set_dst(const NodeID val) {
    dst = val;
    __isset.dst = true;
  }

  bool operator == (const Edge & rhs) const
  {
    if (__isset.src != rhs.__isset.src)
      return false;
    else if (__isset.src && !(src == rhs.src))
      return false;
    if (__isset.dst != rhs.__isset.dst)
      return false;
    else if (__isset.dst && !(dst == rhs.dst))
      return false;
    return true;
  }
  bool operator != (const Edge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Edge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Edge &a, Edge &b);

typedef struct _Graph__isset {
  _Graph__isset() : nodes(false), edges(false) {}
  bool nodes;
  bool edges;
} _Graph__isset;

class Graph {
 public:

  static const char* ascii_fingerprint; // = "8F82169939B00598BEF3C6948B1AD350";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x82,0x16,0x99,0x39,0xB0,0x05,0x98,0xBE,0xF3,0xC6,0x94,0x8B,0x1A,0xD3,0x50};

  Graph() {
  }

  virtual ~Graph() throw() {}

  std::map<NodeID, Node>  nodes;
  std::vector<Edge>  edges;

  _Graph__isset __isset;

  void __set_nodes(const std::map<NodeID, Node> & val) {
    nodes = val;
    __isset.nodes = true;
  }

  void __set_edges(const std::vector<Edge> & val) {
    edges = val;
    __isset.edges = true;
  }

  bool operator == (const Graph & rhs) const
  {
    if (__isset.nodes != rhs.__isset.nodes)
      return false;
    else if (__isset.nodes && !(nodes == rhs.nodes))
      return false;
    if (__isset.edges != rhs.__isset.edges)
      return false;
    else if (__isset.edges && !(edges == rhs.edges))
      return false;
    return true;
  }
  bool operator != (const Graph &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Graph & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Graph &a, Graph &b);



#endif
