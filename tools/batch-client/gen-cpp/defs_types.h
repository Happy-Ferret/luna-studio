/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef defs_TYPES_H
#define defs_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "attrs_types.h"
#include "libs_types.h"
#include "types_types.h"




typedef int32_t DefID;

typedef struct _NodeDefinition__isset {
  _NodeDefinition__isset() : cls(false), flags(false), attribs(false), libID(true), defID(true) {}
  bool cls;
  bool flags;
  bool attribs;
  bool libID;
  bool defID;
} _NodeDefinition__isset;

class NodeDefinition {
 public:

  static const char* ascii_fingerprint; // = "114446A26C9C2D0FBC93CDAA2A1E1A7D";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x44,0x46,0xA2,0x6C,0x9C,0x2D,0x0F,0xBC,0x93,0xCD,0xAA,0x2A,0x1E,0x1A,0x7D};

  NodeDefinition() : libID(-1), defID(-1) {
  }

  virtual ~NodeDefinition() throw() {}

   ::Type cls;
   ::Flags flags;
   ::Attributes attribs;
   ::LibID libID;
  DefID defID;

  _NodeDefinition__isset __isset;

  void __set_cls(const  ::Type& val) {
    cls = val;
    __isset.cls = true;
  }

  void __set_flags(const  ::Flags& val) {
    flags = val;
    __isset.flags = true;
  }

  void __set_attribs(const  ::Attributes& val) {
    attribs = val;
    __isset.attribs = true;
  }

  void __set_libID(const  ::LibID val) {
    libID = val;
    __isset.libID = true;
  }

  void __set_defID(const DefID val) {
    defID = val;
    __isset.defID = true;
  }

  bool operator == (const NodeDefinition & rhs) const
  {
    if (__isset.cls != rhs.__isset.cls)
      return false;
    else if (__isset.cls && !(cls == rhs.cls))
      return false;
    if (__isset.flags != rhs.__isset.flags)
      return false;
    else if (__isset.flags && !(flags == rhs.flags))
      return false;
    if (__isset.attribs != rhs.__isset.attribs)
      return false;
    else if (__isset.attribs && !(attribs == rhs.attribs))
      return false;
    if (__isset.libID != rhs.__isset.libID)
      return false;
    else if (__isset.libID && !(libID == rhs.libID))
      return false;
    if (__isset.defID != rhs.__isset.defID)
      return false;
    else if (__isset.defID && !(defID == rhs.defID))
      return false;
    return true;
  }
  bool operator != (const NodeDefinition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeDefinition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NodeDefinition &a, NodeDefinition &b);



#endif
