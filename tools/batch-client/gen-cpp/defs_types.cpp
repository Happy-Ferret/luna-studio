/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "defs_types.h"

#include <algorithm>



const char* NodeDefinition::ascii_fingerprint = "A9431E373B1B9F79D91BA1A7490ED5DC";
const uint8_t NodeDefinition::binary_fingerprint[16] = {0xA9,0x43,0x1E,0x37,0x3B,0x1B,0x9F,0x79,0xD9,0x1B,0xA1,0xA7,0x49,0x0E,0xD5,0xDC};

uint32_t NodeDefinition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cls.read(iprot);
          this->__isset.cls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->libID);
          this->__isset.libID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->defID);
          this->__isset.defID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attribs.read(iprot);
          this->__isset.attribs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeDefinition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NodeDefinition");

  if (this->__isset.cls) {
    xfer += oprot->writeFieldBegin("cls", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->cls.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.libID) {
    xfer += oprot->writeFieldBegin("libID", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->libID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defID) {
    xfer += oprot->writeFieldBegin("defID", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->defID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.flags) {
    xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->flags.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attribs) {
    xfer += oprot->writeFieldBegin("attribs", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->attribs.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeDefinition &a, NodeDefinition &b) {
  using ::std::swap;
  swap(a.cls, b.cls);
  swap(a.libID, b.libID);
  swap(a.defID, b.defID);
  swap(a.flags, b.flags);
  swap(a.attribs, b.attribs);
  swap(a.__isset, b.__isset);
}


