{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Types_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


data TypeType = Undefined|Package|Function|Class|Interface|Named|TypeVariable|Tuple|List  deriving (Show,Eq, Typeable, Ord)
instance Enum TypeType where
  fromEnum t = case t of
    Undefined -> 0
    Package -> 1
    Function -> 2
    Class -> 3
    Interface -> 4
    Named -> 5
    TypeVariable -> 6
    Tuple -> 7
    List -> 8
  toEnum t = case t of
    0 -> Undefined
    1 -> Package
    2 -> Function
    3 -> Class
    4 -> Interface
    5 -> Named
    6 -> TypeVariable
    7 -> Tuple
    8 -> List
    _ -> throw ThriftException
instance Hashable TypeType where
  hashWithSalt salt = hashWithSalt salt . fromEnum
data Type = Type{f_Type_cls :: Maybe TypeType,f_Type_name :: Maybe Text,f_Type_items :: Maybe (Vector.Vector Int32),f_Type_params :: Maybe (Vector.Vector Int32),f_Type_inputs :: Maybe (Vector.Vector Int32),f_Type_outputs :: Maybe (Vector.Vector Int32),f_Type_type :: Maybe Int32} deriving (Show,Eq,Typeable)
instance Hashable Type where
  hashWithSalt salt record = salt   `hashWithSalt` f_Type_cls record   `hashWithSalt` f_Type_name record   `hashWithSalt` f_Type_items record   `hashWithSalt` f_Type_params record   `hashWithSalt` f_Type_inputs record   `hashWithSalt` f_Type_outputs record   `hashWithSalt` f_Type_type record  
write_Type oprot record = do
  writeStructBegin oprot "Type"
  case f_Type_cls record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cls",T_I32,1)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_Type_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Type_items record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("items",T_LIST,3)
    (let f = Vector.mapM_ (\_viter2 -> writeI32 oprot _viter2) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Type_params record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("params",T_LIST,4)
    (let f = Vector.mapM_ (\_viter3 -> writeI32 oprot _viter3) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Type_inputs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("inputs",T_LIST,5)
    (let f = Vector.mapM_ (\_viter4 -> writeI32 oprot _viter4) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Type_outputs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("outputs",T_LIST,6)
    (let f = Vector.mapM_ (\_viter5 -> writeI32 oprot _viter5) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Type_type record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("type",T_I32,7)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Type_fields iprot record = do
  (_,_t7,_id8) <- readFieldBegin iprot
  if _t7 == T_STOP then return record else
    case _id8 of 
      1 -> if _t7 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_Type_fields iprot record{f_Type_cls=Just s}
        else do
          skip iprot _t7
          read_Type_fields iprot record
      2 -> if _t7 == T_STRING then do
        s <- readString iprot
        read_Type_fields iprot record{f_Type_name=Just s}
        else do
          skip iprot _t7
          read_Type_fields iprot record
      3 -> if _t7 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype12,_size9) <- readListBegin iprot; f _size9})
        read_Type_fields iprot record{f_Type_items=Just s}
        else do
          skip iprot _t7
          read_Type_fields iprot record
      4 -> if _t7 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype17,_size14) <- readListBegin iprot; f _size14})
        read_Type_fields iprot record{f_Type_params=Just s}
        else do
          skip iprot _t7
          read_Type_fields iprot record
      5 -> if _t7 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype22,_size19) <- readListBegin iprot; f _size19})
        read_Type_fields iprot record{f_Type_inputs=Just s}
        else do
          skip iprot _t7
          read_Type_fields iprot record
      6 -> if _t7 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype27,_size24) <- readListBegin iprot; f _size24})
        read_Type_fields iprot record{f_Type_outputs=Just s}
        else do
          skip iprot _t7
          read_Type_fields iprot record
      7 -> if _t7 == T_I32 then do
        s <- readI32 iprot
        read_Type_fields iprot record{f_Type_type=Just s}
        else do
          skip iprot _t7
          read_Type_fields iprot record
      _ -> do
        skip iprot _t7
        readFieldEnd iprot
        read_Type_fields iprot record
read_Type iprot = do
  _ <- readStructBegin iprot
  record <- read_Type_fields iprot (Type{f_Type_cls=Nothing,f_Type_name=Nothing,f_Type_items=Nothing,f_Type_params=Nothing,f_Type_inputs=Nothing,f_Type_outputs=Nothing,f_Type_type=Nothing})
  readStructEnd iprot
  return record
data TypeContainer = TypeContainer{f_TypeContainer_typs :: Maybe (Vector.Vector Type)} deriving (Show,Eq,Typeable)
instance Hashable TypeContainer where
  hashWithSalt salt record = salt   `hashWithSalt` f_TypeContainer_typs record  
write_TypeContainer oprot record = do
  writeStructBegin oprot "TypeContainer"
  case f_TypeContainer_typs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("typs",T_LIST,1)
    (let f = Vector.mapM_ (\_viter31 -> write_Type oprot _viter31) in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_TypeContainer_fields iprot record = do
  (_,_t33,_id34) <- readFieldBegin iprot
  if _t33 == T_STOP then return record else
    case _id34 of 
      1 -> if _t33 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) ((read_Type iprot)) in do {(_etype38,_size35) <- readListBegin iprot; f _size35})
        read_TypeContainer_fields iprot record{f_TypeContainer_typs=Just s}
        else do
          skip iprot _t33
          read_TypeContainer_fields iprot record
      _ -> do
        skip iprot _t33
        readFieldEnd iprot
        read_TypeContainer_fields iprot record
read_TypeContainer iprot = do
  _ <- readStructBegin iprot
  record <- read_TypeContainer_fields iprot (TypeContainer{f_TypeContainer_typs=Nothing})
  readStructEnd iprot
  return record
