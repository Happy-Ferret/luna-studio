{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Graph_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()

import Attrs_Types


data NodeType = Type|Call|Default|New|Inputs|Outputs|Tuple  deriving (Show,Eq, Typeable, Ord)
instance Enum NodeType where
  fromEnum t = case t of
    Type -> 0
    Call -> 1
    Default -> 2
    New -> 3
    Inputs -> 4
    Outputs -> 5
    Tuple -> 6
  toEnum t = case t of
    0 -> Type
    1 -> Call
    2 -> Default
    3 -> New
    4 -> Inputs
    5 -> Outputs
    6 -> Tuple
    _ -> throw ThriftException
instance Hashable NodeType where
  hashWithSalt salt = hashWithSalt salt . fromEnum
data Node = Node{f_Node_cls :: Maybe NodeType,f_Node_name :: Maybe Text,f_Node_flags :: Maybe Attrs_Types.Flags,f_Node_attrs :: Maybe Attrs_Types.Attributes} deriving (Show,Eq,Typeable)
instance Hashable Node where
  hashWithSalt salt record = salt   `hashWithSalt` f_Node_cls record   `hashWithSalt` f_Node_name record   `hashWithSalt` f_Node_flags record   `hashWithSalt` f_Node_attrs record  
write_Node oprot record = do
  writeStructBegin oprot "Node"
  case f_Node_cls record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cls",T_I32,1)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_Node_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Node_flags record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("flags",T_STRUCT,3)
    Attrs_Types.write_Flags oprot _v
    writeFieldEnd oprot}
  case f_Node_attrs record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("attrs",T_STRUCT,4)
    Attrs_Types.write_Attributes oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Node_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_Node_fields iprot record{f_Node_cls=Just s}
        else do
          skip iprot _t3
          read_Node_fields iprot record
      2 -> if _t3 == T_STRING then do
        s <- readString iprot
        read_Node_fields iprot record{f_Node_name=Just s}
        else do
          skip iprot _t3
          read_Node_fields iprot record
      3 -> if _t3 == T_STRUCT then do
        s <- (read_Flags iprot)
        read_Node_fields iprot record{f_Node_flags=Just s}
        else do
          skip iprot _t3
          read_Node_fields iprot record
      4 -> if _t3 == T_STRUCT then do
        s <- (read_Attributes iprot)
        read_Node_fields iprot record{f_Node_attrs=Just s}
        else do
          skip iprot _t3
          read_Node_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_Node_fields iprot record
read_Node iprot = do
  _ <- readStructBegin iprot
  record <- read_Node_fields iprot (Node{f_Node_cls=Nothing,f_Node_name=Nothing,f_Node_flags=Nothing,f_Node_attrs=Nothing})
  readStructEnd iprot
  return record
data Edge = Edge{f_Edge_src :: Maybe Int32,f_Edge_dst :: Maybe Int32} deriving (Show,Eq,Typeable)
instance Hashable Edge where
  hashWithSalt salt record = salt   `hashWithSalt` f_Edge_src record   `hashWithSalt` f_Edge_dst record  
write_Edge oprot record = do
  writeStructBegin oprot "Edge"
  case f_Edge_src record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("src",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Edge_dst record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("dst",T_I32,2)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Edge_fields iprot record = do
  (_,_t8,_id9) <- readFieldBegin iprot
  if _t8 == T_STOP then return record else
    case _id9 of 
      1 -> if _t8 == T_I32 then do
        s <- readI32 iprot
        read_Edge_fields iprot record{f_Edge_src=Just s}
        else do
          skip iprot _t8
          read_Edge_fields iprot record
      2 -> if _t8 == T_I32 then do
        s <- readI32 iprot
        read_Edge_fields iprot record{f_Edge_dst=Just s}
        else do
          skip iprot _t8
          read_Edge_fields iprot record
      _ -> do
        skip iprot _t8
        readFieldEnd iprot
        read_Edge_fields iprot record
read_Edge iprot = do
  _ <- readStructBegin iprot
  record <- read_Edge_fields iprot (Edge{f_Edge_src=Nothing,f_Edge_dst=Nothing})
  readStructEnd iprot
  return record
