// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin.proto

#ifndef PROTOBUF_plugin_2eproto__INCLUDED
#define PROTOBUF_plugin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace plugin {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_plugin_2eproto();
void protobuf_AssignDesc_plugin_2eproto();
void protobuf_ShutdownFile_plugin_2eproto();

class Plugin;
class PluginInfo;

enum Status {
  Running = 1,
  Stopped = 2
};
bool Status_IsValid(int value);
const Status Status_MIN = Running;
const Status Status_MAX = Stopped;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class Plugin : public ::google::protobuf::Message {
 public:
  Plugin();
  virtual ~Plugin();

  Plugin(const Plugin& from);

  inline Plugin& operator=(const Plugin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plugin& default_instance();

  void Swap(Plugin* other);

  // implements Message ----------------------------------------------

  Plugin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Plugin& from);
  void MergeFrom(const Plugin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:generated.proto.plugin.Plugin)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static Plugin* default_instance_;
};
// -------------------------------------------------------------------

class PluginInfo : public ::google::protobuf::Message {
 public:
  PluginInfo();
  virtual ~PluginInfo();

  PluginInfo(const PluginInfo& from);

  inline PluginInfo& operator=(const PluginInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginInfo& default_instance();

  void Swap(PluginInfo* other);

  // implements Message ----------------------------------------------

  PluginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginInfo& from);
  void MergeFrom(const PluginInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .generated.proto.plugin.Plugin plugin = 2;
  inline bool has_plugin() const;
  inline void clear_plugin();
  static const int kPluginFieldNumber = 2;
  inline const ::generated::proto::plugin::Plugin& plugin() const;
  inline ::generated::proto::plugin::Plugin* mutable_plugin();
  inline ::generated::proto::plugin::Plugin* release_plugin();
  inline void set_allocated_plugin(::generated::proto::plugin::Plugin* plugin);

  // optional .generated.proto.plugin.Status status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::generated::proto::plugin::Status status() const;
  inline void set_status(::generated::proto::plugin::Status value);

  // @@protoc_insertion_point(class_scope:generated.proto.plugin.PluginInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_plugin();
  inline void clear_has_plugin();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::generated::proto::plugin::Plugin* plugin_;
  ::google::protobuf::int32 id_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_plugin_2eproto();
  friend void protobuf_AssignDesc_plugin_2eproto();
  friend void protobuf_ShutdownFile_plugin_2eproto();

  void InitAsDefaultInstance();
  static PluginInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Plugin

// optional string name = 1;
inline bool Plugin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Plugin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Plugin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Plugin::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Plugin::name() const {
  return *name_;
}
inline void Plugin::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Plugin::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Plugin::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Plugin::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Plugin::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Plugin::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string command = 2;
inline bool Plugin::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Plugin::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Plugin::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Plugin::clear_command() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& Plugin::command() const {
  return *command_;
}
inline void Plugin::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Plugin::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Plugin::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Plugin::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  return command_;
}
inline ::std::string* Plugin::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Plugin::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PluginInfo

// optional int32 id = 1;
inline bool PluginInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PluginInfo::id() const {
  return id_;
}
inline void PluginInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .generated.proto.plugin.Plugin plugin = 2;
inline bool PluginInfo::has_plugin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PluginInfo::set_has_plugin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PluginInfo::clear_has_plugin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PluginInfo::clear_plugin() {
  if (plugin_ != NULL) plugin_->::generated::proto::plugin::Plugin::Clear();
  clear_has_plugin();
}
inline const ::generated::proto::plugin::Plugin& PluginInfo::plugin() const {
  return plugin_ != NULL ? *plugin_ : *default_instance_->plugin_;
}
inline ::generated::proto::plugin::Plugin* PluginInfo::mutable_plugin() {
  set_has_plugin();
  if (plugin_ == NULL) plugin_ = new ::generated::proto::plugin::Plugin;
  return plugin_;
}
inline ::generated::proto::plugin::Plugin* PluginInfo::release_plugin() {
  clear_has_plugin();
  ::generated::proto::plugin::Plugin* temp = plugin_;
  plugin_ = NULL;
  return temp;
}
inline void PluginInfo::set_allocated_plugin(::generated::proto::plugin::Plugin* plugin) {
  delete plugin_;
  plugin_ = plugin;
  if (plugin) {
    set_has_plugin();
  } else {
    clear_has_plugin();
  }
}

// optional .generated.proto.plugin.Status status = 3;
inline bool PluginInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PluginInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PluginInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PluginInfo::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::generated::proto::plugin::Status PluginInfo::status() const {
  return static_cast< ::generated::proto::plugin::Status >(status_);
}
inline void PluginInfo::set_status(::generated::proto::plugin::Status value) {
  assert(::generated::proto::plugin::Status_IsValid(value));
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugin
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::generated::proto::plugin::Status>() {
  return ::generated::proto::plugin::Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plugin_2eproto__INCLUDED
