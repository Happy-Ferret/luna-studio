// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin-manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plugin-manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace pluginManager {

namespace {

const ::google::protobuf::Descriptor* Plugin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Add_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Add_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Add_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Add_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Add_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Add_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Remove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Remove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Remove_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Remove_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Remove_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Remove_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Start_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Start_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Start_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Start_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Start_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Stop_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Stop_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Stop_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Stop_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Restart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Restart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Restart_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Restart_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Restart_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Restart_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Lookup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Lookup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Lookup_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Lookup_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_Lookup_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_Lookup_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_List_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_List_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plugin_List_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plugin_List_Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plugin_2dmanager_2eproto() {
  protobuf_AddDesc_plugin_2dmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plugin-manager.proto");
  GOOGLE_CHECK(file != NULL);
  Plugin_descriptor_ = file->message_type(0);
  static const int Plugin_offsets_[1] = {
  };
  Plugin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_descriptor_,
      Plugin::default_instance_,
      Plugin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin));
  Plugin_Add_descriptor_ = Plugin_descriptor_->nested_type(0);
  static const int Plugin_Add_offsets_[1] = {
  };
  Plugin_Add_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Add_descriptor_,
      Plugin_Add::default_instance_,
      Plugin_Add_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Add));
  Plugin_Add_Request_descriptor_ = Plugin_Add_descriptor_->nested_type(0);
  static const int Plugin_Add_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add_Request, plugin_),
  };
  Plugin_Add_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Add_Request_descriptor_,
      Plugin_Add_Request::default_instance_,
      Plugin_Add_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Add_Request));
  Plugin_Add_Update_descriptor_ = Plugin_Add_descriptor_->nested_type(1);
  static const int Plugin_Add_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add_Update, plugin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add_Update, id_),
  };
  Plugin_Add_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Add_Update_descriptor_,
      Plugin_Add_Update::default_instance_,
      Plugin_Add_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Add_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Add_Update));
  Plugin_Remove_descriptor_ = Plugin_descriptor_->nested_type(1);
  static const int Plugin_Remove_offsets_[1] = {
  };
  Plugin_Remove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Remove_descriptor_,
      Plugin_Remove::default_instance_,
      Plugin_Remove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Remove));
  Plugin_Remove_Request_descriptor_ = Plugin_Remove_descriptor_->nested_type(0);
  static const int Plugin_Remove_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove_Request, id_),
  };
  Plugin_Remove_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Remove_Request_descriptor_,
      Plugin_Remove_Request::default_instance_,
      Plugin_Remove_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Remove_Request));
  Plugin_Remove_Update_descriptor_ = Plugin_Remove_descriptor_->nested_type(1);
  static const int Plugin_Remove_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove_Update, id_),
  };
  Plugin_Remove_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Remove_Update_descriptor_,
      Plugin_Remove_Update::default_instance_,
      Plugin_Remove_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Remove_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Remove_Update));
  Plugin_Start_descriptor_ = Plugin_descriptor_->nested_type(2);
  static const int Plugin_Start_offsets_[1] = {
  };
  Plugin_Start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Start_descriptor_,
      Plugin_Start::default_instance_,
      Plugin_Start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Start));
  Plugin_Start_Request_descriptor_ = Plugin_Start_descriptor_->nested_type(0);
  static const int Plugin_Start_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start_Request, id_),
  };
  Plugin_Start_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Start_Request_descriptor_,
      Plugin_Start_Request::default_instance_,
      Plugin_Start_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Start_Request));
  Plugin_Start_Update_descriptor_ = Plugin_Start_descriptor_->nested_type(1);
  static const int Plugin_Start_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start_Update, id_),
  };
  Plugin_Start_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Start_Update_descriptor_,
      Plugin_Start_Update::default_instance_,
      Plugin_Start_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Start_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Start_Update));
  Plugin_Stop_descriptor_ = Plugin_descriptor_->nested_type(3);
  static const int Plugin_Stop_offsets_[1] = {
  };
  Plugin_Stop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Stop_descriptor_,
      Plugin_Stop::default_instance_,
      Plugin_Stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Stop));
  Plugin_Stop_Request_descriptor_ = Plugin_Stop_descriptor_->nested_type(0);
  static const int Plugin_Stop_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop_Request, id_),
  };
  Plugin_Stop_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Stop_Request_descriptor_,
      Plugin_Stop_Request::default_instance_,
      Plugin_Stop_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Stop_Request));
  Plugin_Stop_Update_descriptor_ = Plugin_Stop_descriptor_->nested_type(1);
  static const int Plugin_Stop_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop_Update, id_),
  };
  Plugin_Stop_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Stop_Update_descriptor_,
      Plugin_Stop_Update::default_instance_,
      Plugin_Stop_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Stop_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Stop_Update));
  Plugin_Restart_descriptor_ = Plugin_descriptor_->nested_type(4);
  static const int Plugin_Restart_offsets_[1] = {
  };
  Plugin_Restart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Restart_descriptor_,
      Plugin_Restart::default_instance_,
      Plugin_Restart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Restart));
  Plugin_Restart_Request_descriptor_ = Plugin_Restart_descriptor_->nested_type(0);
  static const int Plugin_Restart_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart_Request, id_),
  };
  Plugin_Restart_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Restart_Request_descriptor_,
      Plugin_Restart_Request::default_instance_,
      Plugin_Restart_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Restart_Request));
  Plugin_Restart_Update_descriptor_ = Plugin_Restart_descriptor_->nested_type(1);
  static const int Plugin_Restart_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart_Update, id_),
  };
  Plugin_Restart_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Restart_Update_descriptor_,
      Plugin_Restart_Update::default_instance_,
      Plugin_Restart_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Restart_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Restart_Update));
  Plugin_Lookup_descriptor_ = Plugin_descriptor_->nested_type(5);
  static const int Plugin_Lookup_offsets_[1] = {
  };
  Plugin_Lookup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Lookup_descriptor_,
      Plugin_Lookup::default_instance_,
      Plugin_Lookup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Lookup));
  Plugin_Lookup_Request_descriptor_ = Plugin_Lookup_descriptor_->nested_type(0);
  static const int Plugin_Lookup_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup_Request, id_),
  };
  Plugin_Lookup_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Lookup_Request_descriptor_,
      Plugin_Lookup_Request::default_instance_,
      Plugin_Lookup_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Lookup_Request));
  Plugin_Lookup_Status_descriptor_ = Plugin_Lookup_descriptor_->nested_type(1);
  static const int Plugin_Lookup_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup_Status, plugininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup_Status, id_),
  };
  Plugin_Lookup_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_Lookup_Status_descriptor_,
      Plugin_Lookup_Status::default_instance_,
      Plugin_Lookup_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_Lookup_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_Lookup_Status));
  Plugin_List_descriptor_ = Plugin_descriptor_->nested_type(6);
  static const int Plugin_List_offsets_[1] = {
  };
  Plugin_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_List_descriptor_,
      Plugin_List::default_instance_,
      Plugin_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_List));
  Plugin_List_Request_descriptor_ = Plugin_List_descriptor_->nested_type(0);
  static const int Plugin_List_Request_offsets_[1] = {
  };
  Plugin_List_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_List_Request_descriptor_,
      Plugin_List_Request::default_instance_,
      Plugin_List_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_List_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_List_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_List_Request));
  Plugin_List_Status_descriptor_ = Plugin_List_descriptor_->nested_type(1);
  static const int Plugin_List_Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_List_Status, list_),
  };
  Plugin_List_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plugin_List_Status_descriptor_,
      Plugin_List_Status::default_instance_,
      Plugin_List_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_List_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plugin_List_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plugin_List_Status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plugin_2dmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_descriptor_, &Plugin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Add_descriptor_, &Plugin_Add::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Add_Request_descriptor_, &Plugin_Add_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Add_Update_descriptor_, &Plugin_Add_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Remove_descriptor_, &Plugin_Remove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Remove_Request_descriptor_, &Plugin_Remove_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Remove_Update_descriptor_, &Plugin_Remove_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Start_descriptor_, &Plugin_Start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Start_Request_descriptor_, &Plugin_Start_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Start_Update_descriptor_, &Plugin_Start_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Stop_descriptor_, &Plugin_Stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Stop_Request_descriptor_, &Plugin_Stop_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Stop_Update_descriptor_, &Plugin_Stop_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Restart_descriptor_, &Plugin_Restart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Restart_Request_descriptor_, &Plugin_Restart_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Restart_Update_descriptor_, &Plugin_Restart_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Lookup_descriptor_, &Plugin_Lookup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Lookup_Request_descriptor_, &Plugin_Lookup_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_Lookup_Status_descriptor_, &Plugin_Lookup_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_List_descriptor_, &Plugin_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_List_Request_descriptor_, &Plugin_List_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plugin_List_Status_descriptor_, &Plugin_List_Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plugin_2dmanager_2eproto() {
  delete Plugin::default_instance_;
  delete Plugin_reflection_;
  delete Plugin_Add::default_instance_;
  delete Plugin_Add_reflection_;
  delete Plugin_Add_Request::default_instance_;
  delete Plugin_Add_Request_reflection_;
  delete Plugin_Add_Update::default_instance_;
  delete Plugin_Add_Update_reflection_;
  delete Plugin_Remove::default_instance_;
  delete Plugin_Remove_reflection_;
  delete Plugin_Remove_Request::default_instance_;
  delete Plugin_Remove_Request_reflection_;
  delete Plugin_Remove_Update::default_instance_;
  delete Plugin_Remove_Update_reflection_;
  delete Plugin_Start::default_instance_;
  delete Plugin_Start_reflection_;
  delete Plugin_Start_Request::default_instance_;
  delete Plugin_Start_Request_reflection_;
  delete Plugin_Start_Update::default_instance_;
  delete Plugin_Start_Update_reflection_;
  delete Plugin_Stop::default_instance_;
  delete Plugin_Stop_reflection_;
  delete Plugin_Stop_Request::default_instance_;
  delete Plugin_Stop_Request_reflection_;
  delete Plugin_Stop_Update::default_instance_;
  delete Plugin_Stop_Update_reflection_;
  delete Plugin_Restart::default_instance_;
  delete Plugin_Restart_reflection_;
  delete Plugin_Restart_Request::default_instance_;
  delete Plugin_Restart_Request_reflection_;
  delete Plugin_Restart_Update::default_instance_;
  delete Plugin_Restart_Update_reflection_;
  delete Plugin_Lookup::default_instance_;
  delete Plugin_Lookup_reflection_;
  delete Plugin_Lookup_Request::default_instance_;
  delete Plugin_Lookup_Request_reflection_;
  delete Plugin_Lookup_Status::default_instance_;
  delete Plugin_Lookup_Status_reflection_;
  delete Plugin_List::default_instance_;
  delete Plugin_List_reflection_;
  delete Plugin_List_Request::default_instance_;
  delete Plugin_List_Request_reflection_;
  delete Plugin_List_Status::default_instance_;
  delete Plugin_List_Status_reflection_;
}

void protobuf_AddDesc_plugin_2dmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::plugin::protobuf_AddDesc_plugin_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024plugin-manager.proto\022\035generated.proto."
    "pluginManager\032\014plugin.proto\"\251\004\n\006Plugin\032\206"
    "\001\n\003Add\0329\n\007Request\022.\n\006plugin\030\001 \002(\0132\036.gene"
    "rated.proto.plugin.Plugin\032D\n\006Update\022.\n\006p"
    "lugin\030\001 \002(\0132\036.generated.proto.plugin.Plu"
    "gin\022\n\n\002id\030\002 \002(\005\0325\n\006Remove\032\025\n\007Request\022\n\n\002"
    "id\030\001 \002(\005\032\024\n\006Update\022\n\n\002id\030\001 \002(\005\0324\n\005Start\032"
    "\025\n\007Request\022\n\n\002id\030\001 \002(\005\032\024\n\006Update\022\n\n\002id\030\001"
    " \002(\005\0323\n\004Stop\032\025\n\007Request\022\n\n\002id\030\001 \002(\005\032\024\n\006U"
    "pdate\022\n\n\002id\030\001 \002(\005\0326\n\007Restart\032\025\n\007Request\022"
    "\n\n\002id\030\001 \002(\005\032\024\n\006Update\022\n\n\002id\030\001 \002(\005\032m\n\006Loo"
    "kup\032\025\n\007Request\022\n\n\002id\030\001 \002(\005\032L\n\006Status\0226\n\n"
    "pluginInfo\030\001 \002(\0132\".generated.proto.plugi"
    "n.PluginInfo\022\n\n\002id\030\002 \002(\005\032M\n\004List\032\t\n\007Requ"
    "est\032:\n\006Status\0220\n\004list\030\001 \003(\0132\".generated."
    "proto.plugin.PluginInfo", 623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plugin-manager.proto", &protobuf_RegisterTypes);
  Plugin::default_instance_ = new Plugin();
  Plugin_Add::default_instance_ = new Plugin_Add();
  Plugin_Add_Request::default_instance_ = new Plugin_Add_Request();
  Plugin_Add_Update::default_instance_ = new Plugin_Add_Update();
  Plugin_Remove::default_instance_ = new Plugin_Remove();
  Plugin_Remove_Request::default_instance_ = new Plugin_Remove_Request();
  Plugin_Remove_Update::default_instance_ = new Plugin_Remove_Update();
  Plugin_Start::default_instance_ = new Plugin_Start();
  Plugin_Start_Request::default_instance_ = new Plugin_Start_Request();
  Plugin_Start_Update::default_instance_ = new Plugin_Start_Update();
  Plugin_Stop::default_instance_ = new Plugin_Stop();
  Plugin_Stop_Request::default_instance_ = new Plugin_Stop_Request();
  Plugin_Stop_Update::default_instance_ = new Plugin_Stop_Update();
  Plugin_Restart::default_instance_ = new Plugin_Restart();
  Plugin_Restart_Request::default_instance_ = new Plugin_Restart_Request();
  Plugin_Restart_Update::default_instance_ = new Plugin_Restart_Update();
  Plugin_Lookup::default_instance_ = new Plugin_Lookup();
  Plugin_Lookup_Request::default_instance_ = new Plugin_Lookup_Request();
  Plugin_Lookup_Status::default_instance_ = new Plugin_Lookup_Status();
  Plugin_List::default_instance_ = new Plugin_List();
  Plugin_List_Request::default_instance_ = new Plugin_List_Request();
  Plugin_List_Status::default_instance_ = new Plugin_List_Status();
  Plugin::default_instance_->InitAsDefaultInstance();
  Plugin_Add::default_instance_->InitAsDefaultInstance();
  Plugin_Add_Request::default_instance_->InitAsDefaultInstance();
  Plugin_Add_Update::default_instance_->InitAsDefaultInstance();
  Plugin_Remove::default_instance_->InitAsDefaultInstance();
  Plugin_Remove_Request::default_instance_->InitAsDefaultInstance();
  Plugin_Remove_Update::default_instance_->InitAsDefaultInstance();
  Plugin_Start::default_instance_->InitAsDefaultInstance();
  Plugin_Start_Request::default_instance_->InitAsDefaultInstance();
  Plugin_Start_Update::default_instance_->InitAsDefaultInstance();
  Plugin_Stop::default_instance_->InitAsDefaultInstance();
  Plugin_Stop_Request::default_instance_->InitAsDefaultInstance();
  Plugin_Stop_Update::default_instance_->InitAsDefaultInstance();
  Plugin_Restart::default_instance_->InitAsDefaultInstance();
  Plugin_Restart_Request::default_instance_->InitAsDefaultInstance();
  Plugin_Restart_Update::default_instance_->InitAsDefaultInstance();
  Plugin_Lookup::default_instance_->InitAsDefaultInstance();
  Plugin_Lookup_Request::default_instance_->InitAsDefaultInstance();
  Plugin_Lookup_Status::default_instance_->InitAsDefaultInstance();
  Plugin_List::default_instance_->InitAsDefaultInstance();
  Plugin_List_Request::default_instance_->InitAsDefaultInstance();
  Plugin_List_Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plugin_2dmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plugin_2dmanager_2eproto {
  StaticDescriptorInitializer_plugin_2dmanager_2eproto() {
    protobuf_AddDesc_plugin_2dmanager_2eproto();
  }
} static_descriptor_initializer_plugin_2dmanager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Plugin_Add_Request::kPluginFieldNumber;
#endif  // !_MSC_VER

Plugin_Add_Request::Plugin_Add_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Add_Request::InitAsDefaultInstance() {
  plugin_ = const_cast< ::generated::proto::plugin::Plugin*>(&::generated::proto::plugin::Plugin::default_instance());
}

Plugin_Add_Request::Plugin_Add_Request(const Plugin_Add_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Add_Request::SharedCtor() {
  _cached_size_ = 0;
  plugin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Add_Request::~Plugin_Add_Request() {
  SharedDtor();
}

void Plugin_Add_Request::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_;
  }
}

void Plugin_Add_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Add_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Add_Request_descriptor_;
}

const Plugin_Add_Request& Plugin_Add_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Add_Request* Plugin_Add_Request::default_instance_ = NULL;

Plugin_Add_Request* Plugin_Add_Request::New() const {
  return new Plugin_Add_Request;
}

void Plugin_Add_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plugin()) {
      if (plugin_ != NULL) plugin_->::generated::proto::plugin::Plugin::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Add_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.plugin.Plugin plugin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Add_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.plugin.Plugin plugin = 1;
  if (has_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Add_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.plugin.Plugin plugin = 1;
  if (has_plugin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Add_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.plugin.Plugin plugin = 1;
    if (has_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Add_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Add_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Add_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Add_Request::MergeFrom(const Plugin_Add_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin()) {
      mutable_plugin()->::generated::proto::plugin::Plugin::MergeFrom(from.plugin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Add_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Add_Request::CopyFrom(const Plugin_Add_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Add_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Add_Request::Swap(Plugin_Add_Request* other) {
  if (other != this) {
    std::swap(plugin_, other->plugin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Add_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Add_Request_descriptor_;
  metadata.reflection = Plugin_Add_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Add_Update::kPluginFieldNumber;
const int Plugin_Add_Update::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Add_Update::Plugin_Add_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Add_Update::InitAsDefaultInstance() {
  plugin_ = const_cast< ::generated::proto::plugin::Plugin*>(&::generated::proto::plugin::Plugin::default_instance());
}

Plugin_Add_Update::Plugin_Add_Update(const Plugin_Add_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Add_Update::SharedCtor() {
  _cached_size_ = 0;
  plugin_ = NULL;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Add_Update::~Plugin_Add_Update() {
  SharedDtor();
}

void Plugin_Add_Update::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_;
  }
}

void Plugin_Add_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Add_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Add_Update_descriptor_;
}

const Plugin_Add_Update& Plugin_Add_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Add_Update* Plugin_Add_Update::default_instance_ = NULL;

Plugin_Add_Update* Plugin_Add_Update::New() const {
  return new Plugin_Add_Update;
}

void Plugin_Add_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plugin()) {
      if (plugin_ != NULL) plugin_->::generated::proto::plugin::Plugin::Clear();
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Add_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.plugin.Plugin plugin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Add_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.plugin.Plugin plugin = 1;
  if (has_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Add_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.plugin.Plugin plugin = 1;
  if (has_plugin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Add_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.plugin.Plugin plugin = 1;
    if (has_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Add_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Add_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Add_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Add_Update::MergeFrom(const Plugin_Add_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin()) {
      mutable_plugin()->::generated::proto::plugin::Plugin::MergeFrom(from.plugin());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Add_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Add_Update::CopyFrom(const Plugin_Add_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Add_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Plugin_Add_Update::Swap(Plugin_Add_Update* other) {
  if (other != this) {
    std::swap(plugin_, other->plugin_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Add_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Add_Update_descriptor_;
  metadata.reflection = Plugin_Add_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_Add::Plugin_Add()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Add::InitAsDefaultInstance() {
}

Plugin_Add::Plugin_Add(const Plugin_Add& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Add::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Add::~Plugin_Add() {
  SharedDtor();
}

void Plugin_Add::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Add::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Add_descriptor_;
}

const Plugin_Add& Plugin_Add::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Add* Plugin_Add::default_instance_ = NULL;

Plugin_Add* Plugin_Add::New() const {
  return new Plugin_Add;
}

void Plugin_Add::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_Add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Add::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Add::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Add::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Add* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Add*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Add::MergeFrom(const Plugin_Add& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Add::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Add::CopyFrom(const Plugin_Add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Add::IsInitialized() const {

  return true;
}

void Plugin_Add::Swap(Plugin_Add* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Add::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Add_descriptor_;
  metadata.reflection = Plugin_Add_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Remove_Request::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Remove_Request::Plugin_Remove_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Remove_Request::InitAsDefaultInstance() {
}

Plugin_Remove_Request::Plugin_Remove_Request(const Plugin_Remove_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Remove_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Remove_Request::~Plugin_Remove_Request() {
  SharedDtor();
}

void Plugin_Remove_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Remove_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Remove_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Remove_Request_descriptor_;
}

const Plugin_Remove_Request& Plugin_Remove_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Remove_Request* Plugin_Remove_Request::default_instance_ = NULL;

Plugin_Remove_Request* Plugin_Remove_Request::New() const {
  return new Plugin_Remove_Request;
}

void Plugin_Remove_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Remove_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Remove_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Remove_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Remove_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Remove_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Remove_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Remove_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Remove_Request::MergeFrom(const Plugin_Remove_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Remove_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Remove_Request::CopyFrom(const Plugin_Remove_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Remove_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Remove_Request::Swap(Plugin_Remove_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Remove_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Remove_Request_descriptor_;
  metadata.reflection = Plugin_Remove_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Remove_Update::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Remove_Update::Plugin_Remove_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Remove_Update::InitAsDefaultInstance() {
}

Plugin_Remove_Update::Plugin_Remove_Update(const Plugin_Remove_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Remove_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Remove_Update::~Plugin_Remove_Update() {
  SharedDtor();
}

void Plugin_Remove_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Remove_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Remove_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Remove_Update_descriptor_;
}

const Plugin_Remove_Update& Plugin_Remove_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Remove_Update* Plugin_Remove_Update::default_instance_ = NULL;

Plugin_Remove_Update* Plugin_Remove_Update::New() const {
  return new Plugin_Remove_Update;
}

void Plugin_Remove_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Remove_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Remove_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Remove_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Remove_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Remove_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Remove_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Remove_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Remove_Update::MergeFrom(const Plugin_Remove_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Remove_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Remove_Update::CopyFrom(const Plugin_Remove_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Remove_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Remove_Update::Swap(Plugin_Remove_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Remove_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Remove_Update_descriptor_;
  metadata.reflection = Plugin_Remove_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_Remove::Plugin_Remove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Remove::InitAsDefaultInstance() {
}

Plugin_Remove::Plugin_Remove(const Plugin_Remove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Remove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Remove::~Plugin_Remove() {
  SharedDtor();
}

void Plugin_Remove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Remove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Remove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Remove_descriptor_;
}

const Plugin_Remove& Plugin_Remove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Remove* Plugin_Remove::default_instance_ = NULL;

Plugin_Remove* Plugin_Remove::New() const {
  return new Plugin_Remove;
}

void Plugin_Remove::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_Remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Remove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Remove::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Remove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Remove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Remove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Remove::MergeFrom(const Plugin_Remove& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Remove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Remove::CopyFrom(const Plugin_Remove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Remove::IsInitialized() const {

  return true;
}

void Plugin_Remove::Swap(Plugin_Remove* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Remove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Remove_descriptor_;
  metadata.reflection = Plugin_Remove_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Start_Request::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Start_Request::Plugin_Start_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Start_Request::InitAsDefaultInstance() {
}

Plugin_Start_Request::Plugin_Start_Request(const Plugin_Start_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Start_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Start_Request::~Plugin_Start_Request() {
  SharedDtor();
}

void Plugin_Start_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Start_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Start_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Start_Request_descriptor_;
}

const Plugin_Start_Request& Plugin_Start_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Start_Request* Plugin_Start_Request::default_instance_ = NULL;

Plugin_Start_Request* Plugin_Start_Request::New() const {
  return new Plugin_Start_Request;
}

void Plugin_Start_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Start_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Start_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Start_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Start_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Start_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Start_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Start_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Start_Request::MergeFrom(const Plugin_Start_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Start_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Start_Request::CopyFrom(const Plugin_Start_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Start_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Start_Request::Swap(Plugin_Start_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Start_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Start_Request_descriptor_;
  metadata.reflection = Plugin_Start_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Start_Update::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Start_Update::Plugin_Start_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Start_Update::InitAsDefaultInstance() {
}

Plugin_Start_Update::Plugin_Start_Update(const Plugin_Start_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Start_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Start_Update::~Plugin_Start_Update() {
  SharedDtor();
}

void Plugin_Start_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Start_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Start_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Start_Update_descriptor_;
}

const Plugin_Start_Update& Plugin_Start_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Start_Update* Plugin_Start_Update::default_instance_ = NULL;

Plugin_Start_Update* Plugin_Start_Update::New() const {
  return new Plugin_Start_Update;
}

void Plugin_Start_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Start_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Start_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Start_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Start_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Start_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Start_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Start_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Start_Update::MergeFrom(const Plugin_Start_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Start_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Start_Update::CopyFrom(const Plugin_Start_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Start_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Start_Update::Swap(Plugin_Start_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Start_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Start_Update_descriptor_;
  metadata.reflection = Plugin_Start_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_Start::Plugin_Start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Start::InitAsDefaultInstance() {
}

Plugin_Start::Plugin_Start(const Plugin_Start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Start::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Start::~Plugin_Start() {
  SharedDtor();
}

void Plugin_Start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Start_descriptor_;
}

const Plugin_Start& Plugin_Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Start* Plugin_Start::default_instance_ = NULL;

Plugin_Start* Plugin_Start::New() const {
  return new Plugin_Start;
}

void Plugin_Start::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Start::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Start::MergeFrom(const Plugin_Start& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Start::CopyFrom(const Plugin_Start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Start::IsInitialized() const {

  return true;
}

void Plugin_Start::Swap(Plugin_Start* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Start_descriptor_;
  metadata.reflection = Plugin_Start_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Stop_Request::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Stop_Request::Plugin_Stop_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Stop_Request::InitAsDefaultInstance() {
}

Plugin_Stop_Request::Plugin_Stop_Request(const Plugin_Stop_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Stop_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Stop_Request::~Plugin_Stop_Request() {
  SharedDtor();
}

void Plugin_Stop_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Stop_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Stop_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Stop_Request_descriptor_;
}

const Plugin_Stop_Request& Plugin_Stop_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Stop_Request* Plugin_Stop_Request::default_instance_ = NULL;

Plugin_Stop_Request* Plugin_Stop_Request::New() const {
  return new Plugin_Stop_Request;
}

void Plugin_Stop_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Stop_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Stop_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Stop_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Stop_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Stop_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Stop_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Stop_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Stop_Request::MergeFrom(const Plugin_Stop_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Stop_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Stop_Request::CopyFrom(const Plugin_Stop_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Stop_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Stop_Request::Swap(Plugin_Stop_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Stop_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Stop_Request_descriptor_;
  metadata.reflection = Plugin_Stop_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Stop_Update::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Stop_Update::Plugin_Stop_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Stop_Update::InitAsDefaultInstance() {
}

Plugin_Stop_Update::Plugin_Stop_Update(const Plugin_Stop_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Stop_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Stop_Update::~Plugin_Stop_Update() {
  SharedDtor();
}

void Plugin_Stop_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Stop_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Stop_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Stop_Update_descriptor_;
}

const Plugin_Stop_Update& Plugin_Stop_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Stop_Update* Plugin_Stop_Update::default_instance_ = NULL;

Plugin_Stop_Update* Plugin_Stop_Update::New() const {
  return new Plugin_Stop_Update;
}

void Plugin_Stop_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Stop_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Stop_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Stop_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Stop_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Stop_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Stop_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Stop_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Stop_Update::MergeFrom(const Plugin_Stop_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Stop_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Stop_Update::CopyFrom(const Plugin_Stop_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Stop_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Stop_Update::Swap(Plugin_Stop_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Stop_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Stop_Update_descriptor_;
  metadata.reflection = Plugin_Stop_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_Stop::Plugin_Stop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Stop::InitAsDefaultInstance() {
}

Plugin_Stop::Plugin_Stop(const Plugin_Stop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Stop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Stop::~Plugin_Stop() {
  SharedDtor();
}

void Plugin_Stop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Stop_descriptor_;
}

const Plugin_Stop& Plugin_Stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Stop* Plugin_Stop::default_instance_ = NULL;

Plugin_Stop* Plugin_Stop::New() const {
  return new Plugin_Stop;
}

void Plugin_Stop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Stop::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Stop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Stop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Stop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Stop::MergeFrom(const Plugin_Stop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Stop::CopyFrom(const Plugin_Stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Stop::IsInitialized() const {

  return true;
}

void Plugin_Stop::Swap(Plugin_Stop* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Stop_descriptor_;
  metadata.reflection = Plugin_Stop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Restart_Request::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Restart_Request::Plugin_Restart_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Restart_Request::InitAsDefaultInstance() {
}

Plugin_Restart_Request::Plugin_Restart_Request(const Plugin_Restart_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Restart_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Restart_Request::~Plugin_Restart_Request() {
  SharedDtor();
}

void Plugin_Restart_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Restart_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Restart_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Restart_Request_descriptor_;
}

const Plugin_Restart_Request& Plugin_Restart_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Restart_Request* Plugin_Restart_Request::default_instance_ = NULL;

Plugin_Restart_Request* Plugin_Restart_Request::New() const {
  return new Plugin_Restart_Request;
}

void Plugin_Restart_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Restart_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Restart_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Restart_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Restart_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Restart_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Restart_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Restart_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Restart_Request::MergeFrom(const Plugin_Restart_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Restart_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Restart_Request::CopyFrom(const Plugin_Restart_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Restart_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Restart_Request::Swap(Plugin_Restart_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Restart_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Restart_Request_descriptor_;
  metadata.reflection = Plugin_Restart_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Restart_Update::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Restart_Update::Plugin_Restart_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Restart_Update::InitAsDefaultInstance() {
}

Plugin_Restart_Update::Plugin_Restart_Update(const Plugin_Restart_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Restart_Update::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Restart_Update::~Plugin_Restart_Update() {
  SharedDtor();
}

void Plugin_Restart_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Restart_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Restart_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Restart_Update_descriptor_;
}

const Plugin_Restart_Update& Plugin_Restart_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Restart_Update* Plugin_Restart_Update::default_instance_ = NULL;

Plugin_Restart_Update* Plugin_Restart_Update::New() const {
  return new Plugin_Restart_Update;
}

void Plugin_Restart_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Restart_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Restart_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Restart_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Restart_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Restart_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Restart_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Restart_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Restart_Update::MergeFrom(const Plugin_Restart_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Restart_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Restart_Update::CopyFrom(const Plugin_Restart_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Restart_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Restart_Update::Swap(Plugin_Restart_Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Restart_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Restart_Update_descriptor_;
  metadata.reflection = Plugin_Restart_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_Restart::Plugin_Restart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Restart::InitAsDefaultInstance() {
}

Plugin_Restart::Plugin_Restart(const Plugin_Restart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Restart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Restart::~Plugin_Restart() {
  SharedDtor();
}

void Plugin_Restart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Restart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Restart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Restart_descriptor_;
}

const Plugin_Restart& Plugin_Restart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Restart* Plugin_Restart::default_instance_ = NULL;

Plugin_Restart* Plugin_Restart::New() const {
  return new Plugin_Restart;
}

void Plugin_Restart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Restart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_Restart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Restart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Restart::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Restart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Restart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Restart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Restart::MergeFrom(const Plugin_Restart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Restart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Restart::CopyFrom(const Plugin_Restart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Restart::IsInitialized() const {

  return true;
}

void Plugin_Restart::Swap(Plugin_Restart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Restart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Restart_descriptor_;
  metadata.reflection = Plugin_Restart_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Lookup_Request::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Lookup_Request::Plugin_Lookup_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Lookup_Request::InitAsDefaultInstance() {
}

Plugin_Lookup_Request::Plugin_Lookup_Request(const Plugin_Lookup_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Lookup_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Lookup_Request::~Plugin_Lookup_Request() {
  SharedDtor();
}

void Plugin_Lookup_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Lookup_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Lookup_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Lookup_Request_descriptor_;
}

const Plugin_Lookup_Request& Plugin_Lookup_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Lookup_Request* Plugin_Lookup_Request::default_instance_ = NULL;

Plugin_Lookup_Request* Plugin_Lookup_Request::New() const {
  return new Plugin_Lookup_Request;
}

void Plugin_Lookup_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Lookup_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Lookup_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Lookup_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Lookup_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Lookup_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Lookup_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Lookup_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Lookup_Request::MergeFrom(const Plugin_Lookup_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Lookup_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Lookup_Request::CopyFrom(const Plugin_Lookup_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Lookup_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Plugin_Lookup_Request::Swap(Plugin_Lookup_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Lookup_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Lookup_Request_descriptor_;
  metadata.reflection = Plugin_Lookup_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_Lookup_Status::kPluginInfoFieldNumber;
const int Plugin_Lookup_Status::kIdFieldNumber;
#endif  // !_MSC_VER

Plugin_Lookup_Status::Plugin_Lookup_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Lookup_Status::InitAsDefaultInstance() {
  plugininfo_ = const_cast< ::generated::proto::plugin::PluginInfo*>(&::generated::proto::plugin::PluginInfo::default_instance());
}

Plugin_Lookup_Status::Plugin_Lookup_Status(const Plugin_Lookup_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Lookup_Status::SharedCtor() {
  _cached_size_ = 0;
  plugininfo_ = NULL;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Lookup_Status::~Plugin_Lookup_Status() {
  SharedDtor();
}

void Plugin_Lookup_Status::SharedDtor() {
  if (this != default_instance_) {
    delete plugininfo_;
  }
}

void Plugin_Lookup_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Lookup_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Lookup_Status_descriptor_;
}

const Plugin_Lookup_Status& Plugin_Lookup_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Lookup_Status* Plugin_Lookup_Status::default_instance_ = NULL;

Plugin_Lookup_Status* Plugin_Lookup_Status::New() const {
  return new Plugin_Lookup_Status;
}

void Plugin_Lookup_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plugininfo()) {
      if (plugininfo_ != NULL) plugininfo_->::generated::proto::plugin::PluginInfo::Clear();
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Lookup_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.plugin.PluginInfo pluginInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_Lookup_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.plugin.PluginInfo pluginInfo = 1;
  if (has_plugininfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugininfo(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Lookup_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.plugin.PluginInfo pluginInfo = 1;
  if (has_plugininfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugininfo(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Lookup_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.plugin.PluginInfo pluginInfo = 1;
    if (has_plugininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugininfo());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Lookup_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Lookup_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Lookup_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Lookup_Status::MergeFrom(const Plugin_Lookup_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugininfo()) {
      mutable_plugininfo()->::generated::proto::plugin::PluginInfo::MergeFrom(from.plugininfo());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Lookup_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Lookup_Status::CopyFrom(const Plugin_Lookup_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Lookup_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Plugin_Lookup_Status::Swap(Plugin_Lookup_Status* other) {
  if (other != this) {
    std::swap(plugininfo_, other->plugininfo_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Lookup_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Lookup_Status_descriptor_;
  metadata.reflection = Plugin_Lookup_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_Lookup::Plugin_Lookup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_Lookup::InitAsDefaultInstance() {
}

Plugin_Lookup::Plugin_Lookup(const Plugin_Lookup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_Lookup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_Lookup::~Plugin_Lookup() {
  SharedDtor();
}

void Plugin_Lookup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_Lookup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_Lookup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_Lookup_descriptor_;
}

const Plugin_Lookup& Plugin_Lookup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_Lookup* Plugin_Lookup::default_instance_ = NULL;

Plugin_Lookup* Plugin_Lookup::New() const {
  return new Plugin_Lookup;
}

void Plugin_Lookup::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_Lookup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_Lookup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_Lookup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_Lookup::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_Lookup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_Lookup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_Lookup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_Lookup::MergeFrom(const Plugin_Lookup& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_Lookup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_Lookup::CopyFrom(const Plugin_Lookup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_Lookup::IsInitialized() const {

  return true;
}

void Plugin_Lookup::Swap(Plugin_Lookup* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_Lookup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_Lookup_descriptor_;
  metadata.reflection = Plugin_Lookup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_List_Request::Plugin_List_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_List_Request::InitAsDefaultInstance() {
}

Plugin_List_Request::Plugin_List_Request(const Plugin_List_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_List_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_List_Request::~Plugin_List_Request() {
  SharedDtor();
}

void Plugin_List_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_List_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_List_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_List_Request_descriptor_;
}

const Plugin_List_Request& Plugin_List_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_List_Request* Plugin_List_Request::default_instance_ = NULL;

Plugin_List_Request* Plugin_List_Request::New() const {
  return new Plugin_List_Request;
}

void Plugin_List_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_List_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_List_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_List_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_List_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_List_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_List_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_List_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_List_Request::MergeFrom(const Plugin_List_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_List_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_List_Request::CopyFrom(const Plugin_List_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_List_Request::IsInitialized() const {

  return true;
}

void Plugin_List_Request::Swap(Plugin_List_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_List_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_List_Request_descriptor_;
  metadata.reflection = Plugin_List_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Plugin_List_Status::kListFieldNumber;
#endif  // !_MSC_VER

Plugin_List_Status::Plugin_List_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_List_Status::InitAsDefaultInstance() {
}

Plugin_List_Status::Plugin_List_Status(const Plugin_List_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_List_Status::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_List_Status::~Plugin_List_Status() {
  SharedDtor();
}

void Plugin_List_Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_List_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_List_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_List_Status_descriptor_;
}

const Plugin_List_Status& Plugin_List_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_List_Status* Plugin_List_Status::default_instance_ = NULL;

Plugin_List_Status* Plugin_List_Status::New() const {
  return new Plugin_List_Status;
}

void Plugin_List_Status::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_List_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.plugin.PluginInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plugin_List_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.plugin.PluginInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_List_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.plugin.PluginInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_List_Status::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.plugin.PluginInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_List_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_List_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_List_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_List_Status::MergeFrom(const Plugin_List_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_List_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_List_Status::CopyFrom(const Plugin_List_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_List_Status::IsInitialized() const {

  return true;
}

void Plugin_List_Status::Swap(Plugin_List_Status* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_List_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_List_Status_descriptor_;
  metadata.reflection = Plugin_List_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin_List::Plugin_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin_List::InitAsDefaultInstance() {
}

Plugin_List::Plugin_List(const Plugin_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin_List::~Plugin_List() {
  SharedDtor();
}

void Plugin_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_List_descriptor_;
}

const Plugin_List& Plugin_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin_List* Plugin_List::default_instance_ = NULL;

Plugin_List* Plugin_List::New() const {
  return new Plugin_List;
}

void Plugin_List::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin_List::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin_List::MergeFrom(const Plugin_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin_List::CopyFrom(const Plugin_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin_List::IsInitialized() const {

  return true;
}

void Plugin_List::Swap(Plugin_List* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_List_descriptor_;
  metadata.reflection = Plugin_List_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plugin::Plugin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plugin::InitAsDefaultInstance() {
}

Plugin::Plugin(const Plugin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plugin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plugin::~Plugin() {
  SharedDtor();
}

void Plugin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plugin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plugin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plugin_descriptor_;
}

const Plugin& Plugin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2dmanager_2eproto();
  return *default_instance_;
}

Plugin* Plugin::default_instance_ = NULL;

Plugin* Plugin::New() const {
  return new Plugin;
}

void Plugin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plugin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plugin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plugin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plugin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plugin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plugin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plugin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plugin::MergeFrom(const Plugin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plugin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plugin::CopyFrom(const Plugin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plugin::IsInitialized() const {

  return true;
}

void Plugin::Swap(Plugin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plugin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plugin_descriptor_;
  metadata.reflection = Plugin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pluginManager
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
