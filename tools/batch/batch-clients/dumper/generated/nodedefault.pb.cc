// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodedefault.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nodedefault.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace nodedefault {

namespace {

const ::google::protobuf::Descriptor* DefaultsMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultsMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefaultsMap_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultsMap_Entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nodedefault_2eproto() {
  protobuf_AddDesc_nodedefault_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nodedefault.proto");
  GOOGLE_CHECK(file != NULL);
  DefaultsMap_descriptor_ = file->message_type(0);
  static const int DefaultsMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap, map_),
  };
  DefaultsMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefaultsMap_descriptor_,
      DefaultsMap::default_instance_,
      DefaultsMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefaultsMap));
  DefaultsMap_Entry_descriptor_ = DefaultsMap_descriptor_->nested_type(0);
  static const int DefaultsMap_Entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap_Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap_Entry, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap_Entry, value_),
  };
  DefaultsMap_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefaultsMap_Entry_descriptor_,
      DefaultsMap_Entry::default_instance_,
      DefaultsMap_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultsMap_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefaultsMap_Entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nodedefault_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefaultsMap_descriptor_, &DefaultsMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefaultsMap_Entry_descriptor_, &DefaultsMap_Entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nodedefault_2eproto() {
  delete DefaultsMap::default_instance_;
  delete DefaultsMap_reflection_;
  delete DefaultsMap_Entry::default_instance_;
  delete DefaultsMap_Entry_reflection_;
}

void protobuf_AddDesc_nodedefault_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021nodedefault.proto\022\033generated.proto.nod"
    "edefault\"\177\n\013DefaultsMap\022;\n\003map\030\001 \003(\0132..g"
    "enerated.proto.nodedefault.DefaultsMap.E"
    "ntry\0323\n\005Entry\022\013\n\003key\030\001 \003(\005\022\016\n\006nodeID\030\002 \001"
    "(\005\022\r\n\005value\030\003 \001(\t", 177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nodedefault.proto", &protobuf_RegisterTypes);
  DefaultsMap::default_instance_ = new DefaultsMap();
  DefaultsMap_Entry::default_instance_ = new DefaultsMap_Entry();
  DefaultsMap::default_instance_->InitAsDefaultInstance();
  DefaultsMap_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nodedefault_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nodedefault_2eproto {
  StaticDescriptorInitializer_nodedefault_2eproto() {
    protobuf_AddDesc_nodedefault_2eproto();
  }
} static_descriptor_initializer_nodedefault_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DefaultsMap_Entry::kKeyFieldNumber;
const int DefaultsMap_Entry::kNodeIDFieldNumber;
const int DefaultsMap_Entry::kValueFieldNumber;
#endif  // !_MSC_VER

DefaultsMap_Entry::DefaultsMap_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DefaultsMap_Entry::InitAsDefaultInstance() {
}

DefaultsMap_Entry::DefaultsMap_Entry(const DefaultsMap_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DefaultsMap_Entry::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefaultsMap_Entry::~DefaultsMap_Entry() {
  SharedDtor();
}

void DefaultsMap_Entry::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void DefaultsMap_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefaultsMap_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultsMap_Entry_descriptor_;
}

const DefaultsMap_Entry& DefaultsMap_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodedefault_2eproto();
  return *default_instance_;
}

DefaultsMap_Entry* DefaultsMap_Entry::default_instance_ = NULL;

DefaultsMap_Entry* DefaultsMap_Entry::New() const {
  return new DefaultsMap_Entry;
}

void DefaultsMap_Entry::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nodeid_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefaultsMap_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_key;
        if (input->ExpectTag(16)) goto parse_nodeID;
        break;
      }

      // optional int32 nodeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefaultsMap_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->key(i), output);
  }

  // optional int32 nodeID = 2;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nodeid(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefaultsMap_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->key(i), target);
  }

  // optional int32 nodeID = 2;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nodeid(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefaultsMap_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 nodeID = 2;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodeid());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  // repeated int32 key = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->key(i));
    }
    total_size += 1 * this->key_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefaultsMap_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefaultsMap_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefaultsMap_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefaultsMap_Entry::MergeFrom(const DefaultsMap_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefaultsMap_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultsMap_Entry::CopyFrom(const DefaultsMap_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultsMap_Entry::IsInitialized() const {

  return true;
}

void DefaultsMap_Entry::Swap(DefaultsMap_Entry* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    std::swap(nodeid_, other->nodeid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefaultsMap_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultsMap_Entry_descriptor_;
  metadata.reflection = DefaultsMap_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DefaultsMap::kMapFieldNumber;
#endif  // !_MSC_VER

DefaultsMap::DefaultsMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DefaultsMap::InitAsDefaultInstance() {
}

DefaultsMap::DefaultsMap(const DefaultsMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DefaultsMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefaultsMap::~DefaultsMap() {
  SharedDtor();
}

void DefaultsMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DefaultsMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefaultsMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultsMap_descriptor_;
}

const DefaultsMap& DefaultsMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodedefault_2eproto();
  return *default_instance_;
}

DefaultsMap* DefaultsMap::default_instance_ = NULL;

DefaultsMap* DefaultsMap::New() const {
  return new DefaultsMap;
}

void DefaultsMap::Clear() {
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefaultsMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.nodedefault.DefaultsMap.Entry map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefaultsMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.nodedefault.DefaultsMap.Entry map = 1;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefaultsMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.nodedefault.DefaultsMap.Entry map = 1;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefaultsMap::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.nodedefault.DefaultsMap.Entry map = 1;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefaultsMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefaultsMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefaultsMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefaultsMap::MergeFrom(const DefaultsMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefaultsMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultsMap::CopyFrom(const DefaultsMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultsMap::IsInitialized() const {

  return true;
}

void DefaultsMap::Swap(DefaultsMap* other) {
  if (other != this) {
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefaultsMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultsMap_descriptor_;
  metadata.reflection = DefaultsMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nodedefault
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
