// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: focus.proto

#ifndef PROTOBUF_focus_2eproto__INCLUDED
#define PROTOBUF_focus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "expr.pb.h"
#include "module.pb.h"
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace focus {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_focus_2eproto();
void protobuf_AssignDesc_focus_2eproto();
void protobuf_ShutdownFile_focus_2eproto();

class Focus;
class ModuleFocus;
class ClassFocus;
class FunctionFocus;

enum Focus_Cls {
  Focus_Cls_ModuleFocus = 1,
  Focus_Cls_ClassFocus = 2,
  Focus_Cls_FunctionFocus = 3
};
bool Focus_Cls_IsValid(int value);
const Focus_Cls Focus_Cls_Cls_MIN = Focus_Cls_ModuleFocus;
const Focus_Cls Focus_Cls_Cls_MAX = Focus_Cls_FunctionFocus;
const int Focus_Cls_Cls_ARRAYSIZE = Focus_Cls_Cls_MAX + 1;

const ::google::protobuf::EnumDescriptor* Focus_Cls_descriptor();
inline const ::std::string& Focus_Cls_Name(Focus_Cls value) {
  return ::google::protobuf::internal::NameOfEnum(
    Focus_Cls_descriptor(), value);
}
inline bool Focus_Cls_Parse(
    const ::std::string& name, Focus_Cls* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Focus_Cls>(
    Focus_Cls_descriptor(), name, value);
}
// ===================================================================

class Focus : public ::google::protobuf::Message {
 public:
  Focus();
  virtual ~Focus();

  Focus(const Focus& from);

  inline Focus& operator=(const Focus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Focus& default_instance();

  void Swap(Focus* other);

  // implements Message ----------------------------------------------

  Focus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Focus& from);
  void MergeFrom(const Focus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Focus_Cls Cls;
  static const Cls ModuleFocus = Focus_Cls_ModuleFocus;
  static const Cls ClassFocus = Focus_Cls_ClassFocus;
  static const Cls FunctionFocus = Focus_Cls_FunctionFocus;
  static inline bool Cls_IsValid(int value) {
    return Focus_Cls_IsValid(value);
  }
  static const Cls Cls_MIN =
    Focus_Cls_Cls_MIN;
  static const Cls Cls_MAX =
    Focus_Cls_Cls_MAX;
  static const int Cls_ARRAYSIZE =
    Focus_Cls_Cls_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cls_descriptor() {
    return Focus_Cls_descriptor();
  }
  static inline const ::std::string& Cls_Name(Cls value) {
    return Focus_Cls_Name(value);
  }
  static inline bool Cls_Parse(const ::std::string& name,
      Cls* value) {
    return Focus_Cls_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .generated.proto.focus.Focus.Cls cls = 1;
  inline bool has_cls() const;
  inline void clear_cls();
  static const int kClsFieldNumber = 1;
  inline ::generated::proto::focus::Focus_Cls cls() const;
  inline void set_cls(::generated::proto::focus::Focus_Cls value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Focus)
  // @@protoc_insertion_point(class_scope:generated.proto.focus.Focus)
 private:
  inline void set_has_cls();
  inline void clear_has_cls();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_focus_2eproto();
  friend void protobuf_AssignDesc_focus_2eproto();
  friend void protobuf_ShutdownFile_focus_2eproto();

  void InitAsDefaultInstance();
  static Focus* default_instance_;
};
// -------------------------------------------------------------------

class ModuleFocus : public ::google::protobuf::Message {
 public:
  ModuleFocus();
  virtual ~ModuleFocus();

  ModuleFocus(const ModuleFocus& from);

  inline ModuleFocus& operator=(const ModuleFocus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleFocus& default_instance();

  void Swap(ModuleFocus* other);

  // implements Message ----------------------------------------------

  ModuleFocus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleFocus& from);
  void MergeFrom(const ModuleFocus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .generated.proto.module.Module m = 1;
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 1;
  inline const ::generated::proto::module::Module& m() const;
  inline ::generated::proto::module::Module* mutable_m();
  inline ::generated::proto::module::Module* release_m();
  inline void set_allocated_m(::generated::proto::module::Module* m);

  static const int kExtFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::focus::Focus,
      ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::focus::ModuleFocus >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:generated.proto.focus.ModuleFocus)
 private:
  inline void set_has_m();
  inline void clear_has_m();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::generated::proto::module::Module* m_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_focus_2eproto();
  friend void protobuf_AssignDesc_focus_2eproto();
  friend void protobuf_ShutdownFile_focus_2eproto();

  void InitAsDefaultInstance();
  static ModuleFocus* default_instance_;
};
// -------------------------------------------------------------------

class ClassFocus : public ::google::protobuf::Message {
 public:
  ClassFocus();
  virtual ~ClassFocus();

  ClassFocus(const ClassFocus& from);

  inline ClassFocus& operator=(const ClassFocus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassFocus& default_instance();

  void Swap(ClassFocus* other);

  // implements Message ----------------------------------------------

  ClassFocus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassFocus& from);
  void MergeFrom(const ClassFocus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .generated.proto.expr.Expr c = 1;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 1;
  inline const ::generated::proto::expr::Expr& c() const;
  inline ::generated::proto::expr::Expr* mutable_c();
  inline ::generated::proto::expr::Expr* release_c();
  inline void set_allocated_c(::generated::proto::expr::Expr* c);

  static const int kExtFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::focus::Focus,
      ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::focus::ClassFocus >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:generated.proto.focus.ClassFocus)
 private:
  inline void set_has_c();
  inline void clear_has_c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::generated::proto::expr::Expr* c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_focus_2eproto();
  friend void protobuf_AssignDesc_focus_2eproto();
  friend void protobuf_ShutdownFile_focus_2eproto();

  void InitAsDefaultInstance();
  static ClassFocus* default_instance_;
};
// -------------------------------------------------------------------

class FunctionFocus : public ::google::protobuf::Message {
 public:
  FunctionFocus();
  virtual ~FunctionFocus();

  FunctionFocus(const FunctionFocus& from);

  inline FunctionFocus& operator=(const FunctionFocus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionFocus& default_instance();

  void Swap(FunctionFocus* other);

  // implements Message ----------------------------------------------

  FunctionFocus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionFocus& from);
  void MergeFrom(const FunctionFocus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .generated.proto.expr.Expr f = 1;
  inline bool has_f() const;
  inline void clear_f();
  static const int kFFieldNumber = 1;
  inline const ::generated::proto::expr::Expr& f() const;
  inline ::generated::proto::expr::Expr* mutable_f();
  inline ::generated::proto::expr::Expr* release_f();
  inline void set_allocated_f(::generated::proto::expr::Expr* f);

  static const int kExtFieldNumber = 102;
  static ::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::focus::Focus,
      ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::focus::FunctionFocus >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:generated.proto.focus.FunctionFocus)
 private:
  inline void set_has_f();
  inline void clear_has_f();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::generated::proto::expr::Expr* f_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_focus_2eproto();
  friend void protobuf_AssignDesc_focus_2eproto();
  friend void protobuf_ShutdownFile_focus_2eproto();

  void InitAsDefaultInstance();
  static FunctionFocus* default_instance_;
};
// ===================================================================


// ===================================================================

// Focus

// required .generated.proto.focus.Focus.Cls cls = 1;
inline bool Focus::has_cls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Focus::set_has_cls() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Focus::clear_has_cls() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Focus::clear_cls() {
  cls_ = 1;
  clear_has_cls();
}
inline ::generated::proto::focus::Focus_Cls Focus::cls() const {
  return static_cast< ::generated::proto::focus::Focus_Cls >(cls_);
}
inline void Focus::set_cls(::generated::proto::focus::Focus_Cls value) {
  assert(::generated::proto::focus::Focus_Cls_IsValid(value));
  set_has_cls();
  cls_ = value;
}

// -------------------------------------------------------------------

// ModuleFocus

// optional .generated.proto.module.Module m = 1;
inline bool ModuleFocus::has_m() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleFocus::set_has_m() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleFocus::clear_has_m() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleFocus::clear_m() {
  if (m_ != NULL) m_->::generated::proto::module::Module::Clear();
  clear_has_m();
}
inline const ::generated::proto::module::Module& ModuleFocus::m() const {
  return m_ != NULL ? *m_ : *default_instance_->m_;
}
inline ::generated::proto::module::Module* ModuleFocus::mutable_m() {
  set_has_m();
  if (m_ == NULL) m_ = new ::generated::proto::module::Module;
  return m_;
}
inline ::generated::proto::module::Module* ModuleFocus::release_m() {
  clear_has_m();
  ::generated::proto::module::Module* temp = m_;
  m_ = NULL;
  return temp;
}
inline void ModuleFocus::set_allocated_m(::generated::proto::module::Module* m) {
  delete m_;
  m_ = m;
  if (m) {
    set_has_m();
  } else {
    clear_has_m();
  }
}

// -------------------------------------------------------------------

// ClassFocus

// optional .generated.proto.expr.Expr c = 1;
inline bool ClassFocus::has_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassFocus::set_has_c() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassFocus::clear_has_c() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassFocus::clear_c() {
  if (c_ != NULL) c_->::generated::proto::expr::Expr::Clear();
  clear_has_c();
}
inline const ::generated::proto::expr::Expr& ClassFocus::c() const {
  return c_ != NULL ? *c_ : *default_instance_->c_;
}
inline ::generated::proto::expr::Expr* ClassFocus::mutable_c() {
  set_has_c();
  if (c_ == NULL) c_ = new ::generated::proto::expr::Expr;
  return c_;
}
inline ::generated::proto::expr::Expr* ClassFocus::release_c() {
  clear_has_c();
  ::generated::proto::expr::Expr* temp = c_;
  c_ = NULL;
  return temp;
}
inline void ClassFocus::set_allocated_c(::generated::proto::expr::Expr* c) {
  delete c_;
  c_ = c;
  if (c) {
    set_has_c();
  } else {
    clear_has_c();
  }
}

// -------------------------------------------------------------------

// FunctionFocus

// optional .generated.proto.expr.Expr f = 1;
inline bool FunctionFocus::has_f() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionFocus::set_has_f() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionFocus::clear_has_f() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionFocus::clear_f() {
  if (f_ != NULL) f_->::generated::proto::expr::Expr::Clear();
  clear_has_f();
}
inline const ::generated::proto::expr::Expr& FunctionFocus::f() const {
  return f_ != NULL ? *f_ : *default_instance_->f_;
}
inline ::generated::proto::expr::Expr* FunctionFocus::mutable_f() {
  set_has_f();
  if (f_ == NULL) f_ = new ::generated::proto::expr::Expr;
  return f_;
}
inline ::generated::proto::expr::Expr* FunctionFocus::release_f() {
  clear_has_f();
  ::generated::proto::expr::Expr* temp = f_;
  f_ = NULL;
  return temp;
}
inline void FunctionFocus::set_allocated_f(::generated::proto::expr::Expr* f) {
  delete f_;
  f_ = f;
  if (f) {
    set_has_f();
  } else {
    clear_has_f();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace focus
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::generated::proto::focus::Focus_Cls>() {
  return ::generated::proto::focus::Focus_Cls_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_focus_2eproto__INCLUDED
