// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace pat {

namespace {

const ::google::protobuf::Descriptor* Pat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Pat_Cls_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Var_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Var_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Con__descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Con__reflection_ = NULL;
const ::google::protobuf::Descriptor* App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  App_reflection_ = NULL;
const ::google::protobuf::Descriptor* Typed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Typed_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wildcard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wildcard_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecWildcard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecWildcard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pat_2eproto() {
  protobuf_AddDesc_pat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pat.proto");
  GOOGLE_CHECK(file != NULL);
  Pat_descriptor_ = file->message_type(0);
  static const int Pat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pat, cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pat, id_),
  };
  Pat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pat_descriptor_,
      Pat::default_instance_,
      Pat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pat, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pat, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pat));
  Pat_Cls_descriptor_ = Pat_descriptor_->enum_type(0);
  Var_descriptor_ = file->message_type(1);
  static const int Var_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, name_),
  };
  Var_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Var_descriptor_,
      Var::default_instance_,
      Var_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Var));
  Lit_descriptor_ = file->message_type(2);
  static const int Lit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lit, value_),
  };
  Lit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lit_descriptor_,
      Lit::default_instance_,
      Lit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lit));
  Tuple_descriptor_ = file->message_type(3);
  static const int Tuple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, items_),
  };
  Tuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tuple_descriptor_,
      Tuple::default_instance_,
      Tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tuple));
  Con__descriptor_ = file->message_type(4);
  static const int Con__offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Con_, name_),
  };
  Con__reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Con__descriptor_,
      Con_::default_instance_,
      Con__offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Con_, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Con_, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Con_));
  App_descriptor_ = file->message_type(5);
  static const int App_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, args_),
  };
  App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      App_descriptor_,
      App::default_instance_,
      App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(App));
  Typed_descriptor_ = file->message_type(6);
  static const int Typed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, pat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, cls_),
  };
  Typed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Typed_descriptor_,
      Typed::default_instance_,
      Typed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Typed));
  Wildcard_descriptor_ = file->message_type(7);
  static const int Wildcard_offsets_[1] = {
  };
  Wildcard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wildcard_descriptor_,
      Wildcard::default_instance_,
      Wildcard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wildcard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wildcard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wildcard));
  RecWildcard_descriptor_ = file->message_type(8);
  static const int RecWildcard_offsets_[1] = {
  };
  RecWildcard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecWildcard_descriptor_,
      RecWildcard::default_instance_,
      RecWildcard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecWildcard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecWildcard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecWildcard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pat_descriptor_, &Pat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Var_descriptor_, &Var::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lit_descriptor_, &Lit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tuple_descriptor_, &Tuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Con__descriptor_, &Con_::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    App_descriptor_, &App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Typed_descriptor_, &Typed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wildcard_descriptor_, &Wildcard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecWildcard_descriptor_, &RecWildcard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pat_2eproto() {
  delete Pat::default_instance_;
  delete Pat_reflection_;
  delete Var::default_instance_;
  delete Var_reflection_;
  delete Lit::default_instance_;
  delete Lit_reflection_;
  delete Tuple::default_instance_;
  delete Tuple_reflection_;
  delete Con_::default_instance_;
  delete Con__reflection_;
  delete App::default_instance_;
  delete App_reflection_;
  delete Typed::default_instance_;
  delete Typed_reflection_;
  delete Wildcard::default_instance_;
  delete Wildcard_reflection_;
  delete RecWildcard::default_instance_;
  delete RecWildcard_reflection_;
}

void protobuf_AddDesc_pat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::lit::protobuf_AddDesc_lit_2eproto();
  ::generated::proto::type::protobuf_AddDesc_type_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpat.proto\022\023generated.proto.pat\032\tlit.pr"
    "oto\032\ntype.proto\"\247\001\n\003Pat\022)\n\003cls\030\001 \002(\0162\034.g"
    "enerated.proto.pat.Pat.Cls\022\n\n\002id\030\002 \001(\005\"_"
    "\n\003Cls\022\007\n\003Var\020\001\022\007\n\003Lit\020\002\022\t\n\005Tuple\020\003\022\010\n\004Co"
    "n_\020\004\022\007\n\003App\020\005\022\t\n\005Typed\020\006\022\014\n\010Wildcard\020\007\022\017"
    "\n\013RecWildcard\020\010*\010\010d\020\200\200\200\200\002\"T\n\003Var\022\014\n\004name"
    "\030\002 \001(\t2\?\n\003ext\022\030.generated.proto.pat.Pat\030"
    "d \001(\0132\030.generated.proto.pat.Var\"o\n\003Lit\022\'"
    "\n\005value\030\002 \001(\0132\030.generated.proto.lit.Lit2"
    "\?\n\003ext\022\030.generated.proto.pat.Pat\030e \001(\0132\030"
    ".generated.proto.pat.Lit\"s\n\005Tuple\022\'\n\005ite"
    "ms\030\002 \003(\0132\030.generated.proto.pat.Pat2A\n\003ex"
    "t\022\030.generated.proto.pat.Pat\030f \001(\0132\032.gene"
    "rated.proto.pat.Tuple\"V\n\004Con_\022\014\n\004name\030\002 "
    "\001(\t2@\n\003ext\022\030.generated.proto.pat.Pat\030g \001"
    "(\0132\031.generated.proto.pat.Con_\"\225\001\n\003App\022%\n"
    "\003src\030\002 \001(\0132\030.generated.proto.pat.Pat\022&\n\004"
    "args\030\003 \003(\0132\030.generated.proto.pat.Pat2\?\n\003"
    "ext\022\030.generated.proto.pat.Pat\030h \001(\0132\030.ge"
    "nerated.proto.pat.App\"\232\001\n\005Typed\022%\n\003pat\030\002"
    " \001(\0132\030.generated.proto.pat.Pat\022\'\n\003cls\030\003 "
    "\001(\0132\032.generated.proto.type.Type2A\n\003ext\022\030"
    ".generated.proto.pat.Pat\030i \001(\0132\032.generat"
    "ed.proto.pat.Typed\"P\n\010Wildcard2D\n\003ext\022\030."
    "generated.proto.pat.Pat\030j \001(\0132\035.generate"
    "d.proto.pat.Wildcard\"V\n\013RecWildcard2G\n\003e"
    "xt\022\030.generated.proto.pat.Pat\030k \001(\0132 .gen"
    "erated.proto.pat.RecWildcard", 1108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pat.proto", &protobuf_RegisterTypes);
  Pat::default_instance_ = new Pat();
  Var::default_instance_ = new Var();
  Lit::default_instance_ = new Lit();
  Tuple::default_instance_ = new Tuple();
  Con_::default_instance_ = new Con_();
  App::default_instance_ = new App();
  Typed::default_instance_ = new Typed();
  Wildcard::default_instance_ = new Wildcard();
  RecWildcard::default_instance_ = new RecWildcard();
  Pat::default_instance_->InitAsDefaultInstance();
  Var::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    100, 11, false, false,
    &::generated::proto::pat::Var::default_instance());
  Lit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    101, 11, false, false,
    &::generated::proto::pat::Lit::default_instance());
  Tuple::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    102, 11, false, false,
    &::generated::proto::pat::Tuple::default_instance());
  Con_::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    103, 11, false, false,
    &::generated::proto::pat::Con_::default_instance());
  App::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    104, 11, false, false,
    &::generated::proto::pat::App::default_instance());
  Typed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    105, 11, false, false,
    &::generated::proto::pat::Typed::default_instance());
  Wildcard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    106, 11, false, false,
    &::generated::proto::pat::Wildcard::default_instance());
  RecWildcard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::pat::Pat::default_instance(),
    107, 11, false, false,
    &::generated::proto::pat::RecWildcard::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pat_2eproto {
  StaticDescriptorInitializer_pat_2eproto() {
    protobuf_AddDesc_pat_2eproto();
  }
} static_descriptor_initializer_pat_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Pat_Cls_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pat_Cls_descriptor_;
}
bool Pat_Cls_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Pat_Cls Pat::Var;
const Pat_Cls Pat::Lit;
const Pat_Cls Pat::Tuple;
const Pat_Cls Pat::Con_;
const Pat_Cls Pat::App;
const Pat_Cls Pat::Typed;
const Pat_Cls Pat::Wildcard;
const Pat_Cls Pat::RecWildcard;
const Pat_Cls Pat::Cls_MIN;
const Pat_Cls Pat::Cls_MAX;
const int Pat::Cls_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Pat::kClsFieldNumber;
const int Pat::kIdFieldNumber;
#endif  // !_MSC_VER

Pat::Pat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pat::InitAsDefaultInstance() {
}

Pat::Pat(const Pat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pat::SharedCtor() {
  _cached_size_ = 0;
  cls_ = 1;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pat::~Pat() {
  SharedDtor();
}

void Pat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pat_descriptor_;
}

const Pat& Pat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

Pat* Pat::default_instance_ = NULL;

Pat* Pat::New() const {
  return new Pat;
}

void Pat::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cls_ = 1;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.pat.Pat.Cls cls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::generated::proto::pat::Pat_Cls_IsValid(value)) {
            set_cls(static_cast< ::generated::proto::pat::Pat_Cls >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.pat.Pat.Cls cls = 1;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cls(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.pat.Pat.Cls cls = 1;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cls(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.pat.Pat.Cls cls = 1;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cls());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pat::MergeFrom(const Pat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls()) {
      set_cls(from.cls());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pat::CopyFrom(const Pat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Pat::Swap(Pat* other) {
  if (other != this) {
    std::swap(cls_, other->cls_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Pat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pat_descriptor_;
  metadata.reflection = Pat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Var::kNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Var::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::Var >, 11, false >
  Var::ext(kExtFieldNumber, ::generated::proto::pat::Var::default_instance());
Var::Var()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Var::InitAsDefaultInstance() {
}

Var::Var(const Var& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Var::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Var::~Var() {
  SharedDtor();
}

void Var::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Var::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Var::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Var_descriptor_;
}

const Var& Var::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

Var* Var::default_instance_ = NULL;

Var* Var::New() const {
  return new Var;
}

void Var::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Var::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Var::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Var::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Var::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Var::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Var* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Var*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Var::MergeFrom(const Var& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Var::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Var::CopyFrom(const Var& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Var::IsInitialized() const {

  return true;
}

void Var::Swap(Var* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Var::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Var_descriptor_;
  metadata.reflection = Var_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lit::kValueFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Lit::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::Lit >, 11, false >
  Lit::ext(kExtFieldNumber, ::generated::proto::pat::Lit::default_instance());
Lit::Lit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lit::InitAsDefaultInstance() {
  value_ = const_cast< ::generated::proto::lit::Lit*>(&::generated::proto::lit::Lit::default_instance());
}

Lit::Lit(const Lit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lit::SharedCtor() {
  _cached_size_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lit::~Lit() {
  SharedDtor();
}

void Lit::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void Lit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lit_descriptor_;
}

const Lit& Lit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

Lit* Lit::default_instance_ = NULL;

Lit* Lit::New() const {
  return new Lit;
}

void Lit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != NULL) value_->::generated::proto::lit::Lit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.lit.Lit value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.lit.Lit value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.lit.Lit value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.lit.Lit value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lit::MergeFrom(const Lit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      mutable_value()->::generated::proto::lit::Lit::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lit::CopyFrom(const Lit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lit::IsInitialized() const {

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Lit::Swap(Lit* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lit_descriptor_;
  metadata.reflection = Lit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tuple::kItemsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Tuple::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::Tuple >, 11, false >
  Tuple::ext(kExtFieldNumber, ::generated::proto::pat::Tuple::default_instance());
Tuple::Tuple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tuple::InitAsDefaultInstance() {
}

Tuple::Tuple(const Tuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tuple::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tuple::~Tuple() {
  SharedDtor();
}

void Tuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuple_descriptor_;
}

const Tuple& Tuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

Tuple* Tuple::default_instance_ = NULL;

Tuple* Tuple::New() const {
  return new Tuple;
}

void Tuple::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.pat.Pat items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.pat.Pat items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.pat.Pat items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tuple::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.pat.Pat items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Tuple::Swap(Tuple* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tuple_descriptor_;
  metadata.reflection = Tuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Con_::kNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Con_::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::Con_ >, 11, false >
  Con_::ext(kExtFieldNumber, ::generated::proto::pat::Con_::default_instance());
Con_::Con_()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Con_::InitAsDefaultInstance() {
}

Con_::Con_(const Con_& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Con_::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Con_::~Con_() {
  SharedDtor();
}

void Con_::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Con_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Con_::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Con__descriptor_;
}

const Con_& Con_::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

Con_* Con_::default_instance_ = NULL;

Con_* Con_::New() const {
  return new Con_;
}

void Con_::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Con_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Con_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Con_::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Con_::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Con_::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Con_* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Con_*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Con_::MergeFrom(const Con_& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Con_::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Con_::CopyFrom(const Con_& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Con_::IsInitialized() const {

  return true;
}

void Con_::Swap(Con_* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Con_::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Con__descriptor_;
  metadata.reflection = Con__reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int App::kSrcFieldNumber;
const int App::kArgsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int App::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::App >, 11, false >
  App::ext(kExtFieldNumber, ::generated::proto::pat::App::default_instance());
App::App()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void App::InitAsDefaultInstance() {
  src_ = const_cast< ::generated::proto::pat::Pat*>(&::generated::proto::pat::Pat::default_instance());
}

App::App(const App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void App::SharedCtor() {
  _cached_size_ = 0;
  src_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

App::~App() {
  SharedDtor();
}

void App::SharedDtor() {
  if (this != default_instance_) {
    delete src_;
  }
}

void App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return App_descriptor_;
}

const App& App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

App* App::default_instance_ = NULL;

App* App::New() const {
  return new App;
}

void App::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != NULL) src_->::generated::proto::pat::Pat::Clear();
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.pat.Pat src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated .generated.proto.pat.Pat args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.pat.Pat src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->src(), output);
  }

  // repeated .generated.proto.pat.Pat args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.pat.Pat src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->src(), target);
  }

  // repeated .generated.proto.pat.Pat args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.pat.Pat src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

  }
  // repeated .generated.proto.pat.Pat args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::generated::proto::pat::Pat::MergeFrom(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void App::Swap(App* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = App_descriptor_;
  metadata.reflection = App_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Typed::kPatFieldNumber;
const int Typed::kClsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Typed::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::Typed >, 11, false >
  Typed::ext(kExtFieldNumber, ::generated::proto::pat::Typed::default_instance());
Typed::Typed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Typed::InitAsDefaultInstance() {
  pat_ = const_cast< ::generated::proto::pat::Pat*>(&::generated::proto::pat::Pat::default_instance());
  cls_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
}

Typed::Typed(const Typed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Typed::SharedCtor() {
  _cached_size_ = 0;
  pat_ = NULL;
  cls_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Typed::~Typed() {
  SharedDtor();
}

void Typed::SharedDtor() {
  if (this != default_instance_) {
    delete pat_;
    delete cls_;
  }
}

void Typed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Typed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Typed_descriptor_;
}

const Typed& Typed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

Typed* Typed::default_instance_ = NULL;

Typed* Typed::New() const {
  return new Typed;
}

void Typed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pat()) {
      if (pat_ != NULL) pat_->::generated::proto::pat::Pat::Clear();
    }
    if (has_cls()) {
      if (cls_ != NULL) cls_->::generated::proto::type::Type::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Typed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.pat.Pat pat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cls;
        break;
      }

      // optional .generated.proto.type.Type cls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Typed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.pat.Pat pat = 2;
  if (has_pat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pat(), output);
  }

  // optional .generated.proto.type.Type cls = 3;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cls(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Typed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.pat.Pat pat = 2;
  if (has_pat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pat(), target);
  }

  // optional .generated.proto.type.Type cls = 3;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cls(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Typed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.pat.Pat pat = 2;
    if (has_pat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pat());
    }

    // optional .generated.proto.type.Type cls = 3;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cls());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Typed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Typed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Typed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Typed::MergeFrom(const Typed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pat()) {
      mutable_pat()->::generated::proto::pat::Pat::MergeFrom(from.pat());
    }
    if (from.has_cls()) {
      mutable_cls()->::generated::proto::type::Type::MergeFrom(from.cls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Typed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Typed::CopyFrom(const Typed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Typed::IsInitialized() const {

  if (has_pat()) {
    if (!this->pat().IsInitialized()) return false;
  }
  if (has_cls()) {
    if (!this->cls().IsInitialized()) return false;
  }
  return true;
}

void Typed::Swap(Typed* other) {
  if (other != this) {
    std::swap(pat_, other->pat_);
    std::swap(cls_, other->cls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Typed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Typed_descriptor_;
  metadata.reflection = Typed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Wildcard::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::Wildcard >, 11, false >
  Wildcard::ext(kExtFieldNumber, ::generated::proto::pat::Wildcard::default_instance());
Wildcard::Wildcard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Wildcard::InitAsDefaultInstance() {
}

Wildcard::Wildcard(const Wildcard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Wildcard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wildcard::~Wildcard() {
  SharedDtor();
}

void Wildcard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Wildcard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wildcard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wildcard_descriptor_;
}

const Wildcard& Wildcard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

Wildcard* Wildcard::default_instance_ = NULL;

Wildcard* Wildcard::New() const {
  return new Wildcard;
}

void Wildcard::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wildcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Wildcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Wildcard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Wildcard::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wildcard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wildcard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wildcard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wildcard::MergeFrom(const Wildcard& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wildcard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wildcard::CopyFrom(const Wildcard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wildcard::IsInitialized() const {

  return true;
}

void Wildcard::Swap(Wildcard* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wildcard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wildcard_descriptor_;
  metadata.reflection = Wildcard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RecWildcard::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::pat::Pat,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::pat::RecWildcard >, 11, false >
  RecWildcard::ext(kExtFieldNumber, ::generated::proto::pat::RecWildcard::default_instance());
RecWildcard::RecWildcard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecWildcard::InitAsDefaultInstance() {
}

RecWildcard::RecWildcard(const RecWildcard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecWildcard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecWildcard::~RecWildcard() {
  SharedDtor();
}

void RecWildcard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecWildcard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecWildcard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecWildcard_descriptor_;
}

const RecWildcard& RecWildcard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pat_2eproto();
  return *default_instance_;
}

RecWildcard* RecWildcard::default_instance_ = NULL;

RecWildcard* RecWildcard::New() const {
  return new RecWildcard;
}

void RecWildcard::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecWildcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RecWildcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecWildcard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecWildcard::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecWildcard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecWildcard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecWildcard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecWildcard::MergeFrom(const RecWildcard& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecWildcard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecWildcard::CopyFrom(const RecWildcard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecWildcard::IsInitialized() const {

  return true;
}

void RecWildcard::Swap(RecWildcard* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecWildcard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecWildcard_descriptor_;
  metadata.reflection = RecWildcard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pat
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
