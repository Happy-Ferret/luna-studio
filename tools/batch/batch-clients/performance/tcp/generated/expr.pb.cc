// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "expr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace expr {

namespace {

const ::google::protobuf::Descriptor* Expr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Expr_Cls_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Accessor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Accessor_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypeAlias_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeAlias_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypeDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  App_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppCons__descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppCons__reflection_ = NULL;
const ::google::protobuf::Descriptor* Assignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Assignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConD_reflection_ = NULL;
const ::google::protobuf::Descriptor* Con__descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Con__reflection_ = NULL;
const ::google::protobuf::Descriptor* Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Condition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lambda_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lambda_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grouped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grouped_reflection_ = NULL;
const ::google::protobuf::Descriptor* Import_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Import_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportNative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportNative_reflection_ = NULL;
const ::google::protobuf::Descriptor* Infix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Infix_reflection_ = NULL;
const ::google::protobuf::Descriptor* List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  List_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Typed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Typed_reflection_ = NULL;
const ::google::protobuf::Descriptor* Var_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Var_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wildcard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wildcard_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeFromTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeFromTo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeFrom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeFrom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Arg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Native_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ref_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ref_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Case_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Case_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_expr_2eproto() {
  protobuf_AddDesc_expr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "expr.proto");
  GOOGLE_CHECK(file != NULL);
  Expr_descriptor_ = file->message_type(0);
  static const int Expr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, id_),
  };
  Expr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expr_descriptor_,
      Expr::default_instance_,
      Expr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expr));
  Expr_Cls_descriptor_ = Expr_descriptor_->enum_type(0);
  NOP_descriptor_ = file->message_type(1);
  static const int NOP_offsets_[1] = {
  };
  NOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NOP_descriptor_,
      NOP::default_instance_,
      NOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NOP));
  Accessor_descriptor_ = file->message_type(2);
  static const int Accessor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accessor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accessor, dst_),
  };
  Accessor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Accessor_descriptor_,
      Accessor::default_instance_,
      Accessor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accessor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accessor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Accessor));
  TypeAlias_descriptor_ = file->message_type(3);
  static const int TypeAlias_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeAlias, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeAlias, dsttype_),
  };
  TypeAlias_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeAlias_descriptor_,
      TypeAlias::default_instance_,
      TypeAlias_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeAlias, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeAlias, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeAlias));
  TypeDef_descriptor_ = file->message_type(4);
  static const int TypeDef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDef, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDef, dsttype_),
  };
  TypeDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeDef_descriptor_,
      TypeDef::default_instance_,
      TypeDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeDef));
  App_descriptor_ = file->message_type(5);
  static const int App_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, args_),
  };
  App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      App_descriptor_,
      App::default_instance_,
      App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(App));
  AppCons__descriptor_ = file->message_type(6);
  static const int AppCons__offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCons_, args_),
  };
  AppCons__reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppCons__descriptor_,
      AppCons_::default_instance_,
      AppCons__offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCons_, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCons_, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppCons_));
  Assignment_descriptor_ = file->message_type(7);
  static const int Assignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Assignment, pat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Assignment, dst_),
  };
  Assignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Assignment_descriptor_,
      Assignment::default_instance_,
      Assignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Assignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Assignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Assignment));
  RecordUpdate_descriptor_ = file->message_type(8);
  static const int RecordUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUpdate, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUpdate, selectors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUpdate, expr_),
  };
  RecordUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordUpdate_descriptor_,
      RecordUpdate::default_instance_,
      RecordUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordUpdate));
  Data_descriptor_ = file->message_type(9);
  static const int Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, cons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, methods_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  ConD_descriptor_ = file->message_type(10);
  static const int ConD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConD, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConD, fields_),
  };
  ConD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConD_descriptor_,
      ConD::default_instance_,
      ConD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConD));
  Con__descriptor_ = file->message_type(11);
  static const int Con__offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Con_, name_),
  };
  Con__reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Con__descriptor_,
      Con_::default_instance_,
      Con__offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Con_, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Con_, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Con_));
  Condition_descriptor_ = file->message_type(12);
  static const int Condition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, failure_),
  };
  Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Condition_descriptor_,
      Condition::default_instance_,
      Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Condition));
  Function_descriptor_ = file->message_type(13);
  static const int Function_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, body_),
  };
  Function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Function_descriptor_,
      Function::default_instance_,
      Function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Function));
  Lambda_descriptor_ = file->message_type(14);
  static const int Lambda_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambda, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambda, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambda, body_),
  };
  Lambda_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lambda_descriptor_,
      Lambda::default_instance_,
      Lambda_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambda, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lambda, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lambda));
  Grouped_descriptor_ = file->message_type(15);
  static const int Grouped_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grouped, expr_),
  };
  Grouped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Grouped_descriptor_,
      Grouped::default_instance_,
      Grouped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grouped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grouped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Grouped));
  Import_descriptor_ = file->message_type(16);
  static const int Import_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Import, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Import, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Import, rename_),
  };
  Import_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Import_descriptor_,
      Import::default_instance_,
      Import_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Import, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Import, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Import));
  ImportNative_descriptor_ = file->message_type(17);
  static const int ImportNative_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportNative, segments_),
  };
  ImportNative_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImportNative_descriptor_,
      ImportNative::default_instance_,
      ImportNative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportNative, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportNative, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImportNative));
  Infix_descriptor_ = file->message_type(18);
  static const int Infix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Infix, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Infix, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Infix, dst_),
  };
  Infix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Infix_descriptor_,
      Infix::default_instance_,
      Infix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Infix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Infix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Infix));
  List_descriptor_ = file->message_type(19);
  static const int List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, items_),
  };
  List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      List_descriptor_,
      List::default_instance_,
      List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(List));
  Lit_descriptor_ = file->message_type(20);
  static const int Lit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lit, lvalue_),
  };
  Lit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lit_descriptor_,
      Lit::default_instance_,
      Lit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lit));
  Tuple_descriptor_ = file->message_type(21);
  static const int Tuple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, items_),
  };
  Tuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tuple_descriptor_,
      Tuple::default_instance_,
      Tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tuple));
  Typed_descriptor_ = file->message_type(22);
  static const int Typed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, expr_),
  };
  Typed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Typed_descriptor_,
      Typed::default_instance_,
      Typed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Typed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Typed));
  Var_descriptor_ = file->message_type(23);
  static const int Var_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, name_),
  };
  Var_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Var_descriptor_,
      Var::default_instance_,
      Var_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Var));
  Wildcard_descriptor_ = file->message_type(24);
  static const int Wildcard_offsets_[1] = {
  };
  Wildcard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wildcard_descriptor_,
      Wildcard::default_instance_,
      Wildcard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wildcard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wildcard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wildcard));
  RangeFromTo_descriptor_ = file->message_type(25);
  static const int RangeFromTo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeFromTo, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeFromTo, end_),
  };
  RangeFromTo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeFromTo_descriptor_,
      RangeFromTo::default_instance_,
      RangeFromTo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeFromTo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeFromTo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeFromTo));
  RangeFrom_descriptor_ = file->message_type(26);
  static const int RangeFrom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeFrom, start_),
  };
  RangeFrom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeFrom_descriptor_,
      RangeFrom::default_instance_,
      RangeFrom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeFrom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeFrom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeFrom));
  Field_descriptor_ = file->message_type(27);
  static const int Field_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, value_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  Arg_descriptor_ = file->message_type(28);
  static const int Arg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, pat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, value_),
  };
  Arg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arg_descriptor_,
      Arg::default_instance_,
      Arg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arg));
  Native_descriptor_ = file->message_type(29);
  static const int Native_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Native, segments_),
  };
  Native_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Native_descriptor_,
      Native::default_instance_,
      Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Native, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Native, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Native));
  NativeCode_descriptor_ = file->message_type(30);
  static const int NativeCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeCode, code_),
  };
  NativeCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeCode_descriptor_,
      NativeCode::default_instance_,
      NativeCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeCode));
  NativeVar_descriptor_ = file->message_type(31);
  static const int NativeVar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeVar, name_),
  };
  NativeVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NativeVar_descriptor_,
      NativeVar::default_instance_,
      NativeVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NativeVar));
  Ref_descriptor_ = file->message_type(32);
  static const int Ref_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref, dst_),
  };
  Ref_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ref_descriptor_,
      Ref::default_instance_,
      Ref_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ref));
  RefType_descriptor_ = file->message_type(33);
  static const int RefType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefType, typename__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefType, name_),
  };
  RefType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefType_descriptor_,
      RefType::default_instance_,
      RefType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefType));
  Case_descriptor_ = file->message_type(34);
  static const int Case_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, match_),
  };
  Case_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Case_descriptor_,
      Case::default_instance_,
      Case_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Case));
  Match_descriptor_ = file->message_type(35);
  static const int Match_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, pat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, body_),
  };
  Match_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Match_descriptor_,
      Match::default_instance_,
      Match_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Match));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_expr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expr_descriptor_, &Expr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NOP_descriptor_, &NOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Accessor_descriptor_, &Accessor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeAlias_descriptor_, &TypeAlias::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeDef_descriptor_, &TypeDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    App_descriptor_, &App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppCons__descriptor_, &AppCons_::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Assignment_descriptor_, &Assignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordUpdate_descriptor_, &RecordUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConD_descriptor_, &ConD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Con__descriptor_, &Con_::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Condition_descriptor_, &Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Function_descriptor_, &Function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lambda_descriptor_, &Lambda::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Grouped_descriptor_, &Grouped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Import_descriptor_, &Import::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImportNative_descriptor_, &ImportNative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Infix_descriptor_, &Infix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    List_descriptor_, &List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lit_descriptor_, &Lit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tuple_descriptor_, &Tuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Typed_descriptor_, &Typed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Var_descriptor_, &Var::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wildcard_descriptor_, &Wildcard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeFromTo_descriptor_, &RangeFromTo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeFrom_descriptor_, &RangeFrom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arg_descriptor_, &Arg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Native_descriptor_, &Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeCode_descriptor_, &NativeCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NativeVar_descriptor_, &NativeVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ref_descriptor_, &Ref::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefType_descriptor_, &RefType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Case_descriptor_, &Case::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Match_descriptor_, &Match::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_expr_2eproto() {
  delete Expr::default_instance_;
  delete Expr_reflection_;
  delete NOP::default_instance_;
  delete NOP_reflection_;
  delete Accessor::default_instance_;
  delete Accessor_reflection_;
  delete TypeAlias::default_instance_;
  delete TypeAlias_reflection_;
  delete TypeDef::default_instance_;
  delete TypeDef_reflection_;
  delete App::default_instance_;
  delete App_reflection_;
  delete AppCons_::default_instance_;
  delete AppCons__reflection_;
  delete Assignment::default_instance_;
  delete Assignment_reflection_;
  delete RecordUpdate::default_instance_;
  delete RecordUpdate_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete ConD::default_instance_;
  delete ConD_reflection_;
  delete Con_::default_instance_;
  delete Con__reflection_;
  delete Condition::default_instance_;
  delete Condition_reflection_;
  delete Function::default_instance_;
  delete Function_reflection_;
  delete Lambda::default_instance_;
  delete Lambda_reflection_;
  delete Grouped::default_instance_;
  delete Grouped_reflection_;
  delete Import::default_instance_;
  delete Import_reflection_;
  delete ImportNative::default_instance_;
  delete ImportNative_reflection_;
  delete Infix::default_instance_;
  delete Infix_reflection_;
  delete List::default_instance_;
  delete List_reflection_;
  delete Lit::default_instance_;
  delete Lit_reflection_;
  delete Tuple::default_instance_;
  delete Tuple_reflection_;
  delete Typed::default_instance_;
  delete Typed_reflection_;
  delete Var::default_instance_;
  delete Var_reflection_;
  delete Wildcard::default_instance_;
  delete Wildcard_reflection_;
  delete RangeFromTo::default_instance_;
  delete RangeFromTo_reflection_;
  delete RangeFrom::default_instance_;
  delete RangeFrom_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Arg::default_instance_;
  delete Arg_reflection_;
  delete Native::default_instance_;
  delete Native_reflection_;
  delete NativeCode::default_instance_;
  delete NativeCode_reflection_;
  delete NativeVar::default_instance_;
  delete NativeVar_reflection_;
  delete Ref::default_instance_;
  delete Ref_reflection_;
  delete RefType::default_instance_;
  delete RefType_reflection_;
  delete Case::default_instance_;
  delete Case_reflection_;
  delete Match::default_instance_;
  delete Match_reflection_;
}

void protobuf_AddDesc_expr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::pat::protobuf_AddDesc_pat_2eproto();
  ::generated::proto::lit::protobuf_AddDesc_lit_2eproto();
  ::generated::proto::type::protobuf_AddDesc_type_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nexpr.proto\022\024generated.proto.expr\032\tpat."
    "proto\032\tlit.proto\032\ntype.proto\"\210\004\n\004Expr\022+\n"
    "\003cls\030\001 \002(\0162\036.generated.proto.expr.Expr.C"
    "ls\022\016\n\002id\030\002 \001(\005:\002-1\"\270\003\n\003Cls\022\007\n\003NOP\020\001\022\r\n\tT"
    "ypeAlias\020\002\022\013\n\007TypeDef\020\003\022\014\n\010Accessor\020\004\022\007\n"
    "\003App\020\005\022\014\n\010AppCons_\020\006\022\016\n\nAssignment\020\007\022\020\n\014"
    "RecordUpdate\020\010\022\010\n\004Data\020\t\022\010\n\004ConD\020\n\022\010\n\004Co"
    "n_\020\013\022\r\n\tCondition\020\037\022\014\n\010Function\020\014\022\n\n\006Lam"
    "bda\020\r\022\013\n\007Grouped\020 \022\n\n\006Import\020\016\022\020\n\014Import"
    "Native\020#\022\t\n\005Infix\020\017\022\010\n\004List\020\020\022\007\n\003Lit\020\021\022\t"
    "\n\005Tuple\020\022\022\t\n\005Typed\020\023\022\007\n\003Var\020\024\022\014\n\010Wildcar"
    "d\020\025\022\017\n\013RangeFromTo\020\026\022\r\n\tRangeFrom\020\027\022\t\n\005F"
    "ield\020\030\022\007\n\003Arg\020\031\022\n\n\006Native\020\032\022\016\n\nNativeCod"
    "e\020\033\022\r\n\tNativeVar\020\034\022\007\n\003Ref\020!\022\013\n\007RefType\020\""
    "\022\010\n\004Case\020\035\022\t\n\005Match\020\036*\010\010d\020\200\200\200\200\002\"I\n\003NOP2B"
    "\n\003ext\022\032.generated.proto.expr.Expr\030d \001(\0132"
    "\031.generated.proto.expr.NOP\"\212\001\n\010Accessor\022"
    "\014\n\004name\030\001 \001(\t\022\'\n\003dst\030\002 \001(\0132\032.generated.p"
    "roto.expr.Expr2G\n\003ext\022\032.generated.proto."
    "expr.Expr\030e \001(\0132\036.generated.proto.expr.A"
    "ccessor\"\257\001\n\tTypeAlias\022+\n\007srcType\030\001 \001(\0132\032"
    ".generated.proto.type.Type\022+\n\007dstType\030\002 "
    "\001(\0132\032.generated.proto.type.Type2H\n\003ext\022\032"
    ".generated.proto.expr.Expr\030\177 \001(\0132\037.gener"
    "ated.proto.expr.TypeAlias\"\254\001\n\007TypeDef\022+\n"
    "\007srcType\030\001 \001(\0132\032.generated.proto.type.Ty"
    "pe\022+\n\007dstType\030\002 \001(\0132\032.generated.proto.ty"
    "pe.Type2G\n\003ext\022\032.generated.proto.expr.Ex"
    "pr\030\200\001 \001(\0132\035.generated.proto.expr.TypeDef"
    "\"\234\001\n\003App\022\'\n\003src\030\001 \001(\0132\032.generated.proto."
    "expr.Expr\022(\n\004args\030\002 \003(\0132\032.generated.prot"
    "o.expr.Expr2B\n\003ext\022\032.generated.proto.exp"
    "r.Expr\030f \001(\0132\031.generated.proto.expr.App\""
    "}\n\010AppCons_\022(\n\004args\030\001 \003(\0132\032.generated.pr"
    "oto.expr.Expr2G\n\003ext\022\032.generated.proto.e"
    "xpr.Expr\030g \001(\0132\036.generated.proto.expr.Ap"
    "pCons_\"\247\001\n\nAssignment\022%\n\003pat\030\001 \001(\0132\030.gen"
    "erated.proto.pat.Pat\022\'\n\003dst\030\002 \001(\0132\032.gene"
    "rated.proto.expr.Expr2I\n\003ext\022\032.generated"
    ".proto.expr.Expr\030h \001(\0132 .generated.proto"
    ".expr.Assignment\"\302\001\n\014RecordUpdate\022\'\n\003src"
    "\030\001 \001(\0132\032.generated.proto.expr.Expr\022\021\n\tse"
    "lectors\030\002 \003(\t\022(\n\004expr\030\003 \001(\0132\032.generated."
    "proto.expr.Expr2L\n\003ext\022\032.generated.proto"
    ".expr.Expr\030\201\001 \001(\0132\".generated.proto.expr"
    ".RecordUpdate\"\370\001\n\004Data\022\'\n\003cls\030\001 \001(\0132\032.ge"
    "nerated.proto.type.Type\022(\n\004cons\030\002 \003(\0132\032."
    "generated.proto.expr.Expr\022+\n\007classes\030\003 \003"
    "(\0132\032.generated.proto.expr.Expr\022+\n\007method"
    "s\030\004 \003(\0132\032.generated.proto.expr.Expr2C\n\003e"
    "xt\022\032.generated.proto.expr.Expr\030i \001(\0132\032.g"
    "enerated.proto.expr.Data\"\205\001\n\004ConD\022\014\n\004nam"
    "e\030\001 \001(\t\022*\n\006fields\030\002 \003(\0132\032.generated.prot"
    "o.expr.Expr2C\n\003ext\022\032.generated.proto.exp"
    "r.Expr\030~ \001(\0132\032.generated.proto.expr.ConD"
    "\"Y\n\004Con_\022\014\n\004name\030\001 \001(\t2C\n\003ext\022\032.generate"
    "d.proto.expr.Expr\030j \001(\0132\032.generated.prot"
    "o.expr.Con_\"\332\001\n\tCondition\022(\n\004cond\030\001 \001(\0132"
    "\032.generated.proto.expr.Expr\022+\n\007success\030\002"
    " \003(\0132\032.generated.proto.expr.Expr\022+\n\007fail"
    "ure\030\003 \003(\0132\032.generated.proto.expr.Expr2I\n"
    "\003ext\022\032.generated.proto.expr.Expr\030\203\001 \001(\0132"
    "\037.generated.proto.expr.Condition\"\361\001\n\010Fun"
    "ction\022\014\n\004path\030\001 \003(\t\022\014\n\004name\030\002 \001(\t\022*\n\006inp"
    "uts\030\003 \003(\0132\032.generated.proto.expr.Expr\022*\n"
    "\006output\030\004 \001(\0132\032.generated.proto.type.Typ"
    "e\022(\n\004body\030\005 \003(\0132\032.generated.proto.expr.E"
    "xpr2G\n\003ext\022\032.generated.proto.expr.Expr\030k"
    " \001(\0132\036.generated.proto.expr.Function\"\321\001\n"
    "\006Lambda\022*\n\006inputs\030\001 \003(\0132\032.generated.prot"
    "o.expr.Expr\022*\n\006output\030\002 \001(\0132\032.generated."
    "proto.type.Type\022(\n\004body\030\003 \003(\0132\032.generate"
    "d.proto.expr.Expr2E\n\003ext\022\032.generated.pro"
    "to.expr.Expr\030l \001(\0132\034.generated.proto.exp"
    "r.Lambda\"|\n\007Grouped\022(\n\004expr\030\001 \001(\0132\032.gene"
    "rated.proto.expr.Expr2G\n\003ext\022\032.generated"
    ".proto.expr.Expr\030\204\001 \001(\0132\035.generated.prot"
    "o.expr.Grouped\"\231\001\n\006Import\022\014\n\004path\030\001 \003(\t\022"
    "*\n\006target\030\002 \001(\0132\032.generated.proto.expr.E"
    "xpr\022\016\n\006rename\030\003 \001(\t2E\n\003ext\022\032.generated.p"
    "roto.expr.Expr\030m \001(\0132\034.generated.proto.e"
    "xpr.Import\"\212\001\n\014ImportNative\022,\n\010segments\030"
    "\001 \003(\0132\032.generated.proto.expr.Expr2L\n\003ext"
    "\022\032.generated.proto.expr.Expr\030\207\001 \001(\0132\".ge"
    "nerated.proto.expr.ImportNative\"\255\001\n\005Infi"
    "x\022\014\n\004name\030\001 \001(\t\022\'\n\003src\030\002 \001(\0132\032.generated"
    ".proto.expr.Expr\022\'\n\003dst\030\003 \001(\0132\032.generate"
    "d.proto.expr.Expr2D\n\003ext\022\032.generated.pro"
    "to.expr.Expr\030n \001(\0132\033.generated.proto.exp"
    "r.Infix\"v\n\004List\022)\n\005items\030\001 \003(\0132\032.generat"
    "ed.proto.expr.Expr2C\n\003ext\022\032.generated.pr"
    "oto.expr.Expr\030o \001(\0132\032.generated.proto.ex"
    "pr.List\"s\n\003Lit\022(\n\006lvalue\030\001 \001(\0132\030.generat"
    "ed.proto.lit.Lit2B\n\003ext\022\032.generated.prot"
    "o.expr.Expr\030p \001(\0132\031.generated.proto.expr"
    ".Lit\"x\n\005Tuple\022)\n\005items\030\001 \003(\0132\032.generated"
    ".proto.expr.Expr2D\n\003ext\022\032.generated.prot"
    "o.expr.Expr\030q \001(\0132\033.generated.proto.expr"
    ".Tuple\"\240\001\n\005Typed\022\'\n\003cls\030\001 \001(\0132\032.generate"
    "d.proto.type.Type\022(\n\004expr\030\002 \001(\0132\032.genera"
    "ted.proto.expr.Expr2D\n\003ext\022\032.generated.p"
    "roto.expr.Expr\030r \001(\0132\033.generated.proto.e"
    "xpr.Typed\"W\n\003Var\022\014\n\004name\030\001 \001(\t2B\n\003ext\022\032."
    "generated.proto.expr.Expr\030s \001(\0132\031.genera"
    "ted.proto.expr.Var\"S\n\010Wildcard2G\n\003ext\022\032."
    "generated.proto.expr.Expr\030t \001(\0132\036.genera"
    "ted.proto.expr.Wildcard\"\255\001\n\013RangeFromTo\022"
    ")\n\005start\030\001 \001(\0132\032.generated.proto.expr.Ex"
    "pr\022\'\n\003end\030\002 \001(\0132\032.generated.proto.expr.E"
    "xpr2J\n\003ext\022\032.generated.proto.expr.Expr\030u"
    " \001(\0132!.generated.proto.expr.RangeFromTo\""
    "\200\001\n\tRangeFrom\022)\n\005start\030\001 \001(\0132\032.generated"
    ".proto.expr.Expr2H\n\003ext\022\032.generated.prot"
    "o.expr.Expr\030v \001(\0132\037.generated.proto.expr"
    ".RangeFrom\"\257\001\n\005Field\022\014\n\004name\030\001 \001(\t\022\'\n\003cl"
    "s\030\002 \001(\0132\032.generated.proto.type.Type\022)\n\005v"
    "alue\030\003 \001(\0132\032.generated.proto.expr.Expr2D"
    "\n\003ext\022\032.generated.proto.expr.Expr\030w \001(\0132"
    "\033.generated.proto.expr.Field\"\233\001\n\003Arg\022%\n\003"
    "pat\030\001 \001(\0132\030.generated.proto.pat.Pat\022)\n\005v"
    "alue\030\002 \001(\0132\032.generated.proto.expr.Expr2B"
    "\n\003ext\022\032.generated.proto.expr.Expr\030x \001(\0132"
    "\031.generated.proto.expr.Arg\"}\n\006Native\022,\n\010"
    "segments\030\001 \003(\0132\032.generated.proto.expr.Ex"
    "pr2E\n\003ext\022\032.generated.proto.expr.Expr\030y "
    "\001(\0132\034.generated.proto.expr.Native\"e\n\nNat"
    "iveCode\022\014\n\004code\030\001 \001(\t2I\n\003ext\022\032.generated"
    ".proto.expr.Expr\030z \001(\0132 .generated.proto"
    ".expr.NativeCode\"c\n\tNativeVar\022\014\n\004name\030\001 "
    "\001(\t2H\n\003ext\022\032.generated.proto.expr.Expr\030{"
    " \001(\0132\037.generated.proto.expr.NativeVar\"s\n"
    "\003Ref\022\'\n\003dst\030\001 \001(\0132\032.generated.proto.expr"
    ".Expr2C\n\003ext\022\032.generated.proto.expr.Expr"
    "\030\205\001 \001(\0132\031.generated.proto.expr.Ref\"r\n\007Re"
    "fType\022\020\n\010typename\030\001 \001(\t\022\014\n\004name\030\002 \001(\t2G\n"
    "\003ext\022\032.generated.proto.expr.Expr\030\206\001 \001(\0132"
    "\035.generated.proto.expr.RefType\"\240\001\n\004Case\022"
    "(\n\004expr\030\001 \001(\0132\032.generated.proto.expr.Exp"
    "r\022)\n\005match\030\002 \003(\0132\032.generated.proto.expr."
    "Expr2C\n\003ext\022\032.generated.proto.expr.Expr\030"
    "| \001(\0132\032.generated.proto.expr.Case\"\236\001\n\005Ma"
    "tch\022%\n\003pat\030\001 \001(\0132\030.generated.proto.pat.P"
    "at\022(\n\004body\030\002 \003(\0132\032.generated.proto.expr."
    "Expr2D\n\003ext\022\032.generated.proto.expr.Expr\030"
    "} \001(\0132\033.generated.proto.expr.Match", 5794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "expr.proto", &protobuf_RegisterTypes);
  Expr::default_instance_ = new Expr();
  NOP::default_instance_ = new NOP();
  Accessor::default_instance_ = new Accessor();
  TypeAlias::default_instance_ = new TypeAlias();
  TypeDef::default_instance_ = new TypeDef();
  App::default_instance_ = new App();
  AppCons_::default_instance_ = new AppCons_();
  Assignment::default_instance_ = new Assignment();
  RecordUpdate::default_instance_ = new RecordUpdate();
  Data::default_instance_ = new Data();
  ConD::default_instance_ = new ConD();
  Con_::default_instance_ = new Con_();
  Condition::default_instance_ = new Condition();
  Function::default_instance_ = new Function();
  Lambda::default_instance_ = new Lambda();
  Grouped::default_instance_ = new Grouped();
  Import::default_instance_ = new Import();
  ImportNative::default_instance_ = new ImportNative();
  Infix::default_instance_ = new Infix();
  List::default_instance_ = new List();
  Lit::default_instance_ = new Lit();
  Tuple::default_instance_ = new Tuple();
  Typed::default_instance_ = new Typed();
  Var::default_instance_ = new Var();
  Wildcard::default_instance_ = new Wildcard();
  RangeFromTo::default_instance_ = new RangeFromTo();
  RangeFrom::default_instance_ = new RangeFrom();
  Field::default_instance_ = new Field();
  Arg::default_instance_ = new Arg();
  Native::default_instance_ = new Native();
  NativeCode::default_instance_ = new NativeCode();
  NativeVar::default_instance_ = new NativeVar();
  Ref::default_instance_ = new Ref();
  RefType::default_instance_ = new RefType();
  Case::default_instance_ = new Case();
  Match::default_instance_ = new Match();
  Expr::default_instance_->InitAsDefaultInstance();
  NOP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    100, 11, false, false,
    &::generated::proto::expr::NOP::default_instance());
  Accessor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    101, 11, false, false,
    &::generated::proto::expr::Accessor::default_instance());
  TypeAlias::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    127, 11, false, false,
    &::generated::proto::expr::TypeAlias::default_instance());
  TypeDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    128, 11, false, false,
    &::generated::proto::expr::TypeDef::default_instance());
  App::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    102, 11, false, false,
    &::generated::proto::expr::App::default_instance());
  AppCons_::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    103, 11, false, false,
    &::generated::proto::expr::AppCons_::default_instance());
  Assignment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    104, 11, false, false,
    &::generated::proto::expr::Assignment::default_instance());
  RecordUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    129, 11, false, false,
    &::generated::proto::expr::RecordUpdate::default_instance());
  Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    105, 11, false, false,
    &::generated::proto::expr::Data::default_instance());
  ConD::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    126, 11, false, false,
    &::generated::proto::expr::ConD::default_instance());
  Con_::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    106, 11, false, false,
    &::generated::proto::expr::Con_::default_instance());
  Condition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    131, 11, false, false,
    &::generated::proto::expr::Condition::default_instance());
  Function::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    107, 11, false, false,
    &::generated::proto::expr::Function::default_instance());
  Lambda::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    108, 11, false, false,
    &::generated::proto::expr::Lambda::default_instance());
  Grouped::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    132, 11, false, false,
    &::generated::proto::expr::Grouped::default_instance());
  Import::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    109, 11, false, false,
    &::generated::proto::expr::Import::default_instance());
  ImportNative::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    135, 11, false, false,
    &::generated::proto::expr::ImportNative::default_instance());
  Infix::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    110, 11, false, false,
    &::generated::proto::expr::Infix::default_instance());
  List::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    111, 11, false, false,
    &::generated::proto::expr::List::default_instance());
  Lit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    112, 11, false, false,
    &::generated::proto::expr::Lit::default_instance());
  Tuple::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    113, 11, false, false,
    &::generated::proto::expr::Tuple::default_instance());
  Typed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    114, 11, false, false,
    &::generated::proto::expr::Typed::default_instance());
  Var::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    115, 11, false, false,
    &::generated::proto::expr::Var::default_instance());
  Wildcard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    116, 11, false, false,
    &::generated::proto::expr::Wildcard::default_instance());
  RangeFromTo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    117, 11, false, false,
    &::generated::proto::expr::RangeFromTo::default_instance());
  RangeFrom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    118, 11, false, false,
    &::generated::proto::expr::RangeFrom::default_instance());
  Field::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    119, 11, false, false,
    &::generated::proto::expr::Field::default_instance());
  Arg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    120, 11, false, false,
    &::generated::proto::expr::Arg::default_instance());
  Native::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    121, 11, false, false,
    &::generated::proto::expr::Native::default_instance());
  NativeCode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    122, 11, false, false,
    &::generated::proto::expr::NativeCode::default_instance());
  NativeVar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    123, 11, false, false,
    &::generated::proto::expr::NativeVar::default_instance());
  Ref::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    133, 11, false, false,
    &::generated::proto::expr::Ref::default_instance());
  RefType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    134, 11, false, false,
    &::generated::proto::expr::RefType::default_instance());
  Case::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    124, 11, false, false,
    &::generated::proto::expr::Case::default_instance());
  Match::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::expr::Expr::default_instance(),
    125, 11, false, false,
    &::generated::proto::expr::Match::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_expr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_expr_2eproto {
  StaticDescriptorInitializer_expr_2eproto() {
    protobuf_AddDesc_expr_2eproto();
  }
} static_descriptor_initializer_expr_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Expr_Cls_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_Cls_descriptor_;
}
bool Expr_Cls_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Expr_Cls Expr::NOP;
const Expr_Cls Expr::TypeAlias;
const Expr_Cls Expr::TypeDef;
const Expr_Cls Expr::Accessor;
const Expr_Cls Expr::App;
const Expr_Cls Expr::AppCons_;
const Expr_Cls Expr::Assignment;
const Expr_Cls Expr::RecordUpdate;
const Expr_Cls Expr::Data;
const Expr_Cls Expr::ConD;
const Expr_Cls Expr::Con_;
const Expr_Cls Expr::Condition;
const Expr_Cls Expr::Function;
const Expr_Cls Expr::Lambda;
const Expr_Cls Expr::Grouped;
const Expr_Cls Expr::Import;
const Expr_Cls Expr::ImportNative;
const Expr_Cls Expr::Infix;
const Expr_Cls Expr::List;
const Expr_Cls Expr::Lit;
const Expr_Cls Expr::Tuple;
const Expr_Cls Expr::Typed;
const Expr_Cls Expr::Var;
const Expr_Cls Expr::Wildcard;
const Expr_Cls Expr::RangeFromTo;
const Expr_Cls Expr::RangeFrom;
const Expr_Cls Expr::Field;
const Expr_Cls Expr::Arg;
const Expr_Cls Expr::Native;
const Expr_Cls Expr::NativeCode;
const Expr_Cls Expr::NativeVar;
const Expr_Cls Expr::Ref;
const Expr_Cls Expr::RefType;
const Expr_Cls Expr::Case;
const Expr_Cls Expr::Match;
const Expr_Cls Expr::Cls_MIN;
const Expr_Cls Expr::Cls_MAX;
const int Expr::Cls_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Expr::kClsFieldNumber;
const int Expr::kIdFieldNumber;
#endif  // !_MSC_VER

Expr::Expr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Expr::InitAsDefaultInstance() {
}

Expr::Expr(const Expr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Expr::SharedCtor() {
  _cached_size_ = 0;
  cls_ = 1;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expr::~Expr() {
  SharedDtor();
}

void Expr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Expr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expr_descriptor_;
}

const Expr& Expr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Expr* Expr::default_instance_ = NULL;

Expr* Expr::New() const {
  return new Expr;
}

void Expr::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cls_ = 1;
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.expr.Expr.Cls cls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::generated::proto::expr::Expr_Cls_IsValid(value)) {
            set_cls(static_cast< ::generated::proto::expr::Expr_Cls >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.expr.Expr.Cls cls = 1;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cls(), output);
  }

  // optional int32 id = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Expr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.expr.Expr.Cls cls = 1;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cls(), target);
  }

  // optional int32 id = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Expr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.expr.Expr.Cls cls = 1;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cls());
    }

    // optional int32 id = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls()) {
      set_cls(from.cls());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Expr::Swap(Expr* other) {
  if (other != this) {
    std::swap(cls_, other->cls_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expr_descriptor_;
  metadata.reflection = Expr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NOP::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::NOP >, 11, false >
  NOP::ext(kExtFieldNumber, ::generated::proto::expr::NOP::default_instance());
NOP::NOP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NOP::InitAsDefaultInstance() {
}

NOP::NOP(const NOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NOP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NOP::~NOP() {
  SharedDtor();
}

void NOP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NOP_descriptor_;
}

const NOP& NOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

NOP* NOP::default_instance_ = NULL;

NOP* NOP::New() const {
  return new NOP;
}

void NOP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NOP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NOP::MergeFrom(const NOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NOP::CopyFrom(const NOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NOP::IsInitialized() const {

  return true;
}

void NOP::Swap(NOP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NOP_descriptor_;
  metadata.reflection = NOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Accessor::kNameFieldNumber;
const int Accessor::kDstFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Accessor::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Accessor >, 11, false >
  Accessor::ext(kExtFieldNumber, ::generated::proto::expr::Accessor::default_instance());
Accessor::Accessor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Accessor::InitAsDefaultInstance() {
  dst_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Accessor::Accessor(const Accessor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Accessor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Accessor::~Accessor() {
  SharedDtor();
}

void Accessor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete dst_;
  }
}

void Accessor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Accessor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Accessor_descriptor_;
}

const Accessor& Accessor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Accessor* Accessor::default_instance_ = NULL;

Accessor* Accessor::New() const {
  return new Accessor;
}

void Accessor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != NULL) dst_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Accessor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // optional .generated.proto.expr.Expr dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Accessor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .generated.proto.expr.Expr dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Accessor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .generated.proto.expr.Expr dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Accessor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .generated.proto.expr.Expr dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Accessor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Accessor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Accessor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Accessor::MergeFrom(const Accessor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dst()) {
      mutable_dst()->::generated::proto::expr::Expr::MergeFrom(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Accessor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accessor::CopyFrom(const Accessor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accessor::IsInitialized() const {

  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void Accessor::Swap(Accessor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Accessor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Accessor_descriptor_;
  metadata.reflection = Accessor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TypeAlias::kSrcTypeFieldNumber;
const int TypeAlias::kDstTypeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TypeAlias::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::TypeAlias >, 11, false >
  TypeAlias::ext(kExtFieldNumber, ::generated::proto::expr::TypeAlias::default_instance());
TypeAlias::TypeAlias()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TypeAlias::InitAsDefaultInstance() {
  srctype_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
  dsttype_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
}

TypeAlias::TypeAlias(const TypeAlias& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TypeAlias::SharedCtor() {
  _cached_size_ = 0;
  srctype_ = NULL;
  dsttype_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeAlias::~TypeAlias() {
  SharedDtor();
}

void TypeAlias::SharedDtor() {
  if (this != default_instance_) {
    delete srctype_;
    delete dsttype_;
  }
}

void TypeAlias::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeAlias::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeAlias_descriptor_;
}

const TypeAlias& TypeAlias::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

TypeAlias* TypeAlias::default_instance_ = NULL;

TypeAlias* TypeAlias::New() const {
  return new TypeAlias;
}

void TypeAlias::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_srctype()) {
      if (srctype_ != NULL) srctype_->::generated::proto::type::Type::Clear();
    }
    if (has_dsttype()) {
      if (dsttype_ != NULL) dsttype_->::generated::proto::type::Type::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeAlias::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.type.Type srcType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_srctype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dstType;
        break;
      }

      // optional .generated.proto.type.Type dstType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypeAlias::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.type.Type srcType = 1;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->srctype(), output);
  }

  // optional .generated.proto.type.Type dstType = 2;
  if (has_dsttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dsttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TypeAlias::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.type.Type srcType = 1;
  if (has_srctype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->srctype(), target);
  }

  // optional .generated.proto.type.Type dstType = 2;
  if (has_dsttype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dsttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TypeAlias::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.type.Type srcType = 1;
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->srctype());
    }

    // optional .generated.proto.type.Type dstType = 2;
    if (has_dsttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dsttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeAlias::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeAlias* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeAlias*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeAlias::MergeFrom(const TypeAlias& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srctype()) {
      mutable_srctype()->::generated::proto::type::Type::MergeFrom(from.srctype());
    }
    if (from.has_dsttype()) {
      mutable_dsttype()->::generated::proto::type::Type::MergeFrom(from.dsttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeAlias::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeAlias::CopyFrom(const TypeAlias& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeAlias::IsInitialized() const {

  if (has_srctype()) {
    if (!this->srctype().IsInitialized()) return false;
  }
  if (has_dsttype()) {
    if (!this->dsttype().IsInitialized()) return false;
  }
  return true;
}

void TypeAlias::Swap(TypeAlias* other) {
  if (other != this) {
    std::swap(srctype_, other->srctype_);
    std::swap(dsttype_, other->dsttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeAlias::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeAlias_descriptor_;
  metadata.reflection = TypeAlias_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TypeDef::kSrcTypeFieldNumber;
const int TypeDef::kDstTypeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TypeDef::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::TypeDef >, 11, false >
  TypeDef::ext(kExtFieldNumber, ::generated::proto::expr::TypeDef::default_instance());
TypeDef::TypeDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TypeDef::InitAsDefaultInstance() {
  srctype_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
  dsttype_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
}

TypeDef::TypeDef(const TypeDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TypeDef::SharedCtor() {
  _cached_size_ = 0;
  srctype_ = NULL;
  dsttype_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeDef::~TypeDef() {
  SharedDtor();
}

void TypeDef::SharedDtor() {
  if (this != default_instance_) {
    delete srctype_;
    delete dsttype_;
  }
}

void TypeDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeDef_descriptor_;
}

const TypeDef& TypeDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

TypeDef* TypeDef::default_instance_ = NULL;

TypeDef* TypeDef::New() const {
  return new TypeDef;
}

void TypeDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_srctype()) {
      if (srctype_ != NULL) srctype_->::generated::proto::type::Type::Clear();
    }
    if (has_dsttype()) {
      if (dsttype_ != NULL) dsttype_->::generated::proto::type::Type::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.type.Type srcType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_srctype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dstType;
        break;
      }

      // optional .generated.proto.type.Type dstType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypeDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.type.Type srcType = 1;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->srctype(), output);
  }

  // optional .generated.proto.type.Type dstType = 2;
  if (has_dsttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dsttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TypeDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.type.Type srcType = 1;
  if (has_srctype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->srctype(), target);
  }

  // optional .generated.proto.type.Type dstType = 2;
  if (has_dsttype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dsttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TypeDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.type.Type srcType = 1;
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->srctype());
    }

    // optional .generated.proto.type.Type dstType = 2;
    if (has_dsttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dsttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeDef::MergeFrom(const TypeDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srctype()) {
      mutable_srctype()->::generated::proto::type::Type::MergeFrom(from.srctype());
    }
    if (from.has_dsttype()) {
      mutable_dsttype()->::generated::proto::type::Type::MergeFrom(from.dsttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeDef::CopyFrom(const TypeDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeDef::IsInitialized() const {

  if (has_srctype()) {
    if (!this->srctype().IsInitialized()) return false;
  }
  if (has_dsttype()) {
    if (!this->dsttype().IsInitialized()) return false;
  }
  return true;
}

void TypeDef::Swap(TypeDef* other) {
  if (other != this) {
    std::swap(srctype_, other->srctype_);
    std::swap(dsttype_, other->dsttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeDef_descriptor_;
  metadata.reflection = TypeDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int App::kSrcFieldNumber;
const int App::kArgsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int App::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::App >, 11, false >
  App::ext(kExtFieldNumber, ::generated::proto::expr::App::default_instance());
App::App()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void App::InitAsDefaultInstance() {
  src_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

App::App(const App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void App::SharedCtor() {
  _cached_size_ = 0;
  src_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

App::~App() {
  SharedDtor();
}

void App::SharedDtor() {
  if (this != default_instance_) {
    delete src_;
  }
}

void App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return App_descriptor_;
}

const App& App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

App* App::default_instance_ = NULL;

App* App::New() const {
  return new App;
}

void App::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != NULL) src_->::generated::proto::expr::Expr::Clear();
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // repeated .generated.proto.expr.Expr args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // repeated .generated.proto.expr.Expr args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // repeated .generated.proto.expr.Expr args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

  }
  // repeated .generated.proto.expr.Expr args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::generated::proto::expr::Expr::MergeFrom(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void App::Swap(App* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = App_descriptor_;
  metadata.reflection = App_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppCons_::kArgsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int AppCons_::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::AppCons_ >, 11, false >
  AppCons_::ext(kExtFieldNumber, ::generated::proto::expr::AppCons_::default_instance());
AppCons_::AppCons_()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppCons_::InitAsDefaultInstance() {
}

AppCons_::AppCons_(const AppCons_& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppCons_::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppCons_::~AppCons_() {
  SharedDtor();
}

void AppCons_::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppCons_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppCons_::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCons__descriptor_;
}

const AppCons_& AppCons_::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

AppCons_* AppCons_::default_instance_ = NULL;

AppCons_* AppCons_::New() const {
  return new AppCons_;
}

void AppCons_::Clear() {
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppCons_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.expr.Expr args = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppCons_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.expr.Expr args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppCons_::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.expr.Expr args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppCons_::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.expr.Expr args = 1;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppCons_::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppCons_* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppCons_*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppCons_::MergeFrom(const AppCons_& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppCons_::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppCons_::CopyFrom(const AppCons_& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCons_::IsInitialized() const {

  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void AppCons_::Swap(AppCons_* other) {
  if (other != this) {
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppCons_::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppCons__descriptor_;
  metadata.reflection = AppCons__reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Assignment::kPatFieldNumber;
const int Assignment::kDstFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Assignment::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Assignment >, 11, false >
  Assignment::ext(kExtFieldNumber, ::generated::proto::expr::Assignment::default_instance());
Assignment::Assignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Assignment::InitAsDefaultInstance() {
  pat_ = const_cast< ::generated::proto::pat::Pat*>(&::generated::proto::pat::Pat::default_instance());
  dst_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Assignment::Assignment(const Assignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Assignment::SharedCtor() {
  _cached_size_ = 0;
  pat_ = NULL;
  dst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Assignment::~Assignment() {
  SharedDtor();
}

void Assignment::SharedDtor() {
  if (this != default_instance_) {
    delete pat_;
    delete dst_;
  }
}

void Assignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Assignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Assignment_descriptor_;
}

const Assignment& Assignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Assignment* Assignment::default_instance_ = NULL;

Assignment* Assignment::New() const {
  return new Assignment;
}

void Assignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pat()) {
      if (pat_ != NULL) pat_->::generated::proto::pat::Pat::Clear();
    }
    if (has_dst()) {
      if (dst_ != NULL) dst_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Assignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.pat.Pat pat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // optional .generated.proto.expr.Expr dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Assignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pat(), output);
  }

  // optional .generated.proto.expr.Expr dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Assignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pat(), target);
  }

  // optional .generated.proto.expr.Expr dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Assignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.pat.Pat pat = 1;
    if (has_pat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pat());
    }

    // optional .generated.proto.expr.Expr dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Assignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Assignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Assignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Assignment::MergeFrom(const Assignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pat()) {
      mutable_pat()->::generated::proto::pat::Pat::MergeFrom(from.pat());
    }
    if (from.has_dst()) {
      mutable_dst()->::generated::proto::expr::Expr::MergeFrom(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Assignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Assignment::CopyFrom(const Assignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Assignment::IsInitialized() const {

  if (has_pat()) {
    if (!this->pat().IsInitialized()) return false;
  }
  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void Assignment::Swap(Assignment* other) {
  if (other != this) {
    std::swap(pat_, other->pat_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Assignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Assignment_descriptor_;
  metadata.reflection = Assignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordUpdate::kSrcFieldNumber;
const int RecordUpdate::kSelectorsFieldNumber;
const int RecordUpdate::kExprFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RecordUpdate::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::RecordUpdate >, 11, false >
  RecordUpdate::ext(kExtFieldNumber, ::generated::proto::expr::RecordUpdate::default_instance());
RecordUpdate::RecordUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordUpdate::InitAsDefaultInstance() {
  src_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
  expr_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

RecordUpdate::RecordUpdate(const RecordUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordUpdate::SharedCtor() {
  _cached_size_ = 0;
  src_ = NULL;
  expr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordUpdate::~RecordUpdate() {
  SharedDtor();
}

void RecordUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete src_;
    delete expr_;
  }
}

void RecordUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordUpdate_descriptor_;
}

const RecordUpdate& RecordUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

RecordUpdate* RecordUpdate::default_instance_ = NULL;

RecordUpdate* RecordUpdate::New() const {
  return new RecordUpdate;
}

void RecordUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != NULL) src_->::generated::proto::expr::Expr::Clear();
    }
    if (has_expr()) {
      if (expr_ != NULL) expr_->::generated::proto::expr::Expr::Clear();
    }
  }
  selectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selectors;
        break;
      }

      // repeated string selectors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_selectors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selectors(this->selectors_size() - 1).data(),
            this->selectors(this->selectors_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selectors;
        if (input->ExpectTag(26)) goto parse_expr;
        break;
      }

      // optional .generated.proto.expr.Expr expr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // repeated string selectors = 2;
  for (int i = 0; i < this->selectors_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->selectors(i).data(), this->selectors(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->selectors(i), output);
  }

  // optional .generated.proto.expr.Expr expr = 3;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->expr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // repeated string selectors = 2;
  for (int i = 0; i < this->selectors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selectors(i).data(), this->selectors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->selectors(i), target);
  }

  // optional .generated.proto.expr.Expr expr = 3;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->expr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // optional .generated.proto.expr.Expr expr = 3;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

  }
  // repeated string selectors = 2;
  total_size += 1 * this->selectors_size();
  for (int i = 0; i < this->selectors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->selectors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordUpdate::MergeFrom(const RecordUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  selectors_.MergeFrom(from.selectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::generated::proto::expr::Expr::MergeFrom(from.src());
    }
    if (from.has_expr()) {
      mutable_expr()->::generated::proto::expr::Expr::MergeFrom(from.expr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordUpdate::CopyFrom(const RecordUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordUpdate::IsInitialized() const {

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  if (has_expr()) {
    if (!this->expr().IsInitialized()) return false;
  }
  return true;
}

void RecordUpdate::Swap(RecordUpdate* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    selectors_.Swap(&other->selectors_);
    std::swap(expr_, other->expr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordUpdate_descriptor_;
  metadata.reflection = RecordUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kClsFieldNumber;
const int Data::kConsFieldNumber;
const int Data::kClassesFieldNumber;
const int Data::kMethodsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Data::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Data >, 11, false >
  Data::ext(kExtFieldNumber, ::generated::proto::expr::Data::default_instance());
Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
  cls_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  cls_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
    delete cls_;
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cls()) {
      if (cls_ != NULL) cls_->::generated::proto::type::Type::Clear();
    }
  }
  cons_.Clear();
  classes_.Clear();
  methods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.type.Type cls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cons;
        break;
      }

      // repeated .generated.proto.expr.Expr cons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cons;
        if (input->ExpectTag(26)) goto parse_classes;
        break;
      }

      // repeated .generated.proto.expr.Expr classes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_classes;
        if (input->ExpectTag(34)) goto parse_methods;
        break;
      }

      // repeated .generated.proto.expr.Expr methods = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_methods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_methods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_methods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.type.Type cls = 1;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cls(), output);
  }

  // repeated .generated.proto.expr.Expr cons = 2;
  for (int i = 0; i < this->cons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cons(i), output);
  }

  // repeated .generated.proto.expr.Expr classes = 3;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->classes(i), output);
  }

  // repeated .generated.proto.expr.Expr methods = 4;
  for (int i = 0; i < this->methods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->methods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.type.Type cls = 1;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cls(), target);
  }

  // repeated .generated.proto.expr.Expr cons = 2;
  for (int i = 0; i < this->cons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cons(i), target);
  }

  // repeated .generated.proto.expr.Expr classes = 3;
  for (int i = 0; i < this->classes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->classes(i), target);
  }

  // repeated .generated.proto.expr.Expr methods = 4;
  for (int i = 0; i < this->methods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->methods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.type.Type cls = 1;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cls());
    }

  }
  // repeated .generated.proto.expr.Expr cons = 2;
  total_size += 1 * this->cons_size();
  for (int i = 0; i < this->cons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cons(i));
  }

  // repeated .generated.proto.expr.Expr classes = 3;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }

  // repeated .generated.proto.expr.Expr methods = 4;
  total_size += 1 * this->methods_size();
  for (int i = 0; i < this->methods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->methods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  cons_.MergeFrom(from.cons_);
  classes_.MergeFrom(from.classes_);
  methods_.MergeFrom(from.methods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls()) {
      mutable_cls()->::generated::proto::type::Type::MergeFrom(from.cls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  if (has_cls()) {
    if (!this->cls().IsInitialized()) return false;
  }
  for (int i = 0; i < cons_size(); i++) {
    if (!this->cons(i).IsInitialized()) return false;
  }
  for (int i = 0; i < classes_size(); i++) {
    if (!this->classes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < methods_size(); i++) {
    if (!this->methods(i).IsInitialized()) return false;
  }
  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(cls_, other->cls_);
    cons_.Swap(&other->cons_);
    classes_.Swap(&other->classes_);
    methods_.Swap(&other->methods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConD::kNameFieldNumber;
const int ConD::kFieldsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ConD::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::ConD >, 11, false >
  ConD::ext(kExtFieldNumber, ::generated::proto::expr::ConD::default_instance());
ConD::ConD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConD::InitAsDefaultInstance() {
}

ConD::ConD(const ConD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConD::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConD::~ConD() {
  SharedDtor();
}

void ConD::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ConD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConD_descriptor_;
}

const ConD& ConD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

ConD* ConD::default_instance_ = NULL;

ConD* ConD::New() const {
  return new ConD;
}

void ConD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fields;
        break;
      }

      // repeated .generated.proto.expr.Expr fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fields;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .generated.proto.expr.Expr fields = 2;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .generated.proto.expr.Expr fields = 2;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .generated.proto.expr.Expr fields = 2;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConD::MergeFrom(const ConD& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConD::CopyFrom(const ConD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConD::IsInitialized() const {

  for (int i = 0; i < fields_size(); i++) {
    if (!this->fields(i).IsInitialized()) return false;
  }
  return true;
}

void ConD::Swap(ConD* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConD_descriptor_;
  metadata.reflection = ConD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Con_::kNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Con_::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Con_ >, 11, false >
  Con_::ext(kExtFieldNumber, ::generated::proto::expr::Con_::default_instance());
Con_::Con_()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Con_::InitAsDefaultInstance() {
}

Con_::Con_(const Con_& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Con_::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Con_::~Con_() {
  SharedDtor();
}

void Con_::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Con_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Con_::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Con__descriptor_;
}

const Con_& Con_::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Con_* Con_::default_instance_ = NULL;

Con_* Con_::New() const {
  return new Con_;
}

void Con_::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Con_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Con_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Con_::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Con_::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Con_::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Con_* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Con_*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Con_::MergeFrom(const Con_& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Con_::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Con_::CopyFrom(const Con_& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Con_::IsInitialized() const {

  return true;
}

void Con_::Swap(Con_* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Con_::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Con__descriptor_;
  metadata.reflection = Con__reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Condition::kCondFieldNumber;
const int Condition::kSuccessFieldNumber;
const int Condition::kFailureFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Condition::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Condition >, 11, false >
  Condition::ext(kExtFieldNumber, ::generated::proto::expr::Condition::default_instance());
Condition::Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Condition::InitAsDefaultInstance() {
  cond_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Condition::Condition(const Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Condition::SharedCtor() {
  _cached_size_ = 0;
  cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Condition::~Condition() {
  SharedDtor();
}

void Condition::SharedDtor() {
  if (this != default_instance_) {
    delete cond_;
  }
}

void Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Condition_descriptor_;
}

const Condition& Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Condition* Condition::default_instance_ = NULL;

Condition* Condition::New() const {
  return new Condition;
}

void Condition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cond()) {
      if (cond_ != NULL) cond_->::generated::proto::expr::Expr::Clear();
    }
  }
  success_.Clear();
  failure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr cond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_success;
        break;
      }

      // repeated .generated.proto.expr.Expr success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_success;
        if (input->ExpectTag(26)) goto parse_failure;
        break;
      }

      // repeated .generated.proto.expr.Expr failure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_failure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_failure;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr cond = 1;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cond(), output);
  }

  // repeated .generated.proto.expr.Expr success = 2;
  for (int i = 0; i < this->success_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->success(i), output);
  }

  // repeated .generated.proto.expr.Expr failure = 3;
  for (int i = 0; i < this->failure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->failure(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr cond = 1;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cond(), target);
  }

  // repeated .generated.proto.expr.Expr success = 2;
  for (int i = 0; i < this->success_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->success(i), target);
  }

  // repeated .generated.proto.expr.Expr failure = 3;
  for (int i = 0; i < this->failure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->failure(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Condition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr cond = 1;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cond());
    }

  }
  // repeated .generated.proto.expr.Expr success = 2;
  total_size += 1 * this->success_size();
  for (int i = 0; i < this->success_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->success(i));
  }

  // repeated .generated.proto.expr.Expr failure = 3;
  total_size += 1 * this->failure_size();
  for (int i = 0; i < this->failure_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->failure(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  success_.MergeFrom(from.success_);
  failure_.MergeFrom(from.failure_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cond()) {
      mutable_cond()->::generated::proto::expr::Expr::MergeFrom(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {

  if (has_cond()) {
    if (!this->cond().IsInitialized()) return false;
  }
  for (int i = 0; i < success_size(); i++) {
    if (!this->success(i).IsInitialized()) return false;
  }
  for (int i = 0; i < failure_size(); i++) {
    if (!this->failure(i).IsInitialized()) return false;
  }
  return true;
}

void Condition::Swap(Condition* other) {
  if (other != this) {
    std::swap(cond_, other->cond_);
    success_.Swap(&other->success_);
    failure_.Swap(&other->failure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Condition_descriptor_;
  metadata.reflection = Condition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Function::kPathFieldNumber;
const int Function::kNameFieldNumber;
const int Function::kInputsFieldNumber;
const int Function::kOutputFieldNumber;
const int Function::kBodyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Function::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Function >, 11, false >
  Function::ext(kExtFieldNumber, ::generated::proto::expr::Function::default_instance());
Function::Function()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Function::InitAsDefaultInstance() {
  output_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
}

Function::Function(const Function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Function::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  output_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Function::~Function() {
  SharedDtor();
}

void Function::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete output_;
  }
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_descriptor_;
}

const Function& Function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Function* Function::default_instance_ = NULL;

Function* Function::New() const {
  return new Function;
}

void Function::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_output()) {
      if (output_ != NULL) output_->::generated::proto::type::Type::Clear();
    }
  }
  path_.Clear();
  inputs_.Clear();
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(this->path_size() - 1).data(),
            this->path(this->path_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputs;
        break;
      }

      // repeated .generated.proto.expr.Expr inputs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputs;
        if (input->ExpectTag(34)) goto parse_output;
        break;
      }

      // optional .generated.proto.type.Type output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body;
        break;
      }

      // repeated .generated.proto.expr.Expr body = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .generated.proto.expr.Expr inputs = 3;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(i), output);
  }

  // optional .generated.proto.type.Type output = 4;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->output(), output);
  }

  // repeated .generated.proto.expr.Expr body = 5;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->body(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->path(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .generated.proto.expr.Expr inputs = 3;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->inputs(i), target);
  }

  // optional .generated.proto.type.Type output = 4;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->output(), target);
  }

  // repeated .generated.proto.expr.Expr body = 5;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->body(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Function::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .generated.proto.type.Type output = 4;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }

  }
  // repeated string path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }

  // repeated .generated.proto.expr.Expr inputs = 3;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .generated.proto.expr.Expr body = 5;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  inputs_.MergeFrom(from.inputs_);
  body_.MergeFrom(from.body_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_output()) {
      mutable_output()->::generated::proto::type::Type::MergeFrom(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {

  for (int i = 0; i < inputs_size(); i++) {
    if (!this->inputs(i).IsInitialized()) return false;
  }
  if (has_output()) {
    if (!this->output().IsInitialized()) return false;
  }
  for (int i = 0; i < body_size(); i++) {
    if (!this->body(i).IsInitialized()) return false;
  }
  return true;
}

void Function::Swap(Function* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(name_, other->name_);
    inputs_.Swap(&other->inputs_);
    std::swap(output_, other->output_);
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_descriptor_;
  metadata.reflection = Function_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lambda::kInputsFieldNumber;
const int Lambda::kOutputFieldNumber;
const int Lambda::kBodyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Lambda::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Lambda >, 11, false >
  Lambda::ext(kExtFieldNumber, ::generated::proto::expr::Lambda::default_instance());
Lambda::Lambda()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lambda::InitAsDefaultInstance() {
  output_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
}

Lambda::Lambda(const Lambda& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lambda::SharedCtor() {
  _cached_size_ = 0;
  output_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lambda::~Lambda() {
  SharedDtor();
}

void Lambda::SharedDtor() {
  if (this != default_instance_) {
    delete output_;
  }
}

void Lambda::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lambda::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lambda_descriptor_;
}

const Lambda& Lambda::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Lambda* Lambda::default_instance_ = NULL;

Lambda* Lambda::New() const {
  return new Lambda;
}

void Lambda::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_output()) {
      if (output_ != NULL) output_->::generated::proto::type::Type::Clear();
    }
  }
  inputs_.Clear();
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lambda::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.expr.Expr inputs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_inputs;
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // optional .generated.proto.type.Type output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // repeated .generated.proto.expr.Expr body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lambda::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.expr.Expr inputs = 1;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inputs(i), output);
  }

  // optional .generated.proto.type.Type output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->output(), output);
  }

  // repeated .generated.proto.expr.Expr body = 3;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->body(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lambda::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.expr.Expr inputs = 1;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inputs(i), target);
  }

  // optional .generated.proto.type.Type output = 2;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->output(), target);
  }

  // repeated .generated.proto.expr.Expr body = 3;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->body(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lambda::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .generated.proto.type.Type output = 2;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }

  }
  // repeated .generated.proto.expr.Expr inputs = 1;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .generated.proto.expr.Expr body = 3;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lambda::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lambda* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lambda*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lambda::MergeFrom(const Lambda& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputs_.MergeFrom(from.inputs_);
  body_.MergeFrom(from.body_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_output()) {
      mutable_output()->::generated::proto::type::Type::MergeFrom(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lambda::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lambda::CopyFrom(const Lambda& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lambda::IsInitialized() const {

  for (int i = 0; i < inputs_size(); i++) {
    if (!this->inputs(i).IsInitialized()) return false;
  }
  if (has_output()) {
    if (!this->output().IsInitialized()) return false;
  }
  for (int i = 0; i < body_size(); i++) {
    if (!this->body(i).IsInitialized()) return false;
  }
  return true;
}

void Lambda::Swap(Lambda* other) {
  if (other != this) {
    inputs_.Swap(&other->inputs_);
    std::swap(output_, other->output_);
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lambda::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lambda_descriptor_;
  metadata.reflection = Lambda_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Grouped::kExprFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Grouped::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Grouped >, 11, false >
  Grouped::ext(kExtFieldNumber, ::generated::proto::expr::Grouped::default_instance());
Grouped::Grouped()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Grouped::InitAsDefaultInstance() {
  expr_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Grouped::Grouped(const Grouped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Grouped::SharedCtor() {
  _cached_size_ = 0;
  expr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Grouped::~Grouped() {
  SharedDtor();
}

void Grouped::SharedDtor() {
  if (this != default_instance_) {
    delete expr_;
  }
}

void Grouped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grouped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grouped_descriptor_;
}

const Grouped& Grouped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Grouped* Grouped::default_instance_ = NULL;

Grouped* Grouped::New() const {
  return new Grouped;
}

void Grouped::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expr()) {
      if (expr_ != NULL) expr_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Grouped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr expr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Grouped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Grouped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Grouped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr expr = 1;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grouped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Grouped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Grouped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grouped::MergeFrom(const Grouped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expr()) {
      mutable_expr()->::generated::proto::expr::Expr::MergeFrom(from.expr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Grouped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grouped::CopyFrom(const Grouped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grouped::IsInitialized() const {

  if (has_expr()) {
    if (!this->expr().IsInitialized()) return false;
  }
  return true;
}

void Grouped::Swap(Grouped* other) {
  if (other != this) {
    std::swap(expr_, other->expr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Grouped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grouped_descriptor_;
  metadata.reflection = Grouped_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Import::kPathFieldNumber;
const int Import::kTargetFieldNumber;
const int Import::kRenameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Import::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Import >, 11, false >
  Import::ext(kExtFieldNumber, ::generated::proto::expr::Import::default_instance());
Import::Import()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Import::InitAsDefaultInstance() {
  target_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Import::Import(const Import& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Import::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  rename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Import::~Import() {
  SharedDtor();
}

void Import::SharedDtor() {
  if (rename_ != &::google::protobuf::internal::kEmptyString) {
    delete rename_;
  }
  if (this != default_instance_) {
    delete target_;
  }
}

void Import::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Import::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Import_descriptor_;
}

const Import& Import::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Import* Import::default_instance_ = NULL;

Import* Import::New() const {
  return new Import;
}

void Import::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::generated::proto::expr::Expr::Clear();
    }
    if (has_rename()) {
      if (rename_ != &::google::protobuf::internal::kEmptyString) {
        rename_->clear();
      }
    }
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Import::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(this->path_size() - 1).data(),
            this->path(this->path_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional .generated.proto.expr.Expr target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rename;
        break;
      }

      // optional string rename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rename().data(), this->rename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Import::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(i), output);
  }

  // optional .generated.proto.expr.Expr target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(), output);
  }

  // optional string rename = 3;
  if (has_rename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rename().data(), this->rename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Import::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->path(i), target);
  }

  // optional .generated.proto.expr.Expr target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }

  // optional string rename = 3;
  if (has_rename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rename().data(), this->rename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Import::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .generated.proto.expr.Expr target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional string rename = 3;
    if (has_rename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rename());
    }

  }
  // repeated string path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Import::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Import* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Import*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Import::MergeFrom(const Import& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_target()) {
      mutable_target()->::generated::proto::expr::Expr::MergeFrom(from.target());
    }
    if (from.has_rename()) {
      set_rename(from.rename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Import::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Import::CopyFrom(const Import& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Import::IsInitialized() const {

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void Import::Swap(Import* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(target_, other->target_);
    std::swap(rename_, other->rename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Import::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Import_descriptor_;
  metadata.reflection = Import_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImportNative::kSegmentsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ImportNative::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::ImportNative >, 11, false >
  ImportNative::ext(kExtFieldNumber, ::generated::proto::expr::ImportNative::default_instance());
ImportNative::ImportNative()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImportNative::InitAsDefaultInstance() {
}

ImportNative::ImportNative(const ImportNative& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImportNative::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportNative::~ImportNative() {
  SharedDtor();
}

void ImportNative::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImportNative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportNative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportNative_descriptor_;
}

const ImportNative& ImportNative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

ImportNative* ImportNative::default_instance_ = NULL;

ImportNative* ImportNative::New() const {
  return new ImportNative;
}

void ImportNative::Clear() {
  segments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImportNative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.expr.Expr segments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_segments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImportNative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.expr.Expr segments = 1;
  for (int i = 0; i < this->segments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImportNative::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.expr.Expr segments = 1;
  for (int i = 0; i < this->segments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->segments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImportNative::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.expr.Expr segments = 1;
  total_size += 1 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportNative::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImportNative* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImportNative*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImportNative::MergeFrom(const ImportNative& from) {
  GOOGLE_CHECK_NE(&from, this);
  segments_.MergeFrom(from.segments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImportNative::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportNative::CopyFrom(const ImportNative& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportNative::IsInitialized() const {

  for (int i = 0; i < segments_size(); i++) {
    if (!this->segments(i).IsInitialized()) return false;
  }
  return true;
}

void ImportNative::Swap(ImportNative* other) {
  if (other != this) {
    segments_.Swap(&other->segments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImportNative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportNative_descriptor_;
  metadata.reflection = ImportNative_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Infix::kNameFieldNumber;
const int Infix::kSrcFieldNumber;
const int Infix::kDstFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Infix::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Infix >, 11, false >
  Infix::ext(kExtFieldNumber, ::generated::proto::expr::Infix::default_instance());
Infix::Infix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Infix::InitAsDefaultInstance() {
  src_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
  dst_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Infix::Infix(const Infix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Infix::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = NULL;
  dst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Infix::~Infix() {
  SharedDtor();
}

void Infix::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete src_;
    delete dst_;
  }
}

void Infix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Infix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Infix_descriptor_;
}

const Infix& Infix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Infix* Infix::default_instance_ = NULL;

Infix* Infix::New() const {
  return new Infix;
}

void Infix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_src()) {
      if (src_ != NULL) src_->::generated::proto::expr::Expr::Clear();
    }
    if (has_dst()) {
      if (dst_ != NULL) dst_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Infix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src;
        break;
      }

      // optional .generated.proto.expr.Expr src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dst;
        break;
      }

      // optional .generated.proto.expr.Expr dst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Infix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .generated.proto.expr.Expr src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->src(), output);
  }

  // optional .generated.proto.expr.Expr dst = 3;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Infix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .generated.proto.expr.Expr src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->src(), target);
  }

  // optional .generated.proto.expr.Expr dst = 3;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Infix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .generated.proto.expr.Expr src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // optional .generated.proto.expr.Expr dst = 3;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Infix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Infix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Infix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Infix::MergeFrom(const Infix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_src()) {
      mutable_src()->::generated::proto::expr::Expr::MergeFrom(from.src());
    }
    if (from.has_dst()) {
      mutable_dst()->::generated::proto::expr::Expr::MergeFrom(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Infix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Infix::CopyFrom(const Infix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Infix::IsInitialized() const {

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void Infix::Swap(Infix* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Infix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Infix_descriptor_;
  metadata.reflection = Infix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int List::kItemsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int List::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::List >, 11, false >
  List::ext(kExtFieldNumber, ::generated::proto::expr::List::default_instance());
List::List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void List::InitAsDefaultInstance() {
}

List::List(const List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

List::~List() {
  SharedDtor();
}

void List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return List_descriptor_;
}

const List& List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

List* List::default_instance_ = NULL;

List* List::New() const {
  return new List;
}

void List::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.expr.Expr items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.expr.Expr items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.expr.Expr items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int List::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.expr.Expr items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void List::MergeFrom(const List& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void List::CopyFrom(const List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void List::Swap(List* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = List_descriptor_;
  metadata.reflection = List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lit::kLvalueFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Lit::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Lit >, 11, false >
  Lit::ext(kExtFieldNumber, ::generated::proto::expr::Lit::default_instance());
Lit::Lit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lit::InitAsDefaultInstance() {
  lvalue_ = const_cast< ::generated::proto::lit::Lit*>(&::generated::proto::lit::Lit::default_instance());
}

Lit::Lit(const Lit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lit::SharedCtor() {
  _cached_size_ = 0;
  lvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lit::~Lit() {
  SharedDtor();
}

void Lit::SharedDtor() {
  if (this != default_instance_) {
    delete lvalue_;
  }
}

void Lit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lit_descriptor_;
}

const Lit& Lit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Lit* Lit::default_instance_ = NULL;

Lit* Lit::New() const {
  return new Lit;
}

void Lit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lvalue()) {
      if (lvalue_ != NULL) lvalue_->::generated::proto::lit::Lit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.lit.Lit lvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.lit.Lit lvalue = 1;
  if (has_lvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.lit.Lit lvalue = 1;
  if (has_lvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.lit.Lit lvalue = 1;
    if (has_lvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lit::MergeFrom(const Lit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvalue()) {
      mutable_lvalue()->::generated::proto::lit::Lit::MergeFrom(from.lvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lit::CopyFrom(const Lit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lit::IsInitialized() const {

  if (has_lvalue()) {
    if (!this->lvalue().IsInitialized()) return false;
  }
  return true;
}

void Lit::Swap(Lit* other) {
  if (other != this) {
    std::swap(lvalue_, other->lvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lit_descriptor_;
  metadata.reflection = Lit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tuple::kItemsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Tuple::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Tuple >, 11, false >
  Tuple::ext(kExtFieldNumber, ::generated::proto::expr::Tuple::default_instance());
Tuple::Tuple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tuple::InitAsDefaultInstance() {
}

Tuple::Tuple(const Tuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tuple::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tuple::~Tuple() {
  SharedDtor();
}

void Tuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuple_descriptor_;
}

const Tuple& Tuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Tuple* Tuple::default_instance_ = NULL;

Tuple* Tuple::New() const {
  return new Tuple;
}

void Tuple::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.expr.Expr items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.expr.Expr items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.expr.Expr items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tuple::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.expr.Expr items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Tuple::Swap(Tuple* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tuple_descriptor_;
  metadata.reflection = Tuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Typed::kClsFieldNumber;
const int Typed::kExprFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Typed::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Typed >, 11, false >
  Typed::ext(kExtFieldNumber, ::generated::proto::expr::Typed::default_instance());
Typed::Typed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Typed::InitAsDefaultInstance() {
  cls_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
  expr_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Typed::Typed(const Typed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Typed::SharedCtor() {
  _cached_size_ = 0;
  cls_ = NULL;
  expr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Typed::~Typed() {
  SharedDtor();
}

void Typed::SharedDtor() {
  if (this != default_instance_) {
    delete cls_;
    delete expr_;
  }
}

void Typed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Typed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Typed_descriptor_;
}

const Typed& Typed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Typed* Typed::default_instance_ = NULL;

Typed* Typed::New() const {
  return new Typed;
}

void Typed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cls()) {
      if (cls_ != NULL) cls_->::generated::proto::type::Type::Clear();
    }
    if (has_expr()) {
      if (expr_ != NULL) expr_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Typed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.type.Type cls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expr;
        break;
      }

      // optional .generated.proto.expr.Expr expr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Typed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.type.Type cls = 1;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cls(), output);
  }

  // optional .generated.proto.expr.Expr expr = 2;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Typed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.type.Type cls = 1;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cls(), target);
  }

  // optional .generated.proto.expr.Expr expr = 2;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Typed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.type.Type cls = 1;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cls());
    }

    // optional .generated.proto.expr.Expr expr = 2;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Typed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Typed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Typed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Typed::MergeFrom(const Typed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls()) {
      mutable_cls()->::generated::proto::type::Type::MergeFrom(from.cls());
    }
    if (from.has_expr()) {
      mutable_expr()->::generated::proto::expr::Expr::MergeFrom(from.expr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Typed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Typed::CopyFrom(const Typed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Typed::IsInitialized() const {

  if (has_cls()) {
    if (!this->cls().IsInitialized()) return false;
  }
  if (has_expr()) {
    if (!this->expr().IsInitialized()) return false;
  }
  return true;
}

void Typed::Swap(Typed* other) {
  if (other != this) {
    std::swap(cls_, other->cls_);
    std::swap(expr_, other->expr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Typed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Typed_descriptor_;
  metadata.reflection = Typed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Var::kNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Var::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Var >, 11, false >
  Var::ext(kExtFieldNumber, ::generated::proto::expr::Var::default_instance());
Var::Var()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Var::InitAsDefaultInstance() {
}

Var::Var(const Var& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Var::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Var::~Var() {
  SharedDtor();
}

void Var::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Var::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Var::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Var_descriptor_;
}

const Var& Var::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Var* Var::default_instance_ = NULL;

Var* Var::New() const {
  return new Var;
}

void Var::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Var::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Var::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Var::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Var::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Var::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Var* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Var*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Var::MergeFrom(const Var& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Var::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Var::CopyFrom(const Var& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Var::IsInitialized() const {

  return true;
}

void Var::Swap(Var* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Var::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Var_descriptor_;
  metadata.reflection = Var_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Wildcard::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Wildcard >, 11, false >
  Wildcard::ext(kExtFieldNumber, ::generated::proto::expr::Wildcard::default_instance());
Wildcard::Wildcard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Wildcard::InitAsDefaultInstance() {
}

Wildcard::Wildcard(const Wildcard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Wildcard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wildcard::~Wildcard() {
  SharedDtor();
}

void Wildcard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Wildcard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wildcard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wildcard_descriptor_;
}

const Wildcard& Wildcard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Wildcard* Wildcard::default_instance_ = NULL;

Wildcard* Wildcard::New() const {
  return new Wildcard;
}

void Wildcard::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wildcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Wildcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Wildcard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Wildcard::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wildcard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wildcard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wildcard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wildcard::MergeFrom(const Wildcard& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wildcard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wildcard::CopyFrom(const Wildcard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wildcard::IsInitialized() const {

  return true;
}

void Wildcard::Swap(Wildcard* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wildcard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wildcard_descriptor_;
  metadata.reflection = Wildcard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeFromTo::kStartFieldNumber;
const int RangeFromTo::kEndFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RangeFromTo::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::RangeFromTo >, 11, false >
  RangeFromTo::ext(kExtFieldNumber, ::generated::proto::expr::RangeFromTo::default_instance());
RangeFromTo::RangeFromTo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeFromTo::InitAsDefaultInstance() {
  start_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
  end_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

RangeFromTo::RangeFromTo(const RangeFromTo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeFromTo::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeFromTo::~RangeFromTo() {
  SharedDtor();
}

void RangeFromTo::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void RangeFromTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeFromTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeFromTo_descriptor_;
}

const RangeFromTo& RangeFromTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

RangeFromTo* RangeFromTo::default_instance_ = NULL;

RangeFromTo* RangeFromTo::New() const {
  return new RangeFromTo;
}

void RangeFromTo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::generated::proto::expr::Expr::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeFromTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional .generated.proto.expr.Expr end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeFromTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // optional .generated.proto.expr.Expr end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeFromTo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // optional .generated.proto.expr.Expr end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeFromTo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .generated.proto.expr.Expr end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeFromTo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeFromTo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeFromTo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeFromTo::MergeFrom(const RangeFromTo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::generated::proto::expr::Expr::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::generated::proto::expr::Expr::MergeFrom(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeFromTo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeFromTo::CopyFrom(const RangeFromTo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFromTo::IsInitialized() const {

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void RangeFromTo::Swap(RangeFromTo* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeFromTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeFromTo_descriptor_;
  metadata.reflection = RangeFromTo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeFrom::kStartFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RangeFrom::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::RangeFrom >, 11, false >
  RangeFrom::ext(kExtFieldNumber, ::generated::proto::expr::RangeFrom::default_instance());
RangeFrom::RangeFrom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeFrom::InitAsDefaultInstance() {
  start_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

RangeFrom::RangeFrom(const RangeFrom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeFrom::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeFrom::~RangeFrom() {
  SharedDtor();
}

void RangeFrom::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
  }
}

void RangeFrom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeFrom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeFrom_descriptor_;
}

const RangeFrom& RangeFrom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

RangeFrom* RangeFrom::default_instance_ = NULL;

RangeFrom* RangeFrom::New() const {
  return new RangeFrom;
}

void RangeFrom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeFrom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeFrom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeFrom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeFrom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeFrom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeFrom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeFrom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeFrom::MergeFrom(const RangeFrom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::generated::proto::expr::Expr::MergeFrom(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeFrom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeFrom::CopyFrom(const RangeFrom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFrom::IsInitialized() const {

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  return true;
}

void RangeFrom::Swap(RangeFrom* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeFrom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeFrom_descriptor_;
  metadata.reflection = RangeFrom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Field::kNameFieldNumber;
const int Field::kClsFieldNumber;
const int Field::kValueFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Field::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Field >, 11, false >
  Field::ext(kExtFieldNumber, ::generated::proto::expr::Field::default_instance());
Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Field::InitAsDefaultInstance() {
  cls_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
  value_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Field::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cls_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  SharedDtor();
}

void Field::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete cls_;
    delete value_;
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cls()) {
      if (cls_ != NULL) cls_->::generated::proto::type::Type::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cls;
        break;
      }

      // optional .generated.proto.type.Type cls = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .generated.proto.expr.Expr value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .generated.proto.type.Type cls = 2;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cls(), output);
  }

  // optional .generated.proto.expr.Expr value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .generated.proto.type.Type cls = 2;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cls(), target);
  }

  // optional .generated.proto.expr.Expr value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .generated.proto.type.Type cls = 2;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cls());
    }

    // optional .generated.proto.expr.Expr value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cls()) {
      mutable_cls()->::generated::proto::type::Type::MergeFrom(from.cls());
    }
    if (from.has_value()) {
      mutable_value()->::generated::proto::expr::Expr::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  if (has_cls()) {
    if (!this->cls().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(cls_, other->cls_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Arg::kPatFieldNumber;
const int Arg::kValueFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Arg::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Arg >, 11, false >
  Arg::ext(kExtFieldNumber, ::generated::proto::expr::Arg::default_instance());
Arg::Arg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arg::InitAsDefaultInstance() {
  pat_ = const_cast< ::generated::proto::pat::Pat*>(&::generated::proto::pat::Pat::default_instance());
  value_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Arg::Arg(const Arg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arg::SharedCtor() {
  _cached_size_ = 0;
  pat_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arg::~Arg() {
  SharedDtor();
}

void Arg::SharedDtor() {
  if (this != default_instance_) {
    delete pat_;
    delete value_;
  }
}

void Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arg_descriptor_;
}

const Arg& Arg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Arg* Arg::default_instance_ = NULL;

Arg* Arg::New() const {
  return new Arg;
}

void Arg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pat()) {
      if (pat_ != NULL) pat_->::generated::proto::pat::Pat::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.pat.Pat pat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .generated.proto.expr.Expr value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pat(), output);
  }

  // optional .generated.proto.expr.Expr value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pat(), target);
  }

  // optional .generated.proto.expr.Expr value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.pat.Pat pat = 1;
    if (has_pat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pat());
    }

    // optional .generated.proto.expr.Expr value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arg::MergeFrom(const Arg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pat()) {
      mutable_pat()->::generated::proto::pat::Pat::MergeFrom(from.pat());
    }
    if (from.has_value()) {
      mutable_value()->::generated::proto::expr::Expr::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arg::CopyFrom(const Arg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {

  if (has_pat()) {
    if (!this->pat().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Arg::Swap(Arg* other) {
  if (other != this) {
    std::swap(pat_, other->pat_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arg_descriptor_;
  metadata.reflection = Arg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Native::kSegmentsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Native::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Native >, 11, false >
  Native::ext(kExtFieldNumber, ::generated::proto::expr::Native::default_instance());
Native::Native()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Native::InitAsDefaultInstance() {
}

Native::Native(const Native& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Native::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Native::~Native() {
  SharedDtor();
}

void Native::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Native_descriptor_;
}

const Native& Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Native* Native::default_instance_ = NULL;

Native* Native::New() const {
  return new Native;
}

void Native::Clear() {
  segments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.expr.Expr segments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_segments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.expr.Expr segments = 1;
  for (int i = 0; i < this->segments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Native::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.expr.Expr segments = 1;
  for (int i = 0; i < this->segments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->segments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Native::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.expr.Expr segments = 1;
  total_size += 1 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Native::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Native* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Native*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Native::MergeFrom(const Native& from) {
  GOOGLE_CHECK_NE(&from, this);
  segments_.MergeFrom(from.segments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Native::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Native::CopyFrom(const Native& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Native::IsInitialized() const {

  for (int i = 0; i < segments_size(); i++) {
    if (!this->segments(i).IsInitialized()) return false;
  }
  return true;
}

void Native::Swap(Native* other) {
  if (other != this) {
    segments_.Swap(&other->segments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Native_descriptor_;
  metadata.reflection = Native_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NativeCode::kCodeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NativeCode::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::NativeCode >, 11, false >
  NativeCode::ext(kExtFieldNumber, ::generated::proto::expr::NativeCode::default_instance());
NativeCode::NativeCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NativeCode::InitAsDefaultInstance() {
}

NativeCode::NativeCode(const NativeCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NativeCode::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeCode::~NativeCode() {
  SharedDtor();
}

void NativeCode::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void NativeCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeCode_descriptor_;
}

const NativeCode& NativeCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

NativeCode* NativeCode::default_instance_ = NULL;

NativeCode* NativeCode::New() const {
  return new NativeCode;
}

void NativeCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NativeCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NativeCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NativeCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeCode::MergeFrom(const NativeCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeCode::CopyFrom(const NativeCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeCode::IsInitialized() const {

  return true;
}

void NativeCode::Swap(NativeCode* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NativeCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeCode_descriptor_;
  metadata.reflection = NativeCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NativeVar::kNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NativeVar::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::NativeVar >, 11, false >
  NativeVar::ext(kExtFieldNumber, ::generated::proto::expr::NativeVar::default_instance());
NativeVar::NativeVar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NativeVar::InitAsDefaultInstance() {
}

NativeVar::NativeVar(const NativeVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NativeVar::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeVar::~NativeVar() {
  SharedDtor();
}

void NativeVar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NativeVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeVar_descriptor_;
}

const NativeVar& NativeVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

NativeVar* NativeVar::default_instance_ = NULL;

NativeVar* NativeVar::New() const {
  return new NativeVar;
}

void NativeVar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NativeVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NativeVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NativeVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NativeVar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NativeVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NativeVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NativeVar::MergeFrom(const NativeVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NativeVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeVar::CopyFrom(const NativeVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeVar::IsInitialized() const {

  return true;
}

void NativeVar::Swap(NativeVar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NativeVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeVar_descriptor_;
  metadata.reflection = NativeVar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ref::kDstFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Ref::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Ref >, 11, false >
  Ref::ext(kExtFieldNumber, ::generated::proto::expr::Ref::default_instance());
Ref::Ref()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ref::InitAsDefaultInstance() {
  dst_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Ref::Ref(const Ref& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ref::SharedCtor() {
  _cached_size_ = 0;
  dst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ref::~Ref() {
  SharedDtor();
}

void Ref::SharedDtor() {
  if (this != default_instance_) {
    delete dst_;
  }
}

void Ref::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ref::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ref_descriptor_;
}

const Ref& Ref::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Ref* Ref::default_instance_ = NULL;

Ref* Ref::New() const {
  return new Ref;
}

void Ref::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dst()) {
      if (dst_ != NULL) dst_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ref::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ref::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ref::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr dst = 1;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ref::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr dst = 1;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ref::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ref* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ref*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ref::MergeFrom(const Ref& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst()) {
      mutable_dst()->::generated::proto::expr::Expr::MergeFrom(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ref::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ref::CopyFrom(const Ref& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ref::IsInitialized() const {

  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void Ref::Swap(Ref* other) {
  if (other != this) {
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ref::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ref_descriptor_;
  metadata.reflection = Ref_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefType::kTypenameFieldNumber;
const int RefType::kNameFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RefType::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::RefType >, 11, false >
  RefType::ext(kExtFieldNumber, ::generated::proto::expr::RefType::default_instance());
RefType::RefType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefType::InitAsDefaultInstance() {
}

RefType::RefType(const RefType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefType::SharedCtor() {
  _cached_size_ = 0;
  typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefType::~RefType() {
  SharedDtor();
}

void RefType::SharedDtor() {
  if (typename__ != &::google::protobuf::internal::kEmptyString) {
    delete typename__;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RefType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefType_descriptor_;
}

const RefType& RefType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

RefType* RefType::default_instance_ = NULL;

RefType* RefType::New() const {
  return new RefType;
}

void RefType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_typename_()) {
      if (typename__ != &::google::protobuf::internal::kEmptyString) {
        typename__->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string typename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typename_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typename_().data(), this->typename_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string typename = 1;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->typename_(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string typename = 1;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->typename_(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string typename = 1;
    if (has_typename_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typename_());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefType::MergeFrom(const RefType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typename_()) {
      set_typename_(from.typename_());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefType::CopyFrom(const RefType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefType::IsInitialized() const {

  return true;
}

void RefType::Swap(RefType* other) {
  if (other != this) {
    std::swap(typename__, other->typename__);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefType_descriptor_;
  metadata.reflection = RefType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Case::kExprFieldNumber;
const int Case::kMatchFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Case::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Case >, 11, false >
  Case::ext(kExtFieldNumber, ::generated::proto::expr::Case::default_instance());
Case::Case()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Case::InitAsDefaultInstance() {
  expr_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Case::Case(const Case& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Case::SharedCtor() {
  _cached_size_ = 0;
  expr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Case::~Case() {
  SharedDtor();
}

void Case::SharedDtor() {
  if (this != default_instance_) {
    delete expr_;
  }
}

void Case::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Case::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Case_descriptor_;
}

const Case& Case::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Case* Case::default_instance_ = NULL;

Case* Case::New() const {
  return new Case;
}

void Case::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expr()) {
      if (expr_ != NULL) expr_->::generated::proto::expr::Expr::Clear();
    }
  }
  match_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Case::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr expr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_match;
        break;
      }

      // repeated .generated.proto.expr.Expr match = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_match;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Case::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expr(), output);
  }

  // repeated .generated.proto.expr.Expr match = 2;
  for (int i = 0; i < this->match_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->match(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Case::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expr(), target);
  }

  // repeated .generated.proto.expr.Expr match = 2;
  for (int i = 0; i < this->match_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->match(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Case::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr expr = 1;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

  }
  // repeated .generated.proto.expr.Expr match = 2;
  total_size += 1 * this->match_size();
  for (int i = 0; i < this->match_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Case::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Case* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Case*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Case::MergeFrom(const Case& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_.MergeFrom(from.match_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expr()) {
      mutable_expr()->::generated::proto::expr::Expr::MergeFrom(from.expr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Case::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Case::CopyFrom(const Case& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Case::IsInitialized() const {

  if (has_expr()) {
    if (!this->expr().IsInitialized()) return false;
  }
  for (int i = 0; i < match_size(); i++) {
    if (!this->match(i).IsInitialized()) return false;
  }
  return true;
}

void Case::Swap(Case* other) {
  if (other != this) {
    std::swap(expr_, other->expr_);
    match_.Swap(&other->match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Case::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Case_descriptor_;
  metadata.reflection = Case_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Match::kPatFieldNumber;
const int Match::kBodyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Match::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::expr::Expr,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::expr::Match >, 11, false >
  Match::ext(kExtFieldNumber, ::generated::proto::expr::Match::default_instance());
Match::Match()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Match::InitAsDefaultInstance() {
  pat_ = const_cast< ::generated::proto::pat::Pat*>(&::generated::proto::pat::Pat::default_instance());
}

Match::Match(const Match& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Match::SharedCtor() {
  _cached_size_ = 0;
  pat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Match::~Match() {
  SharedDtor();
}

void Match::SharedDtor() {
  if (this != default_instance_) {
    delete pat_;
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_descriptor_;
}

const Match& Match::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expr_2eproto();
  return *default_instance_;
}

Match* Match::default_instance_ = NULL;

Match* Match::New() const {
  return new Match;
}

void Match::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pat()) {
      if (pat_ != NULL) pat_->::generated::proto::pat::Pat::Clear();
    }
  }
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.pat.Pat pat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // repeated .generated.proto.expr.Expr body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pat(), output);
  }

  // repeated .generated.proto.expr.Expr body = 2;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Match::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pat(), target);
  }

  // repeated .generated.proto.expr.Expr body = 2;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Match::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.pat.Pat pat = 1;
    if (has_pat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pat());
    }

  }
  // repeated .generated.proto.expr.Expr body = 2;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Match* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Match*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_.MergeFrom(from.body_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pat()) {
      mutable_pat()->::generated::proto::pat::Pat::MergeFrom(from.pat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {

  if (has_pat()) {
    if (!this->pat().IsInitialized()) return false;
  }
  for (int i = 0; i < body_size(); i++) {
    if (!this->body(i).IsInitialized()) return false;
  }
  return true;
}

void Match::Swap(Match* other) {
  if (other != this) {
    std::swap(pat_, other->pat_);
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_descriptor_;
  metadata.reflection = Match_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace expr
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
