// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphview.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graphview.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace graphview {

namespace {

const ::google::protobuf::Descriptor* EdgeView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgeView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphView_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_graphview_2eproto() {
  protobuf_AddDesc_graphview_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graphview.proto");
  GOOGLE_CHECK(file != NULL);
  EdgeView_descriptor_ = file->message_type(0);
  static const int EdgeView_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeView, nodesrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeView, nodedst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeView, portsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeView, portdst_),
  };
  EdgeView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgeView_descriptor_,
      EdgeView::default_instance_,
      EdgeView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgeView));
  GraphView_descriptor_ = file->message_type(1);
  static const int GraphView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphView, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphView, edges_),
  };
  GraphView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GraphView_descriptor_,
      GraphView::default_instance_,
      GraphView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GraphView));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graphview_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgeView_descriptor_, &EdgeView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GraphView_descriptor_, &GraphView::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graphview_2eproto() {
  delete EdgeView::default_instance_;
  delete EdgeView_reflection_;
  delete GraphView::default_instance_;
  delete GraphView_reflection_;
}

void protobuf_AddDesc_graphview_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::graph::protobuf_AddDesc_graph_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017graphview.proto\022\031generated.proto.graph"
    "view\032\013graph.proto\"N\n\010EdgeView\022\017\n\007nodeSrc"
    "\030\001 \001(\005\022\017\n\007nodeDst\030\002 \001(\005\022\017\n\007portSrc\030\003 \003(\005"
    "\022\017\n\007portDst\030\004 \003(\005\"k\n\tGraphView\022*\n\005nodes\030"
    "\001 \003(\0132\033.generated.proto.graph.Node\0222\n\005ed"
    "ges\030\002 \003(\0132#.generated.proto.graphview.Ed"
    "geView", 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graphview.proto", &protobuf_RegisterTypes);
  EdgeView::default_instance_ = new EdgeView();
  GraphView::default_instance_ = new GraphView();
  EdgeView::default_instance_->InitAsDefaultInstance();
  GraphView::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graphview_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graphview_2eproto {
  StaticDescriptorInitializer_graphview_2eproto() {
    protobuf_AddDesc_graphview_2eproto();
  }
} static_descriptor_initializer_graphview_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EdgeView::kNodeSrcFieldNumber;
const int EdgeView::kNodeDstFieldNumber;
const int EdgeView::kPortSrcFieldNumber;
const int EdgeView::kPortDstFieldNumber;
#endif  // !_MSC_VER

EdgeView::EdgeView()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgeView::InitAsDefaultInstance() {
}

EdgeView::EdgeView(const EdgeView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgeView::SharedCtor() {
  _cached_size_ = 0;
  nodesrc_ = 0;
  nodedst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgeView::~EdgeView() {
  SharedDtor();
}

void EdgeView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EdgeView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeView_descriptor_;
}

const EdgeView& EdgeView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graphview_2eproto();
  return *default_instance_;
}

EdgeView* EdgeView::default_instance_ = NULL;

EdgeView* EdgeView::New() const {
  return new EdgeView;
}

void EdgeView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nodesrc_ = 0;
    nodedst_ = 0;
  }
  portsrc_.Clear();
  portdst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgeView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nodeSrc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodesrc_)));
          set_has_nodesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nodeDst;
        break;
      }

      // optional int32 nodeDst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeDst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodedst_)));
          set_has_nodedst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_portSrc;
        break;
      }

      // repeated int32 portSrc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portSrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_portsrc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_portsrc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_portSrc;
        if (input->ExpectTag(32)) goto parse_portDst;
        break;
      }

      // repeated int32 portDst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portDst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_portdst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_portdst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_portDst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgeView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nodeSrc = 1;
  if (has_nodesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nodesrc(), output);
  }

  // optional int32 nodeDst = 2;
  if (has_nodedst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nodedst(), output);
  }

  // repeated int32 portSrc = 3;
  for (int i = 0; i < this->portsrc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->portsrc(i), output);
  }

  // repeated int32 portDst = 4;
  for (int i = 0; i < this->portdst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->portdst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgeView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nodeSrc = 1;
  if (has_nodesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nodesrc(), target);
  }

  // optional int32 nodeDst = 2;
  if (has_nodedst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nodedst(), target);
  }

  // repeated int32 portSrc = 3;
  for (int i = 0; i < this->portsrc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->portsrc(i), target);
  }

  // repeated int32 portDst = 4;
  for (int i = 0; i < this->portdst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->portdst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgeView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nodeSrc = 1;
    if (has_nodesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodesrc());
    }

    // optional int32 nodeDst = 2;
    if (has_nodedst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodedst());
    }

  }
  // repeated int32 portSrc = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->portsrc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->portsrc(i));
    }
    total_size += 1 * this->portsrc_size() + data_size;
  }

  // repeated int32 portDst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->portdst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->portdst(i));
    }
    total_size += 1 * this->portdst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgeView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgeView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgeView::MergeFrom(const EdgeView& from) {
  GOOGLE_CHECK_NE(&from, this);
  portsrc_.MergeFrom(from.portsrc_);
  portdst_.MergeFrom(from.portdst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodesrc()) {
      set_nodesrc(from.nodesrc());
    }
    if (from.has_nodedst()) {
      set_nodedst(from.nodedst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgeView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeView::CopyFrom(const EdgeView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeView::IsInitialized() const {

  return true;
}

void EdgeView::Swap(EdgeView* other) {
  if (other != this) {
    std::swap(nodesrc_, other->nodesrc_);
    std::swap(nodedst_, other->nodedst_);
    portsrc_.Swap(&other->portsrc_);
    portdst_.Swap(&other->portdst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgeView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgeView_descriptor_;
  metadata.reflection = EdgeView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GraphView::kNodesFieldNumber;
const int GraphView::kEdgesFieldNumber;
#endif  // !_MSC_VER

GraphView::GraphView()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GraphView::InitAsDefaultInstance() {
}

GraphView::GraphView(const GraphView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GraphView::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GraphView::~GraphView() {
  SharedDtor();
}

void GraphView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GraphView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphView_descriptor_;
}

const GraphView& GraphView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graphview_2eproto();
  return *default_instance_;
}

GraphView* GraphView::default_instance_ = NULL;

GraphView* GraphView::New() const {
  return new GraphView;
}

void GraphView::Clear() {
  nodes_.Clear();
  edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GraphView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.graph.Node nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectTag(18)) goto parse_edges;
        break;
      }

      // repeated .generated.proto.graphview.EdgeView edges = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edges;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GraphView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.graph.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // repeated .generated.proto.graphview.EdgeView edges = 2;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GraphView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.graph.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  // repeated .generated.proto.graphview.EdgeView edges = 2;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->edges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GraphView::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.graph.Node nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  // repeated .generated.proto.graphview.EdgeView edges = 2;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GraphView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GraphView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GraphView::MergeFrom(const GraphView& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GraphView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphView::CopyFrom(const GraphView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphView::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void GraphView::Swap(GraphView* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    edges_.Swap(&other->edges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GraphView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphView_descriptor_;
  metadata.reflection = GraphView_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace graphview
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
