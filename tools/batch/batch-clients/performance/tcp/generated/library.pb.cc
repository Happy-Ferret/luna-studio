// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: library.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "library.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace library {

namespace {

const ::google::protobuf::Descriptor* Library_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Library_reflection_ = NULL;
const ::google::protobuf::Descriptor* Library_PropertyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Library_PropertyMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Library_PropertyMap_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Library_PropertyMap_KeyValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_library_2eproto() {
  protobuf_AddDesc_library_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "library.proto");
  GOOGLE_CHECK(file != NULL);
  Library_descriptor_ = file->message_type(0);
  static const int Library_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library, ast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library, propertymap_),
  };
  Library_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Library_descriptor_,
      Library::default_instance_,
      Library_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Library));
  Library_PropertyMap_descriptor_ = Library_descriptor_->nested_type(0);
  static const int Library_PropertyMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library_PropertyMap, items_),
  };
  Library_PropertyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Library_PropertyMap_descriptor_,
      Library_PropertyMap::default_instance_,
      Library_PropertyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library_PropertyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library_PropertyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Library_PropertyMap));
  Library_PropertyMap_KeyValue_descriptor_ = Library_PropertyMap_descriptor_->nested_type(0);
  static const int Library_PropertyMap_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library_PropertyMap_KeyValue, astid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library_PropertyMap_KeyValue, properties_),
  };
  Library_PropertyMap_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Library_PropertyMap_KeyValue_descriptor_,
      Library_PropertyMap_KeyValue::default_instance_,
      Library_PropertyMap_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library_PropertyMap_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Library_PropertyMap_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Library_PropertyMap_KeyValue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_library_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Library_descriptor_, &Library::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Library_PropertyMap_descriptor_, &Library_PropertyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Library_PropertyMap_KeyValue_descriptor_, &Library_PropertyMap_KeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_library_2eproto() {
  delete Library::default_instance_;
  delete Library_reflection_;
  delete Library_PropertyMap::default_instance_;
  delete Library_PropertyMap_reflection_;
  delete Library_PropertyMap_KeyValue::default_instance_;
  delete Library_PropertyMap_KeyValue_reflection_;
}

void protobuf_AddDesc_library_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::module::protobuf_AddDesc_module_2eproto();
  ::generated::proto::attributes::protobuf_AddDesc_attributes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rlibrary.proto\022\027generated.proto.library"
    "\032\014module.proto\032\020attributes.proto\"\316\002\n\007Lib"
    "rary\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004path\030\003"
    " \001(\t\022+\n\003ast\030\004 \001(\0132\036.generated.proto.modu"
    "le.Module\022A\n\013propertyMap\030\005 \001(\0132,.generat"
    "ed.proto.library.Library.PropertyMap\032\252\001\n"
    "\013PropertyMap\022D\n\005items\030\001 \003(\01325.generated."
    "proto.library.Library.PropertyMap.KeyVal"
    "ue\032U\n\010KeyValue\022\r\n\005astID\030\001 \002(\005\022:\n\npropert"
    "ies\030\002 \002(\0132&.generated.proto.attributes.P"
    "roperties", 409);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "library.proto", &protobuf_RegisterTypes);
  Library::default_instance_ = new Library();
  Library_PropertyMap::default_instance_ = new Library_PropertyMap();
  Library_PropertyMap_KeyValue::default_instance_ = new Library_PropertyMap_KeyValue();
  Library::default_instance_->InitAsDefaultInstance();
  Library_PropertyMap::default_instance_->InitAsDefaultInstance();
  Library_PropertyMap_KeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_library_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_library_2eproto {
  StaticDescriptorInitializer_library_2eproto() {
    protobuf_AddDesc_library_2eproto();
  }
} static_descriptor_initializer_library_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Library_PropertyMap_KeyValue::kAstIDFieldNumber;
const int Library_PropertyMap_KeyValue::kPropertiesFieldNumber;
#endif  // !_MSC_VER

Library_PropertyMap_KeyValue::Library_PropertyMap_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Library_PropertyMap_KeyValue::InitAsDefaultInstance() {
  properties_ = const_cast< ::generated::proto::attributes::Properties*>(&::generated::proto::attributes::Properties::default_instance());
}

Library_PropertyMap_KeyValue::Library_PropertyMap_KeyValue(const Library_PropertyMap_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Library_PropertyMap_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  astid_ = 0;
  properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Library_PropertyMap_KeyValue::~Library_PropertyMap_KeyValue() {
  SharedDtor();
}

void Library_PropertyMap_KeyValue::SharedDtor() {
  if (this != default_instance_) {
    delete properties_;
  }
}

void Library_PropertyMap_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Library_PropertyMap_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Library_PropertyMap_KeyValue_descriptor_;
}

const Library_PropertyMap_KeyValue& Library_PropertyMap_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();
  return *default_instance_;
}

Library_PropertyMap_KeyValue* Library_PropertyMap_KeyValue::default_instance_ = NULL;

Library_PropertyMap_KeyValue* Library_PropertyMap_KeyValue::New() const {
  return new Library_PropertyMap_KeyValue;
}

void Library_PropertyMap_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    astid_ = 0;
    if (has_properties()) {
      if (properties_ != NULL) properties_->::generated::proto::attributes::Properties::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Library_PropertyMap_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 astID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &astid_)));
          set_has_astid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }

      // required .generated.proto.attributes.Properties properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Library_PropertyMap_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 astID = 1;
  if (has_astid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->astid(), output);
  }

  // required .generated.proto.attributes.Properties properties = 2;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Library_PropertyMap_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 astID = 1;
  if (has_astid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->astid(), target);
  }

  // required .generated.proto.attributes.Properties properties = 2;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Library_PropertyMap_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 astID = 1;
    if (has_astid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->astid());
    }

    // required .generated.proto.attributes.Properties properties = 2;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Library_PropertyMap_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Library_PropertyMap_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Library_PropertyMap_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Library_PropertyMap_KeyValue::MergeFrom(const Library_PropertyMap_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_astid()) {
      set_astid(from.astid());
    }
    if (from.has_properties()) {
      mutable_properties()->::generated::proto::attributes::Properties::MergeFrom(from.properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Library_PropertyMap_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Library_PropertyMap_KeyValue::CopyFrom(const Library_PropertyMap_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Library_PropertyMap_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_properties()) {
    if (!this->properties().IsInitialized()) return false;
  }
  return true;
}

void Library_PropertyMap_KeyValue::Swap(Library_PropertyMap_KeyValue* other) {
  if (other != this) {
    std::swap(astid_, other->astid_);
    std::swap(properties_, other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Library_PropertyMap_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Library_PropertyMap_KeyValue_descriptor_;
  metadata.reflection = Library_PropertyMap_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Library_PropertyMap::kItemsFieldNumber;
#endif  // !_MSC_VER

Library_PropertyMap::Library_PropertyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Library_PropertyMap::InitAsDefaultInstance() {
}

Library_PropertyMap::Library_PropertyMap(const Library_PropertyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Library_PropertyMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Library_PropertyMap::~Library_PropertyMap() {
  SharedDtor();
}

void Library_PropertyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Library_PropertyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Library_PropertyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Library_PropertyMap_descriptor_;
}

const Library_PropertyMap& Library_PropertyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();
  return *default_instance_;
}

Library_PropertyMap* Library_PropertyMap::default_instance_ = NULL;

Library_PropertyMap* Library_PropertyMap::New() const {
  return new Library_PropertyMap;
}

void Library_PropertyMap::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Library_PropertyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .generated.proto.library.Library.PropertyMap.KeyValue items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Library_PropertyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .generated.proto.library.Library.PropertyMap.KeyValue items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Library_PropertyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .generated.proto.library.Library.PropertyMap.KeyValue items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Library_PropertyMap::ByteSize() const {
  int total_size = 0;

  // repeated .generated.proto.library.Library.PropertyMap.KeyValue items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Library_PropertyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Library_PropertyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Library_PropertyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Library_PropertyMap::MergeFrom(const Library_PropertyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Library_PropertyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Library_PropertyMap::CopyFrom(const Library_PropertyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Library_PropertyMap::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Library_PropertyMap::Swap(Library_PropertyMap* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Library_PropertyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Library_PropertyMap_descriptor_;
  metadata.reflection = Library_PropertyMap_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Library::kIdFieldNumber;
const int Library::kNameFieldNumber;
const int Library::kPathFieldNumber;
const int Library::kAstFieldNumber;
const int Library::kPropertyMapFieldNumber;
#endif  // !_MSC_VER

Library::Library()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Library::InitAsDefaultInstance() {
  ast_ = const_cast< ::generated::proto::module::Module*>(&::generated::proto::module::Module::default_instance());
  propertymap_ = const_cast< ::generated::proto::library::Library_PropertyMap*>(&::generated::proto::library::Library_PropertyMap::default_instance());
}

Library::Library(const Library& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Library::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_ = NULL;
  propertymap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Library::~Library() {
  SharedDtor();
}

void Library::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete ast_;
    delete propertymap_;
  }
}

void Library::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Library::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Library_descriptor_;
}

const Library& Library::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();
  return *default_instance_;
}

Library* Library::default_instance_ = NULL;

Library* Library::New() const {
  return new Library;
}

void Library::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_ast()) {
      if (ast_ != NULL) ast_->::generated::proto::module::Module::Clear();
    }
    if (has_propertymap()) {
      if (propertymap_ != NULL) propertymap_->::generated::proto::library::Library_PropertyMap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Library::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ast;
        break;
      }

      // optional .generated.proto.module.Module ast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_propertyMap;
        break;
      }

      // optional .generated.proto.library.Library.PropertyMap propertyMap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propertyMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propertymap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Library::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // optional .generated.proto.module.Module ast = 4;
  if (has_ast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ast(), output);
  }

  // optional .generated.proto.library.Library.PropertyMap propertyMap = 5;
  if (has_propertymap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->propertymap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Library::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional .generated.proto.module.Module ast = 4;
  if (has_ast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ast(), target);
  }

  // optional .generated.proto.library.Library.PropertyMap propertyMap = 5;
  if (has_propertymap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->propertymap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Library::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional .generated.proto.module.Module ast = 4;
    if (has_ast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast());
    }

    // optional .generated.proto.library.Library.PropertyMap propertyMap = 5;
    if (has_propertymap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propertymap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Library::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Library* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Library*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Library::MergeFrom(const Library& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_ast()) {
      mutable_ast()->::generated::proto::module::Module::MergeFrom(from.ast());
    }
    if (from.has_propertymap()) {
      mutable_propertymap()->::generated::proto::library::Library_PropertyMap::MergeFrom(from.propertymap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Library::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Library::CopyFrom(const Library& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Library::IsInitialized() const {

  if (has_ast()) {
    if (!this->ast().IsInitialized()) return false;
  }
  if (has_propertymap()) {
    if (!this->propertymap().IsInitialized()) return false;
  }
  return true;
}

void Library::Swap(Library* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(ast_, other->ast_);
    std::swap(propertymap_, other->propertymap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Library::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Library_descriptor_;
  metadata.reflection = Library_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace library
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
