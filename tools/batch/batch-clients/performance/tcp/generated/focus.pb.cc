// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: focus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "focus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace focus {

namespace {

const ::google::protobuf::Descriptor* Focus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Focus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Focus_Cls_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ModuleFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleFocus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassFocus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionFocus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_focus_2eproto() {
  protobuf_AddDesc_focus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "focus.proto");
  GOOGLE_CHECK(file != NULL);
  Focus_descriptor_ = file->message_type(0);
  static const int Focus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Focus, cls_),
  };
  Focus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Focus_descriptor_,
      Focus::default_instance_,
      Focus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Focus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Focus, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Focus, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Focus));
  Focus_Cls_descriptor_ = Focus_descriptor_->enum_type(0);
  ModuleFocus_descriptor_ = file->message_type(1);
  static const int ModuleFocus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleFocus, m_),
  };
  ModuleFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleFocus_descriptor_,
      ModuleFocus::default_instance_,
      ModuleFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleFocus));
  ClassFocus_descriptor_ = file->message_type(2);
  static const int ClassFocus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassFocus, c_),
  };
  ClassFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassFocus_descriptor_,
      ClassFocus::default_instance_,
      ClassFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassFocus));
  FunctionFocus_descriptor_ = file->message_type(3);
  static const int FunctionFocus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionFocus, f_),
  };
  FunctionFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionFocus_descriptor_,
      FunctionFocus::default_instance_,
      FunctionFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionFocus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_focus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Focus_descriptor_, &Focus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleFocus_descriptor_, &ModuleFocus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassFocus_descriptor_, &ClassFocus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionFocus_descriptor_, &FunctionFocus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_focus_2eproto() {
  delete Focus::default_instance_;
  delete Focus_reflection_;
  delete ModuleFocus::default_instance_;
  delete ModuleFocus_reflection_;
  delete ClassFocus::default_instance_;
  delete ClassFocus_reflection_;
  delete FunctionFocus::default_instance_;
  delete FunctionFocus_reflection_;
}

void protobuf_AddDesc_focus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::expr::protobuf_AddDesc_expr_2eproto();
  ::generated::proto::module::protobuf_AddDesc_module_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013focus.proto\022\025generated.proto.focus\032\nex"
    "pr.proto\032\014module.proto\"{\n\005Focus\022-\n\003cls\030\001"
    " \002(\0162 .generated.proto.focus.Focus.Cls\"9"
    "\n\003Cls\022\017\n\013ModuleFocus\020\001\022\016\n\nClassFocus\020\002\022\021"
    "\n\rFunctionFocus\020\003*\010\010d\020\200\200\200\200\002\"\207\001\n\013ModuleFo"
    "cus\022)\n\001m\030\001 \001(\0132\036.generated.proto.module."
    "Module2M\n\003ext\022\034.generated.proto.focus.Fo"
    "cus\030d \001(\0132\".generated.proto.focus.Module"
    "Focus\"\201\001\n\nClassFocus\022%\n\001c\030\001 \001(\0132\032.genera"
    "ted.proto.expr.Expr2L\n\003ext\022\034.generated.p"
    "roto.focus.Focus\030e \001(\0132!.generated.proto"
    ".focus.ClassFocus\"\207\001\n\rFunctionFocus\022%\n\001f"
    "\030\001 \001(\0132\032.generated.proto.expr.Expr2O\n\003ex"
    "t\022\034.generated.proto.focus.Focus\030f \001(\0132$."
    "generated.proto.focus.FunctionFocus", 595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "focus.proto", &protobuf_RegisterTypes);
  Focus::default_instance_ = new Focus();
  ModuleFocus::default_instance_ = new ModuleFocus();
  ClassFocus::default_instance_ = new ClassFocus();
  FunctionFocus::default_instance_ = new FunctionFocus();
  Focus::default_instance_->InitAsDefaultInstance();
  ModuleFocus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::focus::Focus::default_instance(),
    100, 11, false, false,
    &::generated::proto::focus::ModuleFocus::default_instance());
  ClassFocus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::focus::Focus::default_instance(),
    101, 11, false, false,
    &::generated::proto::focus::ClassFocus::default_instance());
  FunctionFocus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::generated::proto::focus::Focus::default_instance(),
    102, 11, false, false,
    &::generated::proto::focus::FunctionFocus::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_focus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_focus_2eproto {
  StaticDescriptorInitializer_focus_2eproto() {
    protobuf_AddDesc_focus_2eproto();
  }
} static_descriptor_initializer_focus_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Focus_Cls_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Focus_Cls_descriptor_;
}
bool Focus_Cls_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Focus_Cls Focus::ModuleFocus;
const Focus_Cls Focus::ClassFocus;
const Focus_Cls Focus::FunctionFocus;
const Focus_Cls Focus::Cls_MIN;
const Focus_Cls Focus::Cls_MAX;
const int Focus::Cls_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Focus::kClsFieldNumber;
#endif  // !_MSC_VER

Focus::Focus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Focus::InitAsDefaultInstance() {
}

Focus::Focus(const Focus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Focus::SharedCtor() {
  _cached_size_ = 0;
  cls_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Focus::~Focus() {
  SharedDtor();
}

void Focus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Focus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Focus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Focus_descriptor_;
}

const Focus& Focus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_focus_2eproto();
  return *default_instance_;
}

Focus* Focus::default_instance_ = NULL;

Focus* Focus::New() const {
  return new Focus;
}

void Focus::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cls_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Focus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.focus.Focus.Cls cls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::generated::proto::focus::Focus_Cls_IsValid(value)) {
            set_cls(static_cast< ::generated::proto::focus::Focus_Cls >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Focus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.focus.Focus.Cls cls = 1;
  if (has_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cls(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Focus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.focus.Focus.Cls cls = 1;
  if (has_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cls(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Focus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.focus.Focus.Cls cls = 1;
    if (has_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cls());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Focus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Focus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Focus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Focus::MergeFrom(const Focus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cls()) {
      set_cls(from.cls());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Focus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Focus::CopyFrom(const Focus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Focus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Focus::Swap(Focus* other) {
  if (other != this) {
    std::swap(cls_, other->cls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Focus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Focus_descriptor_;
  metadata.reflection = Focus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleFocus::kMFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ModuleFocus::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::focus::Focus,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::focus::ModuleFocus >, 11, false >
  ModuleFocus::ext(kExtFieldNumber, ::generated::proto::focus::ModuleFocus::default_instance());
ModuleFocus::ModuleFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleFocus::InitAsDefaultInstance() {
  m_ = const_cast< ::generated::proto::module::Module*>(&::generated::proto::module::Module::default_instance());
}

ModuleFocus::ModuleFocus(const ModuleFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleFocus::SharedCtor() {
  _cached_size_ = 0;
  m_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleFocus::~ModuleFocus() {
  SharedDtor();
}

void ModuleFocus::SharedDtor() {
  if (this != default_instance_) {
    delete m_;
  }
}

void ModuleFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleFocus_descriptor_;
}

const ModuleFocus& ModuleFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_focus_2eproto();
  return *default_instance_;
}

ModuleFocus* ModuleFocus::default_instance_ = NULL;

ModuleFocus* ModuleFocus::New() const {
  return new ModuleFocus;
}

void ModuleFocus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m()) {
      if (m_ != NULL) m_->::generated::proto::module::Module::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.module.Module m = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.module.Module m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.module.Module m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleFocus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.module.Module m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleFocus::MergeFrom(const ModuleFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      mutable_m()->::generated::proto::module::Module::MergeFrom(from.m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleFocus::CopyFrom(const ModuleFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleFocus::IsInitialized() const {

  if (has_m()) {
    if (!this->m().IsInitialized()) return false;
  }
  return true;
}

void ModuleFocus::Swap(ModuleFocus* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleFocus_descriptor_;
  metadata.reflection = ModuleFocus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassFocus::kCFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ClassFocus::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::focus::Focus,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::focus::ClassFocus >, 11, false >
  ClassFocus::ext(kExtFieldNumber, ::generated::proto::focus::ClassFocus::default_instance());
ClassFocus::ClassFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassFocus::InitAsDefaultInstance() {
  c_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

ClassFocus::ClassFocus(const ClassFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassFocus::SharedCtor() {
  _cached_size_ = 0;
  c_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassFocus::~ClassFocus() {
  SharedDtor();
}

void ClassFocus::SharedDtor() {
  if (this != default_instance_) {
    delete c_;
  }
}

void ClassFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassFocus_descriptor_;
}

const ClassFocus& ClassFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_focus_2eproto();
  return *default_instance_;
}

ClassFocus* ClassFocus::default_instance_ = NULL;

ClassFocus* ClassFocus::New() const {
  return new ClassFocus;
}

void ClassFocus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_c()) {
      if (c_ != NULL) c_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr c = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClassFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr c = 1;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr c = 1;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassFocus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr c = 1;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassFocus::MergeFrom(const ClassFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c()) {
      mutable_c()->::generated::proto::expr::Expr::MergeFrom(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassFocus::CopyFrom(const ClassFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassFocus::IsInitialized() const {

  if (has_c()) {
    if (!this->c().IsInitialized()) return false;
  }
  return true;
}

void ClassFocus::Swap(ClassFocus* other) {
  if (other != this) {
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassFocus_descriptor_;
  metadata.reflection = ClassFocus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionFocus::kFFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int FunctionFocus::kExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::generated::proto::focus::Focus,
    ::google::protobuf::internal::MessageTypeTraits< ::generated::proto::focus::FunctionFocus >, 11, false >
  FunctionFocus::ext(kExtFieldNumber, ::generated::proto::focus::FunctionFocus::default_instance());
FunctionFocus::FunctionFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionFocus::InitAsDefaultInstance() {
  f_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

FunctionFocus::FunctionFocus(const FunctionFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionFocus::SharedCtor() {
  _cached_size_ = 0;
  f_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionFocus::~FunctionFocus() {
  SharedDtor();
}

void FunctionFocus::SharedDtor() {
  if (this != default_instance_) {
    delete f_;
  }
}

void FunctionFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionFocus_descriptor_;
}

const FunctionFocus& FunctionFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_focus_2eproto();
  return *default_instance_;
}

FunctionFocus* FunctionFocus::default_instance_ = NULL;

FunctionFocus* FunctionFocus::New() const {
  return new FunctionFocus;
}

void FunctionFocus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_f()) {
      if (f_ != NULL) f_->::generated::proto::expr::Expr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .generated.proto.expr.Expr f = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .generated.proto.expr.Expr f = 1;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .generated.proto.expr.Expr f = 1;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionFocus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .generated.proto.expr.Expr f = 1;
    if (has_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionFocus::MergeFrom(const FunctionFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f()) {
      mutable_f()->::generated::proto::expr::Expr::MergeFrom(from.f());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionFocus::CopyFrom(const FunctionFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionFocus::IsInitialized() const {

  if (has_f()) {
    if (!this->f().IsInitialized()) return false;
  }
  return true;
}

void FunctionFocus::Swap(FunctionFocus* other) {
  if (other != this) {
    std::swap(f_, other->f_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionFocus_descriptor_;
  metadata.reflection = FunctionFocus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace focus
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
