// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file-manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file-manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace fileManager {

namespace {

const ::google::protobuf::Descriptor* FileSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Fetch_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Fetch_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Fetch_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Fetch_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Upload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Upload_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Upload_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Upload_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Upload_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Upload_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Create_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Create_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Create_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Create_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Create_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Exists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Exists_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Exists_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Exists_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Exists_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Exists_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_List_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_List_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_List_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_List_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Remove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Remove_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Remove_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Remove_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Remove_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Remove_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Copy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Copy_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Copy_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Copy_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Copy_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Copy_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Move_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Move_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_Directory_Move_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_Directory_Move_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Fetch_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Fetch_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Fetch_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Fetch_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Upload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Upload_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Upload_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Upload_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Upload_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Upload_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Exists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Exists_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Exists_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Exists_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Exists_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Exists_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Remove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Remove_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Remove_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Remove_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Remove_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Remove_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Copy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Copy_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Copy_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Copy_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Copy_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Copy_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Move_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Move_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_File_Move_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_File_Move_Update_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_file_2dmanager_2eproto() {
  protobuf_AddDesc_file_2dmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "file-manager.proto");
  GOOGLE_CHECK(file != NULL);
  FileSystem_descriptor_ = file->message_type(0);
  static const int FileSystem_offsets_[1] = {
  };
  FileSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_descriptor_,
      FileSystem::default_instance_,
      FileSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem));
  FileSystem_Directory_descriptor_ = FileSystem_descriptor_->nested_type(0);
  static const int FileSystem_Directory_offsets_[1] = {
  };
  FileSystem_Directory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_descriptor_,
      FileSystem_Directory::default_instance_,
      FileSystem_Directory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory));
  FileSystem_Directory_Fetch_descriptor_ = FileSystem_Directory_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Fetch_offsets_[1] = {
  };
  FileSystem_Directory_Fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Fetch_descriptor_,
      FileSystem_Directory_Fetch::default_instance_,
      FileSystem_Directory_Fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Fetch));
  FileSystem_Directory_Fetch_Request_descriptor_ = FileSystem_Directory_Fetch_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Fetch_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch_Request, path_),
  };
  FileSystem_Directory_Fetch_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Fetch_Request_descriptor_,
      FileSystem_Directory_Fetch_Request::default_instance_,
      FileSystem_Directory_Fetch_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Fetch_Request));
  FileSystem_Directory_Fetch_Status_descriptor_ = FileSystem_Directory_Fetch_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Fetch_Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch_Status, path_),
  };
  FileSystem_Directory_Fetch_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Fetch_Status_descriptor_,
      FileSystem_Directory_Fetch_Status::default_instance_,
      FileSystem_Directory_Fetch_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Fetch_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Fetch_Status));
  FileSystem_Directory_Upload_descriptor_ = FileSystem_Directory_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Upload_offsets_[1] = {
  };
  FileSystem_Directory_Upload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Upload_descriptor_,
      FileSystem_Directory_Upload::default_instance_,
      FileSystem_Directory_Upload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Upload));
  FileSystem_Directory_Upload_Request_descriptor_ = FileSystem_Directory_Upload_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Upload_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload_Request, path_),
  };
  FileSystem_Directory_Upload_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Upload_Request_descriptor_,
      FileSystem_Directory_Upload_Request::default_instance_,
      FileSystem_Directory_Upload_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Upload_Request));
  FileSystem_Directory_Upload_Status_descriptor_ = FileSystem_Directory_Upload_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Upload_Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload_Status, path_),
  };
  FileSystem_Directory_Upload_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Upload_Status_descriptor_,
      FileSystem_Directory_Upload_Status::default_instance_,
      FileSystem_Directory_Upload_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Upload_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Upload_Status));
  FileSystem_Directory_Create_descriptor_ = FileSystem_Directory_descriptor_->nested_type(2);
  static const int FileSystem_Directory_Create_offsets_[1] = {
  };
  FileSystem_Directory_Create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Create_descriptor_,
      FileSystem_Directory_Create::default_instance_,
      FileSystem_Directory_Create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Create));
  FileSystem_Directory_Create_Request_descriptor_ = FileSystem_Directory_Create_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Create_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create_Request, path_),
  };
  FileSystem_Directory_Create_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Create_Request_descriptor_,
      FileSystem_Directory_Create_Request::default_instance_,
      FileSystem_Directory_Create_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Create_Request));
  FileSystem_Directory_Create_Update_descriptor_ = FileSystem_Directory_Create_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Create_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create_Update, path_),
  };
  FileSystem_Directory_Create_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Create_Update_descriptor_,
      FileSystem_Directory_Create_Update::default_instance_,
      FileSystem_Directory_Create_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Create_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Create_Update));
  FileSystem_Directory_Exists_descriptor_ = FileSystem_Directory_descriptor_->nested_type(3);
  static const int FileSystem_Directory_Exists_offsets_[1] = {
  };
  FileSystem_Directory_Exists_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Exists_descriptor_,
      FileSystem_Directory_Exists::default_instance_,
      FileSystem_Directory_Exists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Exists));
  FileSystem_Directory_Exists_Request_descriptor_ = FileSystem_Directory_Exists_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Exists_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists_Request, path_),
  };
  FileSystem_Directory_Exists_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Exists_Request_descriptor_,
      FileSystem_Directory_Exists_Request::default_instance_,
      FileSystem_Directory_Exists_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Exists_Request));
  FileSystem_Directory_Exists_Status_descriptor_ = FileSystem_Directory_Exists_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Exists_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists_Status, exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists_Status, path_),
  };
  FileSystem_Directory_Exists_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Exists_Status_descriptor_,
      FileSystem_Directory_Exists_Status::default_instance_,
      FileSystem_Directory_Exists_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Exists_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Exists_Status));
  FileSystem_Directory_List_descriptor_ = FileSystem_Directory_descriptor_->nested_type(4);
  static const int FileSystem_Directory_List_offsets_[1] = {
  };
  FileSystem_Directory_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_List_descriptor_,
      FileSystem_Directory_List::default_instance_,
      FileSystem_Directory_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_List));
  FileSystem_Directory_List_Request_descriptor_ = FileSystem_Directory_List_descriptor_->nested_type(0);
  static const int FileSystem_Directory_List_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List_Request, path_),
  };
  FileSystem_Directory_List_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_List_Request_descriptor_,
      FileSystem_Directory_List_Request::default_instance_,
      FileSystem_Directory_List_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_List_Request));
  FileSystem_Directory_List_Status_descriptor_ = FileSystem_Directory_List_descriptor_->nested_type(1);
  static const int FileSystem_Directory_List_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List_Status, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List_Status, path_),
  };
  FileSystem_Directory_List_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_List_Status_descriptor_,
      FileSystem_Directory_List_Status::default_instance_,
      FileSystem_Directory_List_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_List_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_List_Status));
  FileSystem_Directory_Remove_descriptor_ = FileSystem_Directory_descriptor_->nested_type(5);
  static const int FileSystem_Directory_Remove_offsets_[1] = {
  };
  FileSystem_Directory_Remove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Remove_descriptor_,
      FileSystem_Directory_Remove::default_instance_,
      FileSystem_Directory_Remove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Remove));
  FileSystem_Directory_Remove_Request_descriptor_ = FileSystem_Directory_Remove_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Remove_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove_Request, path_),
  };
  FileSystem_Directory_Remove_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Remove_Request_descriptor_,
      FileSystem_Directory_Remove_Request::default_instance_,
      FileSystem_Directory_Remove_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Remove_Request));
  FileSystem_Directory_Remove_Update_descriptor_ = FileSystem_Directory_Remove_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Remove_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove_Update, path_),
  };
  FileSystem_Directory_Remove_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Remove_Update_descriptor_,
      FileSystem_Directory_Remove_Update::default_instance_,
      FileSystem_Directory_Remove_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Remove_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Remove_Update));
  FileSystem_Directory_Copy_descriptor_ = FileSystem_Directory_descriptor_->nested_type(6);
  static const int FileSystem_Directory_Copy_offsets_[1] = {
  };
  FileSystem_Directory_Copy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Copy_descriptor_,
      FileSystem_Directory_Copy::default_instance_,
      FileSystem_Directory_Copy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Copy));
  FileSystem_Directory_Copy_Request_descriptor_ = FileSystem_Directory_Copy_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Copy_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Request, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Request, dst_),
  };
  FileSystem_Directory_Copy_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Copy_Request_descriptor_,
      FileSystem_Directory_Copy_Request::default_instance_,
      FileSystem_Directory_Copy_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Copy_Request));
  FileSystem_Directory_Copy_Update_descriptor_ = FileSystem_Directory_Copy_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Copy_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Update, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Update, dst_),
  };
  FileSystem_Directory_Copy_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Copy_Update_descriptor_,
      FileSystem_Directory_Copy_Update::default_instance_,
      FileSystem_Directory_Copy_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Copy_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Copy_Update));
  FileSystem_Directory_Move_descriptor_ = FileSystem_Directory_descriptor_->nested_type(7);
  static const int FileSystem_Directory_Move_offsets_[1] = {
  };
  FileSystem_Directory_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Move_descriptor_,
      FileSystem_Directory_Move::default_instance_,
      FileSystem_Directory_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Move));
  FileSystem_Directory_Move_Request_descriptor_ = FileSystem_Directory_Move_descriptor_->nested_type(0);
  static const int FileSystem_Directory_Move_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Request, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Request, dst_),
  };
  FileSystem_Directory_Move_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Move_Request_descriptor_,
      FileSystem_Directory_Move_Request::default_instance_,
      FileSystem_Directory_Move_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Move_Request));
  FileSystem_Directory_Move_Update_descriptor_ = FileSystem_Directory_Move_descriptor_->nested_type(1);
  static const int FileSystem_Directory_Move_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Update, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Update, dst_),
  };
  FileSystem_Directory_Move_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_Directory_Move_Update_descriptor_,
      FileSystem_Directory_Move_Update::default_instance_,
      FileSystem_Directory_Move_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_Directory_Move_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_Directory_Move_Update));
  FileSystem_File_descriptor_ = FileSystem_descriptor_->nested_type(1);
  static const int FileSystem_File_offsets_[1] = {
  };
  FileSystem_File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_descriptor_,
      FileSystem_File::default_instance_,
      FileSystem_File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File));
  FileSystem_File_Fetch_descriptor_ = FileSystem_File_descriptor_->nested_type(0);
  static const int FileSystem_File_Fetch_offsets_[1] = {
  };
  FileSystem_File_Fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Fetch_descriptor_,
      FileSystem_File_Fetch::default_instance_,
      FileSystem_File_Fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Fetch));
  FileSystem_File_Fetch_Request_descriptor_ = FileSystem_File_Fetch_descriptor_->nested_type(0);
  static const int FileSystem_File_Fetch_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch_Request, path_),
  };
  FileSystem_File_Fetch_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Fetch_Request_descriptor_,
      FileSystem_File_Fetch_Request::default_instance_,
      FileSystem_File_Fetch_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Fetch_Request));
  FileSystem_File_Fetch_Status_descriptor_ = FileSystem_File_Fetch_descriptor_->nested_type(1);
  static const int FileSystem_File_Fetch_Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch_Status, path_),
  };
  FileSystem_File_Fetch_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Fetch_Status_descriptor_,
      FileSystem_File_Fetch_Status::default_instance_,
      FileSystem_File_Fetch_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Fetch_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Fetch_Status));
  FileSystem_File_Upload_descriptor_ = FileSystem_File_descriptor_->nested_type(1);
  static const int FileSystem_File_Upload_offsets_[1] = {
  };
  FileSystem_File_Upload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Upload_descriptor_,
      FileSystem_File_Upload::default_instance_,
      FileSystem_File_Upload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Upload));
  FileSystem_File_Upload_Request_descriptor_ = FileSystem_File_Upload_descriptor_->nested_type(0);
  static const int FileSystem_File_Upload_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload_Request, path_),
  };
  FileSystem_File_Upload_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Upload_Request_descriptor_,
      FileSystem_File_Upload_Request::default_instance_,
      FileSystem_File_Upload_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Upload_Request));
  FileSystem_File_Upload_Status_descriptor_ = FileSystem_File_Upload_descriptor_->nested_type(1);
  static const int FileSystem_File_Upload_Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload_Status, path_),
  };
  FileSystem_File_Upload_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Upload_Status_descriptor_,
      FileSystem_File_Upload_Status::default_instance_,
      FileSystem_File_Upload_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Upload_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Upload_Status));
  FileSystem_File_Exists_descriptor_ = FileSystem_File_descriptor_->nested_type(2);
  static const int FileSystem_File_Exists_offsets_[1] = {
  };
  FileSystem_File_Exists_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Exists_descriptor_,
      FileSystem_File_Exists::default_instance_,
      FileSystem_File_Exists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Exists));
  FileSystem_File_Exists_Request_descriptor_ = FileSystem_File_Exists_descriptor_->nested_type(0);
  static const int FileSystem_File_Exists_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists_Request, path_),
  };
  FileSystem_File_Exists_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Exists_Request_descriptor_,
      FileSystem_File_Exists_Request::default_instance_,
      FileSystem_File_Exists_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Exists_Request));
  FileSystem_File_Exists_Status_descriptor_ = FileSystem_File_Exists_descriptor_->nested_type(1);
  static const int FileSystem_File_Exists_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists_Status, exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists_Status, path_),
  };
  FileSystem_File_Exists_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Exists_Status_descriptor_,
      FileSystem_File_Exists_Status::default_instance_,
      FileSystem_File_Exists_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Exists_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Exists_Status));
  FileSystem_File_Remove_descriptor_ = FileSystem_File_descriptor_->nested_type(3);
  static const int FileSystem_File_Remove_offsets_[1] = {
  };
  FileSystem_File_Remove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Remove_descriptor_,
      FileSystem_File_Remove::default_instance_,
      FileSystem_File_Remove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Remove));
  FileSystem_File_Remove_Request_descriptor_ = FileSystem_File_Remove_descriptor_->nested_type(0);
  static const int FileSystem_File_Remove_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove_Request, path_),
  };
  FileSystem_File_Remove_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Remove_Request_descriptor_,
      FileSystem_File_Remove_Request::default_instance_,
      FileSystem_File_Remove_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Remove_Request));
  FileSystem_File_Remove_Update_descriptor_ = FileSystem_File_Remove_descriptor_->nested_type(1);
  static const int FileSystem_File_Remove_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove_Update, path_),
  };
  FileSystem_File_Remove_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Remove_Update_descriptor_,
      FileSystem_File_Remove_Update::default_instance_,
      FileSystem_File_Remove_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Remove_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Remove_Update));
  FileSystem_File_Copy_descriptor_ = FileSystem_File_descriptor_->nested_type(4);
  static const int FileSystem_File_Copy_offsets_[1] = {
  };
  FileSystem_File_Copy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Copy_descriptor_,
      FileSystem_File_Copy::default_instance_,
      FileSystem_File_Copy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Copy));
  FileSystem_File_Copy_Request_descriptor_ = FileSystem_File_Copy_descriptor_->nested_type(0);
  static const int FileSystem_File_Copy_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Request, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Request, dst_),
  };
  FileSystem_File_Copy_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Copy_Request_descriptor_,
      FileSystem_File_Copy_Request::default_instance_,
      FileSystem_File_Copy_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Copy_Request));
  FileSystem_File_Copy_Update_descriptor_ = FileSystem_File_Copy_descriptor_->nested_type(1);
  static const int FileSystem_File_Copy_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Update, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Update, dst_),
  };
  FileSystem_File_Copy_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Copy_Update_descriptor_,
      FileSystem_File_Copy_Update::default_instance_,
      FileSystem_File_Copy_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Copy_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Copy_Update));
  FileSystem_File_Move_descriptor_ = FileSystem_File_descriptor_->nested_type(5);
  static const int FileSystem_File_Move_offsets_[1] = {
  };
  FileSystem_File_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Move_descriptor_,
      FileSystem_File_Move::default_instance_,
      FileSystem_File_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Move));
  FileSystem_File_Move_Request_descriptor_ = FileSystem_File_Move_descriptor_->nested_type(0);
  static const int FileSystem_File_Move_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Request, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Request, dst_),
  };
  FileSystem_File_Move_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Move_Request_descriptor_,
      FileSystem_File_Move_Request::default_instance_,
      FileSystem_File_Move_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Move_Request));
  FileSystem_File_Move_Update_descriptor_ = FileSystem_File_Move_descriptor_->nested_type(1);
  static const int FileSystem_File_Move_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Update, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Update, dst_),
  };
  FileSystem_File_Move_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_File_Move_Update_descriptor_,
      FileSystem_File_Move_Update::default_instance_,
      FileSystem_File_Move_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem_File_Move_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem_File_Move_Update));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_file_2dmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_descriptor_, &FileSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_descriptor_, &FileSystem_Directory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Fetch_descriptor_, &FileSystem_Directory_Fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Fetch_Request_descriptor_, &FileSystem_Directory_Fetch_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Fetch_Status_descriptor_, &FileSystem_Directory_Fetch_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Upload_descriptor_, &FileSystem_Directory_Upload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Upload_Request_descriptor_, &FileSystem_Directory_Upload_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Upload_Status_descriptor_, &FileSystem_Directory_Upload_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Create_descriptor_, &FileSystem_Directory_Create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Create_Request_descriptor_, &FileSystem_Directory_Create_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Create_Update_descriptor_, &FileSystem_Directory_Create_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Exists_descriptor_, &FileSystem_Directory_Exists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Exists_Request_descriptor_, &FileSystem_Directory_Exists_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Exists_Status_descriptor_, &FileSystem_Directory_Exists_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_List_descriptor_, &FileSystem_Directory_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_List_Request_descriptor_, &FileSystem_Directory_List_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_List_Status_descriptor_, &FileSystem_Directory_List_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Remove_descriptor_, &FileSystem_Directory_Remove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Remove_Request_descriptor_, &FileSystem_Directory_Remove_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Remove_Update_descriptor_, &FileSystem_Directory_Remove_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Copy_descriptor_, &FileSystem_Directory_Copy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Copy_Request_descriptor_, &FileSystem_Directory_Copy_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Copy_Update_descriptor_, &FileSystem_Directory_Copy_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Move_descriptor_, &FileSystem_Directory_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Move_Request_descriptor_, &FileSystem_Directory_Move_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_Directory_Move_Update_descriptor_, &FileSystem_Directory_Move_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_descriptor_, &FileSystem_File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Fetch_descriptor_, &FileSystem_File_Fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Fetch_Request_descriptor_, &FileSystem_File_Fetch_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Fetch_Status_descriptor_, &FileSystem_File_Fetch_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Upload_descriptor_, &FileSystem_File_Upload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Upload_Request_descriptor_, &FileSystem_File_Upload_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Upload_Status_descriptor_, &FileSystem_File_Upload_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Exists_descriptor_, &FileSystem_File_Exists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Exists_Request_descriptor_, &FileSystem_File_Exists_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Exists_Status_descriptor_, &FileSystem_File_Exists_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Remove_descriptor_, &FileSystem_File_Remove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Remove_Request_descriptor_, &FileSystem_File_Remove_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Remove_Update_descriptor_, &FileSystem_File_Remove_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Copy_descriptor_, &FileSystem_File_Copy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Copy_Request_descriptor_, &FileSystem_File_Copy_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Copy_Update_descriptor_, &FileSystem_File_Copy_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Move_descriptor_, &FileSystem_File_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Move_Request_descriptor_, &FileSystem_File_Move_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_File_Move_Update_descriptor_, &FileSystem_File_Move_Update::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_file_2dmanager_2eproto() {
  delete FileSystem::default_instance_;
  delete FileSystem_reflection_;
  delete FileSystem_Directory::default_instance_;
  delete FileSystem_Directory_reflection_;
  delete FileSystem_Directory_Fetch::default_instance_;
  delete FileSystem_Directory_Fetch_reflection_;
  delete FileSystem_Directory_Fetch_Request::default_instance_;
  delete FileSystem_Directory_Fetch_Request_reflection_;
  delete FileSystem_Directory_Fetch_Status::default_instance_;
  delete FileSystem_Directory_Fetch_Status_reflection_;
  delete FileSystem_Directory_Upload::default_instance_;
  delete FileSystem_Directory_Upload_reflection_;
  delete FileSystem_Directory_Upload_Request::default_instance_;
  delete FileSystem_Directory_Upload_Request_reflection_;
  delete FileSystem_Directory_Upload_Status::default_instance_;
  delete FileSystem_Directory_Upload_Status_reflection_;
  delete FileSystem_Directory_Create::default_instance_;
  delete FileSystem_Directory_Create_reflection_;
  delete FileSystem_Directory_Create_Request::default_instance_;
  delete FileSystem_Directory_Create_Request_reflection_;
  delete FileSystem_Directory_Create_Update::default_instance_;
  delete FileSystem_Directory_Create_Update_reflection_;
  delete FileSystem_Directory_Exists::default_instance_;
  delete FileSystem_Directory_Exists_reflection_;
  delete FileSystem_Directory_Exists_Request::default_instance_;
  delete FileSystem_Directory_Exists_Request_reflection_;
  delete FileSystem_Directory_Exists_Status::default_instance_;
  delete FileSystem_Directory_Exists_Status_reflection_;
  delete FileSystem_Directory_List::default_instance_;
  delete FileSystem_Directory_List_reflection_;
  delete FileSystem_Directory_List_Request::default_instance_;
  delete FileSystem_Directory_List_Request_reflection_;
  delete FileSystem_Directory_List_Status::default_instance_;
  delete FileSystem_Directory_List_Status_reflection_;
  delete FileSystem_Directory_Remove::default_instance_;
  delete FileSystem_Directory_Remove_reflection_;
  delete FileSystem_Directory_Remove_Request::default_instance_;
  delete FileSystem_Directory_Remove_Request_reflection_;
  delete FileSystem_Directory_Remove_Update::default_instance_;
  delete FileSystem_Directory_Remove_Update_reflection_;
  delete FileSystem_Directory_Copy::default_instance_;
  delete FileSystem_Directory_Copy_reflection_;
  delete FileSystem_Directory_Copy_Request::default_instance_;
  delete FileSystem_Directory_Copy_Request_reflection_;
  delete FileSystem_Directory_Copy_Update::default_instance_;
  delete FileSystem_Directory_Copy_Update_reflection_;
  delete FileSystem_Directory_Move::default_instance_;
  delete FileSystem_Directory_Move_reflection_;
  delete FileSystem_Directory_Move_Request::default_instance_;
  delete FileSystem_Directory_Move_Request_reflection_;
  delete FileSystem_Directory_Move_Update::default_instance_;
  delete FileSystem_Directory_Move_Update_reflection_;
  delete FileSystem_File::default_instance_;
  delete FileSystem_File_reflection_;
  delete FileSystem_File_Fetch::default_instance_;
  delete FileSystem_File_Fetch_reflection_;
  delete FileSystem_File_Fetch_Request::default_instance_;
  delete FileSystem_File_Fetch_Request_reflection_;
  delete FileSystem_File_Fetch_Status::default_instance_;
  delete FileSystem_File_Fetch_Status_reflection_;
  delete FileSystem_File_Upload::default_instance_;
  delete FileSystem_File_Upload_reflection_;
  delete FileSystem_File_Upload_Request::default_instance_;
  delete FileSystem_File_Upload_Request_reflection_;
  delete FileSystem_File_Upload_Status::default_instance_;
  delete FileSystem_File_Upload_Status_reflection_;
  delete FileSystem_File_Exists::default_instance_;
  delete FileSystem_File_Exists_reflection_;
  delete FileSystem_File_Exists_Request::default_instance_;
  delete FileSystem_File_Exists_Request_reflection_;
  delete FileSystem_File_Exists_Status::default_instance_;
  delete FileSystem_File_Exists_Status_reflection_;
  delete FileSystem_File_Remove::default_instance_;
  delete FileSystem_File_Remove_reflection_;
  delete FileSystem_File_Remove_Request::default_instance_;
  delete FileSystem_File_Remove_Request_reflection_;
  delete FileSystem_File_Remove_Update::default_instance_;
  delete FileSystem_File_Remove_Update_reflection_;
  delete FileSystem_File_Copy::default_instance_;
  delete FileSystem_File_Copy_reflection_;
  delete FileSystem_File_Copy_Request::default_instance_;
  delete FileSystem_File_Copy_Request_reflection_;
  delete FileSystem_File_Copy_Update::default_instance_;
  delete FileSystem_File_Copy_Update_reflection_;
  delete FileSystem_File_Move::default_instance_;
  delete FileSystem_File_Move_reflection_;
  delete FileSystem_File_Move_Request::default_instance_;
  delete FileSystem_File_Move_Request_reflection_;
  delete FileSystem_File_Move_Update::default_instance_;
  delete FileSystem_File_Move_Update_reflection_;
}

void protobuf_AddDesc_file_2dmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022file-manager.proto\022\033generated.proto.fi"
    "leManager\"\340\007\n\nFileSystem\032\253\004\n\tDirectory\0328"
    "\n\005Fetch\032\027\n\007Request\022\014\n\004path\030\001 \002(\t\032\026\n\006Stat"
    "us\022\014\n\004path\030\001 \002(\t\0329\n\006Upload\032\027\n\007Request\022\014\n"
    "\004path\030\001 \002(\t\032\026\n\006Status\022\014\n\004path\030\001 \002(\t\0329\n\006C"
    "reate\032\027\n\007Request\022\014\n\004path\030\001 \002(\t\032\026\n\006Update"
    "\022\014\n\004path\030\001 \002(\t\032I\n\006Exists\032\027\n\007Request\022\014\n\004p"
    "ath\030\001 \002(\t\032&\n\006Status\022\016\n\006exists\030\001 \002(\010\022\014\n\004p"
    "ath\030\002 \002(\t\032F\n\004List\032\027\n\007Request\022\014\n\004path\030\001 \002"
    "(\t\032%\n\006Status\022\r\n\005items\030\001 \003(\t\022\014\n\004path\030\002 \002("
    "\t\0329\n\006Remove\032\027\n\007Request\022\014\n\004path\030\001 \002(\t\032\026\n\006"
    "Update\022\014\n\004path\030\001 \002(\t\032O\n\004Copy\032#\n\007Request\022"
    "\013\n\003src\030\001 \002(\t\022\013\n\003dst\030\002 \002(\t\032\"\n\006Update\022\013\n\003s"
    "rc\030\001 \002(\t\022\013\n\003dst\030\002 \002(\t\032O\n\004Move\032#\n\007Request"
    "\022\013\n\003src\030\001 \002(\t\022\013\n\003dst\030\002 \002(\t\032\"\n\006Update\022\013\n\003"
    "src\030\001 \002(\t\022\013\n\003dst\030\002 \002(\t\032\243\003\n\004File\0328\n\005Fetch"
    "\032\027\n\007Request\022\014\n\004path\030\001 \002(\t\032\026\n\006Status\022\014\n\004p"
    "ath\030\001 \002(\t\0329\n\006Upload\032\027\n\007Request\022\014\n\004path\030\001"
    " \002(\t\032\026\n\006Status\022\014\n\004path\030\001 \002(\t\032I\n\006Exists\032\027"
    "\n\007Request\022\014\n\004path\030\001 \002(\t\032&\n\006Status\022\016\n\006exi"
    "sts\030\001 \002(\010\022\014\n\004path\030\002 \002(\t\0329\n\006Remove\032\027\n\007Req"
    "uest\022\014\n\004path\030\001 \002(\t\032\026\n\006Update\022\014\n\004path\030\001 \002"
    "(\t\032O\n\004Copy\032#\n\007Request\022\013\n\003src\030\001 \002(\t\022\013\n\003ds"
    "t\030\002 \002(\t\032\"\n\006Update\022\013\n\003src\030\001 \002(\t\022\013\n\003dst\030\002 "
    "\002(\t\032O\n\004Move\032#\n\007Request\022\013\n\003src\030\001 \002(\t\022\013\n\003d"
    "st\030\002 \002(\t\032\"\n\006Update\022\013\n\003src\030\001 \002(\t\022\013\n\003dst\030\002"
    " \002(\t", 1044);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file-manager.proto", &protobuf_RegisterTypes);
  FileSystem::default_instance_ = new FileSystem();
  FileSystem_Directory::default_instance_ = new FileSystem_Directory();
  FileSystem_Directory_Fetch::default_instance_ = new FileSystem_Directory_Fetch();
  FileSystem_Directory_Fetch_Request::default_instance_ = new FileSystem_Directory_Fetch_Request();
  FileSystem_Directory_Fetch_Status::default_instance_ = new FileSystem_Directory_Fetch_Status();
  FileSystem_Directory_Upload::default_instance_ = new FileSystem_Directory_Upload();
  FileSystem_Directory_Upload_Request::default_instance_ = new FileSystem_Directory_Upload_Request();
  FileSystem_Directory_Upload_Status::default_instance_ = new FileSystem_Directory_Upload_Status();
  FileSystem_Directory_Create::default_instance_ = new FileSystem_Directory_Create();
  FileSystem_Directory_Create_Request::default_instance_ = new FileSystem_Directory_Create_Request();
  FileSystem_Directory_Create_Update::default_instance_ = new FileSystem_Directory_Create_Update();
  FileSystem_Directory_Exists::default_instance_ = new FileSystem_Directory_Exists();
  FileSystem_Directory_Exists_Request::default_instance_ = new FileSystem_Directory_Exists_Request();
  FileSystem_Directory_Exists_Status::default_instance_ = new FileSystem_Directory_Exists_Status();
  FileSystem_Directory_List::default_instance_ = new FileSystem_Directory_List();
  FileSystem_Directory_List_Request::default_instance_ = new FileSystem_Directory_List_Request();
  FileSystem_Directory_List_Status::default_instance_ = new FileSystem_Directory_List_Status();
  FileSystem_Directory_Remove::default_instance_ = new FileSystem_Directory_Remove();
  FileSystem_Directory_Remove_Request::default_instance_ = new FileSystem_Directory_Remove_Request();
  FileSystem_Directory_Remove_Update::default_instance_ = new FileSystem_Directory_Remove_Update();
  FileSystem_Directory_Copy::default_instance_ = new FileSystem_Directory_Copy();
  FileSystem_Directory_Copy_Request::default_instance_ = new FileSystem_Directory_Copy_Request();
  FileSystem_Directory_Copy_Update::default_instance_ = new FileSystem_Directory_Copy_Update();
  FileSystem_Directory_Move::default_instance_ = new FileSystem_Directory_Move();
  FileSystem_Directory_Move_Request::default_instance_ = new FileSystem_Directory_Move_Request();
  FileSystem_Directory_Move_Update::default_instance_ = new FileSystem_Directory_Move_Update();
  FileSystem_File::default_instance_ = new FileSystem_File();
  FileSystem_File_Fetch::default_instance_ = new FileSystem_File_Fetch();
  FileSystem_File_Fetch_Request::default_instance_ = new FileSystem_File_Fetch_Request();
  FileSystem_File_Fetch_Status::default_instance_ = new FileSystem_File_Fetch_Status();
  FileSystem_File_Upload::default_instance_ = new FileSystem_File_Upload();
  FileSystem_File_Upload_Request::default_instance_ = new FileSystem_File_Upload_Request();
  FileSystem_File_Upload_Status::default_instance_ = new FileSystem_File_Upload_Status();
  FileSystem_File_Exists::default_instance_ = new FileSystem_File_Exists();
  FileSystem_File_Exists_Request::default_instance_ = new FileSystem_File_Exists_Request();
  FileSystem_File_Exists_Status::default_instance_ = new FileSystem_File_Exists_Status();
  FileSystem_File_Remove::default_instance_ = new FileSystem_File_Remove();
  FileSystem_File_Remove_Request::default_instance_ = new FileSystem_File_Remove_Request();
  FileSystem_File_Remove_Update::default_instance_ = new FileSystem_File_Remove_Update();
  FileSystem_File_Copy::default_instance_ = new FileSystem_File_Copy();
  FileSystem_File_Copy_Request::default_instance_ = new FileSystem_File_Copy_Request();
  FileSystem_File_Copy_Update::default_instance_ = new FileSystem_File_Copy_Update();
  FileSystem_File_Move::default_instance_ = new FileSystem_File_Move();
  FileSystem_File_Move_Request::default_instance_ = new FileSystem_File_Move_Request();
  FileSystem_File_Move_Update::default_instance_ = new FileSystem_File_Move_Update();
  FileSystem::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Fetch::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Fetch_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Fetch_Status::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Upload::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Upload_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Upload_Status::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Create::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Create_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Create_Update::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Exists::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Exists_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Exists_Status::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_List::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_List_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_List_Status::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Remove::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Remove_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Remove_Update::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Copy::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Copy_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Copy_Update::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Move::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Move_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_Directory_Move_Update::default_instance_->InitAsDefaultInstance();
  FileSystem_File::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Fetch::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Fetch_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Fetch_Status::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Upload::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Upload_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Upload_Status::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Exists::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Exists_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Exists_Status::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Remove::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Remove_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Remove_Update::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Copy::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Copy_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Copy_Update::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Move::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Move_Request::default_instance_->InitAsDefaultInstance();
  FileSystem_File_Move_Update::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_file_2dmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_file_2dmanager_2eproto {
  StaticDescriptorInitializer_file_2dmanager_2eproto() {
    protobuf_AddDesc_file_2dmanager_2eproto();
  }
} static_descriptor_initializer_file_2dmanager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FileSystem_Directory_Fetch_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Fetch_Request::FileSystem_Directory_Fetch_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Fetch_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_Fetch_Request::FileSystem_Directory_Fetch_Request(const FileSystem_Directory_Fetch_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Fetch_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Fetch_Request::~FileSystem_Directory_Fetch_Request() {
  SharedDtor();
}

void FileSystem_Directory_Fetch_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Fetch_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Fetch_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Fetch_Request_descriptor_;
}

const FileSystem_Directory_Fetch_Request& FileSystem_Directory_Fetch_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Fetch_Request* FileSystem_Directory_Fetch_Request::default_instance_ = NULL;

FileSystem_Directory_Fetch_Request* FileSystem_Directory_Fetch_Request::New() const {
  return new FileSystem_Directory_Fetch_Request;
}

void FileSystem_Directory_Fetch_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Fetch_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Fetch_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Fetch_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Fetch_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Fetch_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Fetch_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Fetch_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Fetch_Request::MergeFrom(const FileSystem_Directory_Fetch_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Fetch_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Fetch_Request::CopyFrom(const FileSystem_Directory_Fetch_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Fetch_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Fetch_Request::Swap(FileSystem_Directory_Fetch_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Fetch_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Fetch_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_Fetch_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Fetch_Status::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Fetch_Status::FileSystem_Directory_Fetch_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Fetch_Status::InitAsDefaultInstance() {
}

FileSystem_Directory_Fetch_Status::FileSystem_Directory_Fetch_Status(const FileSystem_Directory_Fetch_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Fetch_Status::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Fetch_Status::~FileSystem_Directory_Fetch_Status() {
  SharedDtor();
}

void FileSystem_Directory_Fetch_Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Fetch_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Fetch_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Fetch_Status_descriptor_;
}

const FileSystem_Directory_Fetch_Status& FileSystem_Directory_Fetch_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Fetch_Status* FileSystem_Directory_Fetch_Status::default_instance_ = NULL;

FileSystem_Directory_Fetch_Status* FileSystem_Directory_Fetch_Status::New() const {
  return new FileSystem_Directory_Fetch_Status;
}

void FileSystem_Directory_Fetch_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Fetch_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Fetch_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Fetch_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Fetch_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Fetch_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Fetch_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Fetch_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Fetch_Status::MergeFrom(const FileSystem_Directory_Fetch_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Fetch_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Fetch_Status::CopyFrom(const FileSystem_Directory_Fetch_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Fetch_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Fetch_Status::Swap(FileSystem_Directory_Fetch_Status* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Fetch_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Fetch_Status_descriptor_;
  metadata.reflection = FileSystem_Directory_Fetch_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_Fetch::FileSystem_Directory_Fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Fetch::InitAsDefaultInstance() {
}

FileSystem_Directory_Fetch::FileSystem_Directory_Fetch(const FileSystem_Directory_Fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Fetch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Fetch::~FileSystem_Directory_Fetch() {
  SharedDtor();
}

void FileSystem_Directory_Fetch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Fetch_descriptor_;
}

const FileSystem_Directory_Fetch& FileSystem_Directory_Fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Fetch* FileSystem_Directory_Fetch::default_instance_ = NULL;

FileSystem_Directory_Fetch* FileSystem_Directory_Fetch::New() const {
  return new FileSystem_Directory_Fetch;
}

void FileSystem_Directory_Fetch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Fetch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Fetch::MergeFrom(const FileSystem_Directory_Fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Fetch::CopyFrom(const FileSystem_Directory_Fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Fetch::IsInitialized() const {

  return true;
}

void FileSystem_Directory_Fetch::Swap(FileSystem_Directory_Fetch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Fetch_descriptor_;
  metadata.reflection = FileSystem_Directory_Fetch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Upload_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Upload_Request::FileSystem_Directory_Upload_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Upload_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_Upload_Request::FileSystem_Directory_Upload_Request(const FileSystem_Directory_Upload_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Upload_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Upload_Request::~FileSystem_Directory_Upload_Request() {
  SharedDtor();
}

void FileSystem_Directory_Upload_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Upload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Upload_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Upload_Request_descriptor_;
}

const FileSystem_Directory_Upload_Request& FileSystem_Directory_Upload_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Upload_Request* FileSystem_Directory_Upload_Request::default_instance_ = NULL;

FileSystem_Directory_Upload_Request* FileSystem_Directory_Upload_Request::New() const {
  return new FileSystem_Directory_Upload_Request;
}

void FileSystem_Directory_Upload_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Upload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Upload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Upload_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Upload_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Upload_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Upload_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Upload_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Upload_Request::MergeFrom(const FileSystem_Directory_Upload_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Upload_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Upload_Request::CopyFrom(const FileSystem_Directory_Upload_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Upload_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Upload_Request::Swap(FileSystem_Directory_Upload_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Upload_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Upload_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_Upload_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Upload_Status::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Upload_Status::FileSystem_Directory_Upload_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Upload_Status::InitAsDefaultInstance() {
}

FileSystem_Directory_Upload_Status::FileSystem_Directory_Upload_Status(const FileSystem_Directory_Upload_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Upload_Status::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Upload_Status::~FileSystem_Directory_Upload_Status() {
  SharedDtor();
}

void FileSystem_Directory_Upload_Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Upload_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Upload_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Upload_Status_descriptor_;
}

const FileSystem_Directory_Upload_Status& FileSystem_Directory_Upload_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Upload_Status* FileSystem_Directory_Upload_Status::default_instance_ = NULL;

FileSystem_Directory_Upload_Status* FileSystem_Directory_Upload_Status::New() const {
  return new FileSystem_Directory_Upload_Status;
}

void FileSystem_Directory_Upload_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Upload_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Upload_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Upload_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Upload_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Upload_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Upload_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Upload_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Upload_Status::MergeFrom(const FileSystem_Directory_Upload_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Upload_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Upload_Status::CopyFrom(const FileSystem_Directory_Upload_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Upload_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Upload_Status::Swap(FileSystem_Directory_Upload_Status* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Upload_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Upload_Status_descriptor_;
  metadata.reflection = FileSystem_Directory_Upload_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_Upload::FileSystem_Directory_Upload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Upload::InitAsDefaultInstance() {
}

FileSystem_Directory_Upload::FileSystem_Directory_Upload(const FileSystem_Directory_Upload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Upload::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Upload::~FileSystem_Directory_Upload() {
  SharedDtor();
}

void FileSystem_Directory_Upload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Upload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Upload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Upload_descriptor_;
}

const FileSystem_Directory_Upload& FileSystem_Directory_Upload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Upload* FileSystem_Directory_Upload::default_instance_ = NULL;

FileSystem_Directory_Upload* FileSystem_Directory_Upload::New() const {
  return new FileSystem_Directory_Upload;
}

void FileSystem_Directory_Upload::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Upload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Upload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Upload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Upload::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Upload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Upload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Upload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Upload::MergeFrom(const FileSystem_Directory_Upload& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Upload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Upload::CopyFrom(const FileSystem_Directory_Upload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Upload::IsInitialized() const {

  return true;
}

void FileSystem_Directory_Upload::Swap(FileSystem_Directory_Upload* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Upload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Upload_descriptor_;
  metadata.reflection = FileSystem_Directory_Upload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Create_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Create_Request::FileSystem_Directory_Create_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Create_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_Create_Request::FileSystem_Directory_Create_Request(const FileSystem_Directory_Create_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Create_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Create_Request::~FileSystem_Directory_Create_Request() {
  SharedDtor();
}

void FileSystem_Directory_Create_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Create_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Create_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Create_Request_descriptor_;
}

const FileSystem_Directory_Create_Request& FileSystem_Directory_Create_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Create_Request* FileSystem_Directory_Create_Request::default_instance_ = NULL;

FileSystem_Directory_Create_Request* FileSystem_Directory_Create_Request::New() const {
  return new FileSystem_Directory_Create_Request;
}

void FileSystem_Directory_Create_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Create_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Create_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Create_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Create_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Create_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Create_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Create_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Create_Request::MergeFrom(const FileSystem_Directory_Create_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Create_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Create_Request::CopyFrom(const FileSystem_Directory_Create_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Create_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Create_Request::Swap(FileSystem_Directory_Create_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Create_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Create_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_Create_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Create_Update::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Create_Update::FileSystem_Directory_Create_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Create_Update::InitAsDefaultInstance() {
}

FileSystem_Directory_Create_Update::FileSystem_Directory_Create_Update(const FileSystem_Directory_Create_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Create_Update::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Create_Update::~FileSystem_Directory_Create_Update() {
  SharedDtor();
}

void FileSystem_Directory_Create_Update::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Create_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Create_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Create_Update_descriptor_;
}

const FileSystem_Directory_Create_Update& FileSystem_Directory_Create_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Create_Update* FileSystem_Directory_Create_Update::default_instance_ = NULL;

FileSystem_Directory_Create_Update* FileSystem_Directory_Create_Update::New() const {
  return new FileSystem_Directory_Create_Update;
}

void FileSystem_Directory_Create_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Create_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Create_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Create_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Create_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Create_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Create_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Create_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Create_Update::MergeFrom(const FileSystem_Directory_Create_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Create_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Create_Update::CopyFrom(const FileSystem_Directory_Create_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Create_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Create_Update::Swap(FileSystem_Directory_Create_Update* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Create_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Create_Update_descriptor_;
  metadata.reflection = FileSystem_Directory_Create_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_Create::FileSystem_Directory_Create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Create::InitAsDefaultInstance() {
}

FileSystem_Directory_Create::FileSystem_Directory_Create(const FileSystem_Directory_Create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Create::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Create::~FileSystem_Directory_Create() {
  SharedDtor();
}

void FileSystem_Directory_Create::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Create_descriptor_;
}

const FileSystem_Directory_Create& FileSystem_Directory_Create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Create* FileSystem_Directory_Create::default_instance_ = NULL;

FileSystem_Directory_Create* FileSystem_Directory_Create::New() const {
  return new FileSystem_Directory_Create;
}

void FileSystem_Directory_Create::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Create::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Create::MergeFrom(const FileSystem_Directory_Create& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Create::CopyFrom(const FileSystem_Directory_Create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Create::IsInitialized() const {

  return true;
}

void FileSystem_Directory_Create::Swap(FileSystem_Directory_Create* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Create_descriptor_;
  metadata.reflection = FileSystem_Directory_Create_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Exists_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Exists_Request::FileSystem_Directory_Exists_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Exists_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_Exists_Request::FileSystem_Directory_Exists_Request(const FileSystem_Directory_Exists_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Exists_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Exists_Request::~FileSystem_Directory_Exists_Request() {
  SharedDtor();
}

void FileSystem_Directory_Exists_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Exists_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Exists_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Exists_Request_descriptor_;
}

const FileSystem_Directory_Exists_Request& FileSystem_Directory_Exists_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Exists_Request* FileSystem_Directory_Exists_Request::default_instance_ = NULL;

FileSystem_Directory_Exists_Request* FileSystem_Directory_Exists_Request::New() const {
  return new FileSystem_Directory_Exists_Request;
}

void FileSystem_Directory_Exists_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Exists_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Exists_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Exists_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Exists_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Exists_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Exists_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Exists_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Exists_Request::MergeFrom(const FileSystem_Directory_Exists_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Exists_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Exists_Request::CopyFrom(const FileSystem_Directory_Exists_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Exists_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Exists_Request::Swap(FileSystem_Directory_Exists_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Exists_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Exists_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_Exists_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Exists_Status::kExistsFieldNumber;
const int FileSystem_Directory_Exists_Status::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Exists_Status::FileSystem_Directory_Exists_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Exists_Status::InitAsDefaultInstance() {
}

FileSystem_Directory_Exists_Status::FileSystem_Directory_Exists_Status(const FileSystem_Directory_Exists_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Exists_Status::SharedCtor() {
  _cached_size_ = 0;
  exists_ = false;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Exists_Status::~FileSystem_Directory_Exists_Status() {
  SharedDtor();
}

void FileSystem_Directory_Exists_Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Exists_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Exists_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Exists_Status_descriptor_;
}

const FileSystem_Directory_Exists_Status& FileSystem_Directory_Exists_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Exists_Status* FileSystem_Directory_Exists_Status::default_instance_ = NULL;

FileSystem_Directory_Exists_Status* FileSystem_Directory_Exists_Status::New() const {
  return new FileSystem_Directory_Exists_Status;
}

void FileSystem_Directory_Exists_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exists_ = false;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Exists_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool exists = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
          set_has_exists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Exists_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool exists = 1;
  if (has_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->exists(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Exists_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool exists = 1;
  if (has_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->exists(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Exists_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool exists = 1;
    if (has_exists()) {
      total_size += 1 + 1;
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Exists_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Exists_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Exists_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Exists_Status::MergeFrom(const FileSystem_Directory_Exists_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exists()) {
      set_exists(from.exists());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Exists_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Exists_Status::CopyFrom(const FileSystem_Directory_Exists_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Exists_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_Directory_Exists_Status::Swap(FileSystem_Directory_Exists_Status* other) {
  if (other != this) {
    std::swap(exists_, other->exists_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Exists_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Exists_Status_descriptor_;
  metadata.reflection = FileSystem_Directory_Exists_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_Exists::FileSystem_Directory_Exists()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Exists::InitAsDefaultInstance() {
}

FileSystem_Directory_Exists::FileSystem_Directory_Exists(const FileSystem_Directory_Exists& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Exists::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Exists::~FileSystem_Directory_Exists() {
  SharedDtor();
}

void FileSystem_Directory_Exists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Exists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Exists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Exists_descriptor_;
}

const FileSystem_Directory_Exists& FileSystem_Directory_Exists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Exists* FileSystem_Directory_Exists::default_instance_ = NULL;

FileSystem_Directory_Exists* FileSystem_Directory_Exists::New() const {
  return new FileSystem_Directory_Exists;
}

void FileSystem_Directory_Exists::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Exists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Exists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Exists::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Exists::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Exists::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Exists* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Exists*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Exists::MergeFrom(const FileSystem_Directory_Exists& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Exists::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Exists::CopyFrom(const FileSystem_Directory_Exists& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Exists::IsInitialized() const {

  return true;
}

void FileSystem_Directory_Exists::Swap(FileSystem_Directory_Exists* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Exists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Exists_descriptor_;
  metadata.reflection = FileSystem_Directory_Exists_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_List_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_List_Request::FileSystem_Directory_List_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_List_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_List_Request::FileSystem_Directory_List_Request(const FileSystem_Directory_List_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_List_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_List_Request::~FileSystem_Directory_List_Request() {
  SharedDtor();
}

void FileSystem_Directory_List_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_List_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_List_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_List_Request_descriptor_;
}

const FileSystem_Directory_List_Request& FileSystem_Directory_List_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_List_Request* FileSystem_Directory_List_Request::default_instance_ = NULL;

FileSystem_Directory_List_Request* FileSystem_Directory_List_Request::New() const {
  return new FileSystem_Directory_List_Request;
}

void FileSystem_Directory_List_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_List_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_List_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_List_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_List_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_List_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_List_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_List_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_List_Request::MergeFrom(const FileSystem_Directory_List_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_List_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_List_Request::CopyFrom(const FileSystem_Directory_List_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_List_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_List_Request::Swap(FileSystem_Directory_List_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_List_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_List_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_List_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_List_Status::kItemsFieldNumber;
const int FileSystem_Directory_List_Status::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_List_Status::FileSystem_Directory_List_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_List_Status::InitAsDefaultInstance() {
}

FileSystem_Directory_List_Status::FileSystem_Directory_List_Status(const FileSystem_Directory_List_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_List_Status::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_List_Status::~FileSystem_Directory_List_Status() {
  SharedDtor();
}

void FileSystem_Directory_List_Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_List_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_List_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_List_Status_descriptor_;
}

const FileSystem_Directory_List_Status& FileSystem_Directory_List_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_List_Status* FileSystem_Directory_List_Status::default_instance_ = NULL;

FileSystem_Directory_List_Status* FileSystem_Directory_List_Status::New() const {
  return new FileSystem_Directory_List_Status;
}

void FileSystem_Directory_List_Status::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_List_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items(this->items_size() - 1).data(),
            this->items(this->items_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_List_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string items = 1;
  for (int i = 0; i < this->items_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->items(i).data(), this->items(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->items(i), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_List_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items(i).data(), this->items(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->items(i), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_List_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  // repeated string items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_List_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_List_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_List_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_List_Status::MergeFrom(const FileSystem_Directory_List_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_List_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_List_Status::CopyFrom(const FileSystem_Directory_List_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_List_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void FileSystem_Directory_List_Status::Swap(FileSystem_Directory_List_Status* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_List_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_List_Status_descriptor_;
  metadata.reflection = FileSystem_Directory_List_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_List::FileSystem_Directory_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_List::InitAsDefaultInstance() {
}

FileSystem_Directory_List::FileSystem_Directory_List(const FileSystem_Directory_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_List::~FileSystem_Directory_List() {
  SharedDtor();
}

void FileSystem_Directory_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_List_descriptor_;
}

const FileSystem_Directory_List& FileSystem_Directory_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_List* FileSystem_Directory_List::default_instance_ = NULL;

FileSystem_Directory_List* FileSystem_Directory_List::New() const {
  return new FileSystem_Directory_List;
}

void FileSystem_Directory_List::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_List::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_List::MergeFrom(const FileSystem_Directory_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_List::CopyFrom(const FileSystem_Directory_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_List::IsInitialized() const {

  return true;
}

void FileSystem_Directory_List::Swap(FileSystem_Directory_List* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_List_descriptor_;
  metadata.reflection = FileSystem_Directory_List_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Remove_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Remove_Request::FileSystem_Directory_Remove_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Remove_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_Remove_Request::FileSystem_Directory_Remove_Request(const FileSystem_Directory_Remove_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Remove_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Remove_Request::~FileSystem_Directory_Remove_Request() {
  SharedDtor();
}

void FileSystem_Directory_Remove_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Remove_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Remove_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Remove_Request_descriptor_;
}

const FileSystem_Directory_Remove_Request& FileSystem_Directory_Remove_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Remove_Request* FileSystem_Directory_Remove_Request::default_instance_ = NULL;

FileSystem_Directory_Remove_Request* FileSystem_Directory_Remove_Request::New() const {
  return new FileSystem_Directory_Remove_Request;
}

void FileSystem_Directory_Remove_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Remove_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Remove_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Remove_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Remove_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Remove_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Remove_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Remove_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Remove_Request::MergeFrom(const FileSystem_Directory_Remove_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Remove_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Remove_Request::CopyFrom(const FileSystem_Directory_Remove_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Remove_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Remove_Request::Swap(FileSystem_Directory_Remove_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Remove_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Remove_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_Remove_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Remove_Update::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Remove_Update::FileSystem_Directory_Remove_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Remove_Update::InitAsDefaultInstance() {
}

FileSystem_Directory_Remove_Update::FileSystem_Directory_Remove_Update(const FileSystem_Directory_Remove_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Remove_Update::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Remove_Update::~FileSystem_Directory_Remove_Update() {
  SharedDtor();
}

void FileSystem_Directory_Remove_Update::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Remove_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Remove_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Remove_Update_descriptor_;
}

const FileSystem_Directory_Remove_Update& FileSystem_Directory_Remove_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Remove_Update* FileSystem_Directory_Remove_Update::default_instance_ = NULL;

FileSystem_Directory_Remove_Update* FileSystem_Directory_Remove_Update::New() const {
  return new FileSystem_Directory_Remove_Update;
}

void FileSystem_Directory_Remove_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Remove_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Remove_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Remove_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Remove_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Remove_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Remove_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Remove_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Remove_Update::MergeFrom(const FileSystem_Directory_Remove_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Remove_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Remove_Update::CopyFrom(const FileSystem_Directory_Remove_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Remove_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_Directory_Remove_Update::Swap(FileSystem_Directory_Remove_Update* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Remove_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Remove_Update_descriptor_;
  metadata.reflection = FileSystem_Directory_Remove_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_Remove::FileSystem_Directory_Remove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Remove::InitAsDefaultInstance() {
}

FileSystem_Directory_Remove::FileSystem_Directory_Remove(const FileSystem_Directory_Remove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Remove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Remove::~FileSystem_Directory_Remove() {
  SharedDtor();
}

void FileSystem_Directory_Remove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Remove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Remove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Remove_descriptor_;
}

const FileSystem_Directory_Remove& FileSystem_Directory_Remove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Remove* FileSystem_Directory_Remove::default_instance_ = NULL;

FileSystem_Directory_Remove* FileSystem_Directory_Remove::New() const {
  return new FileSystem_Directory_Remove;
}

void FileSystem_Directory_Remove::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Remove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Remove::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Remove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Remove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Remove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Remove::MergeFrom(const FileSystem_Directory_Remove& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Remove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Remove::CopyFrom(const FileSystem_Directory_Remove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Remove::IsInitialized() const {

  return true;
}

void FileSystem_Directory_Remove::Swap(FileSystem_Directory_Remove* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Remove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Remove_descriptor_;
  metadata.reflection = FileSystem_Directory_Remove_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Copy_Request::kSrcFieldNumber;
const int FileSystem_Directory_Copy_Request::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Copy_Request::FileSystem_Directory_Copy_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Copy_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_Copy_Request::FileSystem_Directory_Copy_Request(const FileSystem_Directory_Copy_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Copy_Request::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Copy_Request::~FileSystem_Directory_Copy_Request() {
  SharedDtor();
}

void FileSystem_Directory_Copy_Request::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Copy_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Copy_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Copy_Request_descriptor_;
}

const FileSystem_Directory_Copy_Request& FileSystem_Directory_Copy_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Copy_Request* FileSystem_Directory_Copy_Request::default_instance_ = NULL;

FileSystem_Directory_Copy_Request* FileSystem_Directory_Copy_Request::New() const {
  return new FileSystem_Directory_Copy_Request;
}

void FileSystem_Directory_Copy_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Copy_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Copy_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Copy_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Copy_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Copy_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Copy_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Copy_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Copy_Request::MergeFrom(const FileSystem_Directory_Copy_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Copy_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Copy_Request::CopyFrom(const FileSystem_Directory_Copy_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Copy_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_Directory_Copy_Request::Swap(FileSystem_Directory_Copy_Request* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Copy_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Copy_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_Copy_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Copy_Update::kSrcFieldNumber;
const int FileSystem_Directory_Copy_Update::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Copy_Update::FileSystem_Directory_Copy_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Copy_Update::InitAsDefaultInstance() {
}

FileSystem_Directory_Copy_Update::FileSystem_Directory_Copy_Update(const FileSystem_Directory_Copy_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Copy_Update::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Copy_Update::~FileSystem_Directory_Copy_Update() {
  SharedDtor();
}

void FileSystem_Directory_Copy_Update::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Copy_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Copy_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Copy_Update_descriptor_;
}

const FileSystem_Directory_Copy_Update& FileSystem_Directory_Copy_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Copy_Update* FileSystem_Directory_Copy_Update::default_instance_ = NULL;

FileSystem_Directory_Copy_Update* FileSystem_Directory_Copy_Update::New() const {
  return new FileSystem_Directory_Copy_Update;
}

void FileSystem_Directory_Copy_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Copy_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Copy_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Copy_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Copy_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Copy_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Copy_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Copy_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Copy_Update::MergeFrom(const FileSystem_Directory_Copy_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Copy_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Copy_Update::CopyFrom(const FileSystem_Directory_Copy_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Copy_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_Directory_Copy_Update::Swap(FileSystem_Directory_Copy_Update* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Copy_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Copy_Update_descriptor_;
  metadata.reflection = FileSystem_Directory_Copy_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_Copy::FileSystem_Directory_Copy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Copy::InitAsDefaultInstance() {
}

FileSystem_Directory_Copy::FileSystem_Directory_Copy(const FileSystem_Directory_Copy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Copy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Copy::~FileSystem_Directory_Copy() {
  SharedDtor();
}

void FileSystem_Directory_Copy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Copy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Copy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Copy_descriptor_;
}

const FileSystem_Directory_Copy& FileSystem_Directory_Copy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Copy* FileSystem_Directory_Copy::default_instance_ = NULL;

FileSystem_Directory_Copy* FileSystem_Directory_Copy::New() const {
  return new FileSystem_Directory_Copy;
}

void FileSystem_Directory_Copy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Copy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Copy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Copy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Copy::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Copy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Copy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Copy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Copy::MergeFrom(const FileSystem_Directory_Copy& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Copy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Copy::CopyFrom(const FileSystem_Directory_Copy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Copy::IsInitialized() const {

  return true;
}

void FileSystem_Directory_Copy::Swap(FileSystem_Directory_Copy* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Copy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Copy_descriptor_;
  metadata.reflection = FileSystem_Directory_Copy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Move_Request::kSrcFieldNumber;
const int FileSystem_Directory_Move_Request::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Move_Request::FileSystem_Directory_Move_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Move_Request::InitAsDefaultInstance() {
}

FileSystem_Directory_Move_Request::FileSystem_Directory_Move_Request(const FileSystem_Directory_Move_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Move_Request::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Move_Request::~FileSystem_Directory_Move_Request() {
  SharedDtor();
}

void FileSystem_Directory_Move_Request::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Move_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Move_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Move_Request_descriptor_;
}

const FileSystem_Directory_Move_Request& FileSystem_Directory_Move_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Move_Request* FileSystem_Directory_Move_Request::default_instance_ = NULL;

FileSystem_Directory_Move_Request* FileSystem_Directory_Move_Request::New() const {
  return new FileSystem_Directory_Move_Request;
}

void FileSystem_Directory_Move_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Move_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Move_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Move_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Move_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Move_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Move_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Move_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Move_Request::MergeFrom(const FileSystem_Directory_Move_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Move_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Move_Request::CopyFrom(const FileSystem_Directory_Move_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Move_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_Directory_Move_Request::Swap(FileSystem_Directory_Move_Request* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Move_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Move_Request_descriptor_;
  metadata.reflection = FileSystem_Directory_Move_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_Directory_Move_Update::kSrcFieldNumber;
const int FileSystem_Directory_Move_Update::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_Directory_Move_Update::FileSystem_Directory_Move_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Move_Update::InitAsDefaultInstance() {
}

FileSystem_Directory_Move_Update::FileSystem_Directory_Move_Update(const FileSystem_Directory_Move_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Move_Update::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Move_Update::~FileSystem_Directory_Move_Update() {
  SharedDtor();
}

void FileSystem_Directory_Move_Update::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Move_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Move_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Move_Update_descriptor_;
}

const FileSystem_Directory_Move_Update& FileSystem_Directory_Move_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Move_Update* FileSystem_Directory_Move_Update::default_instance_ = NULL;

FileSystem_Directory_Move_Update* FileSystem_Directory_Move_Update::New() const {
  return new FileSystem_Directory_Move_Update;
}

void FileSystem_Directory_Move_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Move_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Move_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Move_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Move_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Move_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Move_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Move_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Move_Update::MergeFrom(const FileSystem_Directory_Move_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Move_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Move_Update::CopyFrom(const FileSystem_Directory_Move_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Move_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_Directory_Move_Update::Swap(FileSystem_Directory_Move_Update* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Move_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Move_Update_descriptor_;
  metadata.reflection = FileSystem_Directory_Move_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory_Move::FileSystem_Directory_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory_Move::InitAsDefaultInstance() {
}

FileSystem_Directory_Move::FileSystem_Directory_Move(const FileSystem_Directory_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory_Move::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory_Move::~FileSystem_Directory_Move() {
  SharedDtor();
}

void FileSystem_Directory_Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_Move_descriptor_;
}

const FileSystem_Directory_Move& FileSystem_Directory_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory_Move* FileSystem_Directory_Move::default_instance_ = NULL;

FileSystem_Directory_Move* FileSystem_Directory_Move::New() const {
  return new FileSystem_Directory_Move;
}

void FileSystem_Directory_Move::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory_Move::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory_Move::MergeFrom(const FileSystem_Directory_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory_Move::CopyFrom(const FileSystem_Directory_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory_Move::IsInitialized() const {

  return true;
}

void FileSystem_Directory_Move::Swap(FileSystem_Directory_Move* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_Move_descriptor_;
  metadata.reflection = FileSystem_Directory_Move_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_Directory::FileSystem_Directory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_Directory::InitAsDefaultInstance() {
}

FileSystem_Directory::FileSystem_Directory(const FileSystem_Directory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_Directory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_Directory::~FileSystem_Directory() {
  SharedDtor();
}

void FileSystem_Directory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_Directory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_Directory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_Directory_descriptor_;
}

const FileSystem_Directory& FileSystem_Directory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_Directory* FileSystem_Directory::default_instance_ = NULL;

FileSystem_Directory* FileSystem_Directory::New() const {
  return new FileSystem_Directory;
}

void FileSystem_Directory::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_Directory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_Directory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_Directory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_Directory::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_Directory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_Directory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_Directory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_Directory::MergeFrom(const FileSystem_Directory& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_Directory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_Directory::CopyFrom(const FileSystem_Directory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_Directory::IsInitialized() const {

  return true;
}

void FileSystem_Directory::Swap(FileSystem_Directory* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_Directory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_Directory_descriptor_;
  metadata.reflection = FileSystem_Directory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Fetch_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Fetch_Request::FileSystem_File_Fetch_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Fetch_Request::InitAsDefaultInstance() {
}

FileSystem_File_Fetch_Request::FileSystem_File_Fetch_Request(const FileSystem_File_Fetch_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Fetch_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Fetch_Request::~FileSystem_File_Fetch_Request() {
  SharedDtor();
}

void FileSystem_File_Fetch_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Fetch_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Fetch_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Fetch_Request_descriptor_;
}

const FileSystem_File_Fetch_Request& FileSystem_File_Fetch_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Fetch_Request* FileSystem_File_Fetch_Request::default_instance_ = NULL;

FileSystem_File_Fetch_Request* FileSystem_File_Fetch_Request::New() const {
  return new FileSystem_File_Fetch_Request;
}

void FileSystem_File_Fetch_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Fetch_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Fetch_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Fetch_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Fetch_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Fetch_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Fetch_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Fetch_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Fetch_Request::MergeFrom(const FileSystem_File_Fetch_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Fetch_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Fetch_Request::CopyFrom(const FileSystem_File_Fetch_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Fetch_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_File_Fetch_Request::Swap(FileSystem_File_Fetch_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Fetch_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Fetch_Request_descriptor_;
  metadata.reflection = FileSystem_File_Fetch_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Fetch_Status::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Fetch_Status::FileSystem_File_Fetch_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Fetch_Status::InitAsDefaultInstance() {
}

FileSystem_File_Fetch_Status::FileSystem_File_Fetch_Status(const FileSystem_File_Fetch_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Fetch_Status::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Fetch_Status::~FileSystem_File_Fetch_Status() {
  SharedDtor();
}

void FileSystem_File_Fetch_Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Fetch_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Fetch_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Fetch_Status_descriptor_;
}

const FileSystem_File_Fetch_Status& FileSystem_File_Fetch_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Fetch_Status* FileSystem_File_Fetch_Status::default_instance_ = NULL;

FileSystem_File_Fetch_Status* FileSystem_File_Fetch_Status::New() const {
  return new FileSystem_File_Fetch_Status;
}

void FileSystem_File_Fetch_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Fetch_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Fetch_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Fetch_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Fetch_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Fetch_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Fetch_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Fetch_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Fetch_Status::MergeFrom(const FileSystem_File_Fetch_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Fetch_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Fetch_Status::CopyFrom(const FileSystem_File_Fetch_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Fetch_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_File_Fetch_Status::Swap(FileSystem_File_Fetch_Status* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Fetch_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Fetch_Status_descriptor_;
  metadata.reflection = FileSystem_File_Fetch_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_File_Fetch::FileSystem_File_Fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Fetch::InitAsDefaultInstance() {
}

FileSystem_File_Fetch::FileSystem_File_Fetch(const FileSystem_File_Fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Fetch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Fetch::~FileSystem_File_Fetch() {
  SharedDtor();
}

void FileSystem_File_Fetch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_File_Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Fetch_descriptor_;
}

const FileSystem_File_Fetch& FileSystem_File_Fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Fetch* FileSystem_File_Fetch::default_instance_ = NULL;

FileSystem_File_Fetch* FileSystem_File_Fetch::New() const {
  return new FileSystem_File_Fetch;
}

void FileSystem_File_Fetch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_File_Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Fetch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Fetch::MergeFrom(const FileSystem_File_Fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Fetch::CopyFrom(const FileSystem_File_Fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Fetch::IsInitialized() const {

  return true;
}

void FileSystem_File_Fetch::Swap(FileSystem_File_Fetch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Fetch_descriptor_;
  metadata.reflection = FileSystem_File_Fetch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Upload_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Upload_Request::FileSystem_File_Upload_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Upload_Request::InitAsDefaultInstance() {
}

FileSystem_File_Upload_Request::FileSystem_File_Upload_Request(const FileSystem_File_Upload_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Upload_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Upload_Request::~FileSystem_File_Upload_Request() {
  SharedDtor();
}

void FileSystem_File_Upload_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Upload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Upload_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Upload_Request_descriptor_;
}

const FileSystem_File_Upload_Request& FileSystem_File_Upload_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Upload_Request* FileSystem_File_Upload_Request::default_instance_ = NULL;

FileSystem_File_Upload_Request* FileSystem_File_Upload_Request::New() const {
  return new FileSystem_File_Upload_Request;
}

void FileSystem_File_Upload_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Upload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Upload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Upload_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Upload_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Upload_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Upload_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Upload_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Upload_Request::MergeFrom(const FileSystem_File_Upload_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Upload_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Upload_Request::CopyFrom(const FileSystem_File_Upload_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Upload_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_File_Upload_Request::Swap(FileSystem_File_Upload_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Upload_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Upload_Request_descriptor_;
  metadata.reflection = FileSystem_File_Upload_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Upload_Status::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Upload_Status::FileSystem_File_Upload_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Upload_Status::InitAsDefaultInstance() {
}

FileSystem_File_Upload_Status::FileSystem_File_Upload_Status(const FileSystem_File_Upload_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Upload_Status::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Upload_Status::~FileSystem_File_Upload_Status() {
  SharedDtor();
}

void FileSystem_File_Upload_Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Upload_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Upload_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Upload_Status_descriptor_;
}

const FileSystem_File_Upload_Status& FileSystem_File_Upload_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Upload_Status* FileSystem_File_Upload_Status::default_instance_ = NULL;

FileSystem_File_Upload_Status* FileSystem_File_Upload_Status::New() const {
  return new FileSystem_File_Upload_Status;
}

void FileSystem_File_Upload_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Upload_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Upload_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Upload_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Upload_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Upload_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Upload_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Upload_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Upload_Status::MergeFrom(const FileSystem_File_Upload_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Upload_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Upload_Status::CopyFrom(const FileSystem_File_Upload_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Upload_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_File_Upload_Status::Swap(FileSystem_File_Upload_Status* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Upload_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Upload_Status_descriptor_;
  metadata.reflection = FileSystem_File_Upload_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_File_Upload::FileSystem_File_Upload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Upload::InitAsDefaultInstance() {
}

FileSystem_File_Upload::FileSystem_File_Upload(const FileSystem_File_Upload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Upload::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Upload::~FileSystem_File_Upload() {
  SharedDtor();
}

void FileSystem_File_Upload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_File_Upload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Upload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Upload_descriptor_;
}

const FileSystem_File_Upload& FileSystem_File_Upload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Upload* FileSystem_File_Upload::default_instance_ = NULL;

FileSystem_File_Upload* FileSystem_File_Upload::New() const {
  return new FileSystem_File_Upload;
}

void FileSystem_File_Upload::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Upload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_File_Upload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Upload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Upload::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Upload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Upload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Upload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Upload::MergeFrom(const FileSystem_File_Upload& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Upload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Upload::CopyFrom(const FileSystem_File_Upload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Upload::IsInitialized() const {

  return true;
}

void FileSystem_File_Upload::Swap(FileSystem_File_Upload* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Upload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Upload_descriptor_;
  metadata.reflection = FileSystem_File_Upload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Exists_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Exists_Request::FileSystem_File_Exists_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Exists_Request::InitAsDefaultInstance() {
}

FileSystem_File_Exists_Request::FileSystem_File_Exists_Request(const FileSystem_File_Exists_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Exists_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Exists_Request::~FileSystem_File_Exists_Request() {
  SharedDtor();
}

void FileSystem_File_Exists_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Exists_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Exists_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Exists_Request_descriptor_;
}

const FileSystem_File_Exists_Request& FileSystem_File_Exists_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Exists_Request* FileSystem_File_Exists_Request::default_instance_ = NULL;

FileSystem_File_Exists_Request* FileSystem_File_Exists_Request::New() const {
  return new FileSystem_File_Exists_Request;
}

void FileSystem_File_Exists_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Exists_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Exists_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Exists_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Exists_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Exists_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Exists_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Exists_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Exists_Request::MergeFrom(const FileSystem_File_Exists_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Exists_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Exists_Request::CopyFrom(const FileSystem_File_Exists_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Exists_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_File_Exists_Request::Swap(FileSystem_File_Exists_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Exists_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Exists_Request_descriptor_;
  metadata.reflection = FileSystem_File_Exists_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Exists_Status::kExistsFieldNumber;
const int FileSystem_File_Exists_Status::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Exists_Status::FileSystem_File_Exists_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Exists_Status::InitAsDefaultInstance() {
}

FileSystem_File_Exists_Status::FileSystem_File_Exists_Status(const FileSystem_File_Exists_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Exists_Status::SharedCtor() {
  _cached_size_ = 0;
  exists_ = false;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Exists_Status::~FileSystem_File_Exists_Status() {
  SharedDtor();
}

void FileSystem_File_Exists_Status::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Exists_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Exists_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Exists_Status_descriptor_;
}

const FileSystem_File_Exists_Status& FileSystem_File_Exists_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Exists_Status* FileSystem_File_Exists_Status::default_instance_ = NULL;

FileSystem_File_Exists_Status* FileSystem_File_Exists_Status::New() const {
  return new FileSystem_File_Exists_Status;
}

void FileSystem_File_Exists_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exists_ = false;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Exists_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool exists = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
          set_has_exists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Exists_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool exists = 1;
  if (has_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->exists(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Exists_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool exists = 1;
  if (has_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->exists(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Exists_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool exists = 1;
    if (has_exists()) {
      total_size += 1 + 1;
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Exists_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Exists_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Exists_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Exists_Status::MergeFrom(const FileSystem_File_Exists_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exists()) {
      set_exists(from.exists());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Exists_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Exists_Status::CopyFrom(const FileSystem_File_Exists_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Exists_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_File_Exists_Status::Swap(FileSystem_File_Exists_Status* other) {
  if (other != this) {
    std::swap(exists_, other->exists_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Exists_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Exists_Status_descriptor_;
  metadata.reflection = FileSystem_File_Exists_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_File_Exists::FileSystem_File_Exists()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Exists::InitAsDefaultInstance() {
}

FileSystem_File_Exists::FileSystem_File_Exists(const FileSystem_File_Exists& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Exists::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Exists::~FileSystem_File_Exists() {
  SharedDtor();
}

void FileSystem_File_Exists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_File_Exists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Exists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Exists_descriptor_;
}

const FileSystem_File_Exists& FileSystem_File_Exists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Exists* FileSystem_File_Exists::default_instance_ = NULL;

FileSystem_File_Exists* FileSystem_File_Exists::New() const {
  return new FileSystem_File_Exists;
}

void FileSystem_File_Exists::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Exists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_File_Exists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Exists::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Exists::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Exists::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Exists* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Exists*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Exists::MergeFrom(const FileSystem_File_Exists& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Exists::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Exists::CopyFrom(const FileSystem_File_Exists& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Exists::IsInitialized() const {

  return true;
}

void FileSystem_File_Exists::Swap(FileSystem_File_Exists* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Exists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Exists_descriptor_;
  metadata.reflection = FileSystem_File_Exists_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Remove_Request::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Remove_Request::FileSystem_File_Remove_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Remove_Request::InitAsDefaultInstance() {
}

FileSystem_File_Remove_Request::FileSystem_File_Remove_Request(const FileSystem_File_Remove_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Remove_Request::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Remove_Request::~FileSystem_File_Remove_Request() {
  SharedDtor();
}

void FileSystem_File_Remove_Request::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Remove_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Remove_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Remove_Request_descriptor_;
}

const FileSystem_File_Remove_Request& FileSystem_File_Remove_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Remove_Request* FileSystem_File_Remove_Request::default_instance_ = NULL;

FileSystem_File_Remove_Request* FileSystem_File_Remove_Request::New() const {
  return new FileSystem_File_Remove_Request;
}

void FileSystem_File_Remove_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Remove_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Remove_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Remove_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Remove_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Remove_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Remove_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Remove_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Remove_Request::MergeFrom(const FileSystem_File_Remove_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Remove_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Remove_Request::CopyFrom(const FileSystem_File_Remove_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Remove_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_File_Remove_Request::Swap(FileSystem_File_Remove_Request* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Remove_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Remove_Request_descriptor_;
  metadata.reflection = FileSystem_File_Remove_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Remove_Update::kPathFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Remove_Update::FileSystem_File_Remove_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Remove_Update::InitAsDefaultInstance() {
}

FileSystem_File_Remove_Update::FileSystem_File_Remove_Update(const FileSystem_File_Remove_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Remove_Update::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Remove_Update::~FileSystem_File_Remove_Update() {
  SharedDtor();
}

void FileSystem_File_Remove_Update::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Remove_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Remove_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Remove_Update_descriptor_;
}

const FileSystem_File_Remove_Update& FileSystem_File_Remove_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Remove_Update* FileSystem_File_Remove_Update::default_instance_ = NULL;

FileSystem_File_Remove_Update* FileSystem_File_Remove_Update::New() const {
  return new FileSystem_File_Remove_Update;
}

void FileSystem_File_Remove_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Remove_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Remove_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Remove_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Remove_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Remove_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Remove_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Remove_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Remove_Update::MergeFrom(const FileSystem_File_Remove_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Remove_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Remove_Update::CopyFrom(const FileSystem_File_Remove_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Remove_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSystem_File_Remove_Update::Swap(FileSystem_File_Remove_Update* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Remove_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Remove_Update_descriptor_;
  metadata.reflection = FileSystem_File_Remove_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_File_Remove::FileSystem_File_Remove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Remove::InitAsDefaultInstance() {
}

FileSystem_File_Remove::FileSystem_File_Remove(const FileSystem_File_Remove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Remove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Remove::~FileSystem_File_Remove() {
  SharedDtor();
}

void FileSystem_File_Remove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_File_Remove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Remove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Remove_descriptor_;
}

const FileSystem_File_Remove& FileSystem_File_Remove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Remove* FileSystem_File_Remove::default_instance_ = NULL;

FileSystem_File_Remove* FileSystem_File_Remove::New() const {
  return new FileSystem_File_Remove;
}

void FileSystem_File_Remove::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_File_Remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Remove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Remove::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Remove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Remove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Remove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Remove::MergeFrom(const FileSystem_File_Remove& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Remove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Remove::CopyFrom(const FileSystem_File_Remove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Remove::IsInitialized() const {

  return true;
}

void FileSystem_File_Remove::Swap(FileSystem_File_Remove* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Remove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Remove_descriptor_;
  metadata.reflection = FileSystem_File_Remove_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Copy_Request::kSrcFieldNumber;
const int FileSystem_File_Copy_Request::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Copy_Request::FileSystem_File_Copy_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Copy_Request::InitAsDefaultInstance() {
}

FileSystem_File_Copy_Request::FileSystem_File_Copy_Request(const FileSystem_File_Copy_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Copy_Request::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Copy_Request::~FileSystem_File_Copy_Request() {
  SharedDtor();
}

void FileSystem_File_Copy_Request::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Copy_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Copy_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Copy_Request_descriptor_;
}

const FileSystem_File_Copy_Request& FileSystem_File_Copy_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Copy_Request* FileSystem_File_Copy_Request::default_instance_ = NULL;

FileSystem_File_Copy_Request* FileSystem_File_Copy_Request::New() const {
  return new FileSystem_File_Copy_Request;
}

void FileSystem_File_Copy_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Copy_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Copy_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Copy_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Copy_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Copy_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Copy_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Copy_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Copy_Request::MergeFrom(const FileSystem_File_Copy_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Copy_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Copy_Request::CopyFrom(const FileSystem_File_Copy_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Copy_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_File_Copy_Request::Swap(FileSystem_File_Copy_Request* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Copy_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Copy_Request_descriptor_;
  metadata.reflection = FileSystem_File_Copy_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Copy_Update::kSrcFieldNumber;
const int FileSystem_File_Copy_Update::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Copy_Update::FileSystem_File_Copy_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Copy_Update::InitAsDefaultInstance() {
}

FileSystem_File_Copy_Update::FileSystem_File_Copy_Update(const FileSystem_File_Copy_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Copy_Update::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Copy_Update::~FileSystem_File_Copy_Update() {
  SharedDtor();
}

void FileSystem_File_Copy_Update::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Copy_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Copy_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Copy_Update_descriptor_;
}

const FileSystem_File_Copy_Update& FileSystem_File_Copy_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Copy_Update* FileSystem_File_Copy_Update::default_instance_ = NULL;

FileSystem_File_Copy_Update* FileSystem_File_Copy_Update::New() const {
  return new FileSystem_File_Copy_Update;
}

void FileSystem_File_Copy_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Copy_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Copy_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Copy_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Copy_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Copy_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Copy_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Copy_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Copy_Update::MergeFrom(const FileSystem_File_Copy_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Copy_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Copy_Update::CopyFrom(const FileSystem_File_Copy_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Copy_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_File_Copy_Update::Swap(FileSystem_File_Copy_Update* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Copy_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Copy_Update_descriptor_;
  metadata.reflection = FileSystem_File_Copy_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_File_Copy::FileSystem_File_Copy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Copy::InitAsDefaultInstance() {
}

FileSystem_File_Copy::FileSystem_File_Copy(const FileSystem_File_Copy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Copy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Copy::~FileSystem_File_Copy() {
  SharedDtor();
}

void FileSystem_File_Copy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_File_Copy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Copy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Copy_descriptor_;
}

const FileSystem_File_Copy& FileSystem_File_Copy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Copy* FileSystem_File_Copy::default_instance_ = NULL;

FileSystem_File_Copy* FileSystem_File_Copy::New() const {
  return new FileSystem_File_Copy;
}

void FileSystem_File_Copy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Copy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_File_Copy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Copy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Copy::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Copy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Copy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Copy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Copy::MergeFrom(const FileSystem_File_Copy& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Copy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Copy::CopyFrom(const FileSystem_File_Copy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Copy::IsInitialized() const {

  return true;
}

void FileSystem_File_Copy::Swap(FileSystem_File_Copy* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Copy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Copy_descriptor_;
  metadata.reflection = FileSystem_File_Copy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Move_Request::kSrcFieldNumber;
const int FileSystem_File_Move_Request::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Move_Request::FileSystem_File_Move_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Move_Request::InitAsDefaultInstance() {
}

FileSystem_File_Move_Request::FileSystem_File_Move_Request(const FileSystem_File_Move_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Move_Request::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Move_Request::~FileSystem_File_Move_Request() {
  SharedDtor();
}

void FileSystem_File_Move_Request::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Move_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Move_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Move_Request_descriptor_;
}

const FileSystem_File_Move_Request& FileSystem_File_Move_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Move_Request* FileSystem_File_Move_Request::default_instance_ = NULL;

FileSystem_File_Move_Request* FileSystem_File_Move_Request::New() const {
  return new FileSystem_File_Move_Request;
}

void FileSystem_File_Move_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Move_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Move_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Move_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Move_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Move_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Move_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Move_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Move_Request::MergeFrom(const FileSystem_File_Move_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Move_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Move_Request::CopyFrom(const FileSystem_File_Move_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Move_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_File_Move_Request::Swap(FileSystem_File_Move_Request* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Move_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Move_Request_descriptor_;
  metadata.reflection = FileSystem_File_Move_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSystem_File_Move_Update::kSrcFieldNumber;
const int FileSystem_File_Move_Update::kDstFieldNumber;
#endif  // !_MSC_VER

FileSystem_File_Move_Update::FileSystem_File_Move_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Move_Update::InitAsDefaultInstance() {
}

FileSystem_File_Move_Update::FileSystem_File_Move_Update(const FileSystem_File_Move_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Move_Update::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Move_Update::~FileSystem_File_Move_Update() {
  SharedDtor();
}

void FileSystem_File_Move_Update::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void FileSystem_File_Move_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Move_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Move_Update_descriptor_;
}

const FileSystem_File_Move_Update& FileSystem_File_Move_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Move_Update* FileSystem_File_Move_Update::default_instance_ = NULL;

FileSystem_File_Move_Update* FileSystem_File_Move_Update::New() const {
  return new FileSystem_File_Move_Update;
}

void FileSystem_File_Move_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Move_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem_File_Move_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Move_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Move_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Move_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Move_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Move_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Move_Update::MergeFrom(const FileSystem_File_Move_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Move_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Move_Update::CopyFrom(const FileSystem_File_Move_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Move_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSystem_File_Move_Update::Swap(FileSystem_File_Move_Update* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Move_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Move_Update_descriptor_;
  metadata.reflection = FileSystem_File_Move_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_File_Move::FileSystem_File_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File_Move::InitAsDefaultInstance() {
}

FileSystem_File_Move::FileSystem_File_Move(const FileSystem_File_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File_Move::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File_Move::~FileSystem_File_Move() {
  SharedDtor();
}

void FileSystem_File_Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_File_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_Move_descriptor_;
}

const FileSystem_File_Move& FileSystem_File_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File_Move* FileSystem_File_Move::default_instance_ = NULL;

FileSystem_File_Move* FileSystem_File_Move::New() const {
  return new FileSystem_File_Move;
}

void FileSystem_File_Move::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_File_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File_Move::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File_Move::MergeFrom(const FileSystem_File_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File_Move::CopyFrom(const FileSystem_File_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File_Move::IsInitialized() const {

  return true;
}

void FileSystem_File_Move::Swap(FileSystem_File_Move* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_Move_descriptor_;
  metadata.reflection = FileSystem_File_Move_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem_File::FileSystem_File()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem_File::InitAsDefaultInstance() {
}

FileSystem_File::FileSystem_File(const FileSystem_File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem_File::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem_File::~FileSystem_File() {
  SharedDtor();
}

void FileSystem_File::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem_File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_File_descriptor_;
}

const FileSystem_File& FileSystem_File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem_File* FileSystem_File::default_instance_ = NULL;

FileSystem_File* FileSystem_File::New() const {
  return new FileSystem_File;
}

void FileSystem_File::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem_File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem_File::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem_File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem_File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem_File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem_File::MergeFrom(const FileSystem_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem_File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem_File::CopyFrom(const FileSystem_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem_File::IsInitialized() const {

  return true;
}

void FileSystem_File::Swap(FileSystem_File* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem_File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_File_descriptor_;
  metadata.reflection = FileSystem_File_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

FileSystem::FileSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem::InitAsDefaultInstance() {
}

FileSystem::FileSystem(const FileSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem::~FileSystem() {
  SharedDtor();
}

void FileSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_descriptor_;
}

const FileSystem& FileSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2dmanager_2eproto();
  return *default_instance_;
}

FileSystem* FileSystem::default_instance_ = NULL;

FileSystem* FileSystem::New() const {
  return new FileSystem;
}

void FileSystem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FileSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem::MergeFrom(const FileSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem::CopyFrom(const FileSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem::IsInitialized() const {

  return true;
}

void FileSystem::Swap(FileSystem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_descriptor_;
  metadata.reflection = FileSystem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fileManager
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
