// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#ifndef PROTOBUF_project_2eproto__INCLUDED
#define PROTOBUF_project_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "attributes.pb.h"
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace project {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_project_2eproto();
void protobuf_AssignDesc_project_2eproto();
void protobuf_ShutdownFile_project_2eproto();

class Project;

// ===================================================================

class Project : public ::google::protobuf::Message {
 public:
  Project();
  virtual ~Project();

  Project(const Project& from);

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Project& default_instance();

  void Swap(Project* other);

  // implements Message ----------------------------------------------

  Project* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // repeated string libPaths = 3;
  inline int libpaths_size() const;
  inline void clear_libpaths();
  static const int kLibPathsFieldNumber = 3;
  inline const ::std::string& libpaths(int index) const;
  inline ::std::string* mutable_libpaths(int index);
  inline void set_libpaths(int index, const ::std::string& value);
  inline void set_libpaths(int index, const char* value);
  inline void set_libpaths(int index, const char* value, size_t size);
  inline ::std::string* add_libpaths();
  inline void add_libpaths(const ::std::string& value);
  inline void add_libpaths(const char* value);
  inline void add_libpaths(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& libpaths() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_libpaths();

  // optional .generated.proto.attributes.Attributes attributes = 4;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  inline const ::generated::proto::attributes::Attributes& attributes() const;
  inline ::generated::proto::attributes::Attributes* mutable_attributes();
  inline ::generated::proto::attributes::Attributes* release_attributes();
  inline void set_allocated_attributes(::generated::proto::attributes::Attributes* attributes);

  // optional int32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:generated.proto.project.Project)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_attributes();
  inline void clear_has_attributes();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> libpaths_;
  ::generated::proto::attributes::Attributes* attributes_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_project_2eproto();
  friend void protobuf_AssignDesc_project_2eproto();
  friend void protobuf_ShutdownFile_project_2eproto();

  void InitAsDefaultInstance();
  static Project* default_instance_;
};
// ===================================================================


// ===================================================================

// Project

// optional string name = 1;
inline bool Project::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Project::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Project::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Project::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Project::name() const {
  return *name_;
}
inline void Project::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Project::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Project::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Project::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Project::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string path = 2;
inline bool Project::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Project::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Project::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Project::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Project::path() const {
  return *path_;
}
inline void Project::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Project::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Project::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* Project::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Project::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string libPaths = 3;
inline int Project::libpaths_size() const {
  return libpaths_.size();
}
inline void Project::clear_libpaths() {
  libpaths_.Clear();
}
inline const ::std::string& Project::libpaths(int index) const {
  return libpaths_.Get(index);
}
inline ::std::string* Project::mutable_libpaths(int index) {
  return libpaths_.Mutable(index);
}
inline void Project::set_libpaths(int index, const ::std::string& value) {
  libpaths_.Mutable(index)->assign(value);
}
inline void Project::set_libpaths(int index, const char* value) {
  libpaths_.Mutable(index)->assign(value);
}
inline void Project::set_libpaths(int index, const char* value, size_t size) {
  libpaths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::add_libpaths() {
  return libpaths_.Add();
}
inline void Project::add_libpaths(const ::std::string& value) {
  libpaths_.Add()->assign(value);
}
inline void Project::add_libpaths(const char* value) {
  libpaths_.Add()->assign(value);
}
inline void Project::add_libpaths(const char* value, size_t size) {
  libpaths_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Project::libpaths() const {
  return libpaths_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Project::mutable_libpaths() {
  return &libpaths_;
}

// optional .generated.proto.attributes.Attributes attributes = 4;
inline bool Project::has_attributes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Project::set_has_attributes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Project::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Project::clear_attributes() {
  if (attributes_ != NULL) attributes_->::generated::proto::attributes::Attributes::Clear();
  clear_has_attributes();
}
inline const ::generated::proto::attributes::Attributes& Project::attributes() const {
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
}
inline ::generated::proto::attributes::Attributes* Project::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::generated::proto::attributes::Attributes;
  return attributes_;
}
inline ::generated::proto::attributes::Attributes* Project::release_attributes() {
  clear_has_attributes();
  ::generated::proto::attributes::Attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void Project::set_allocated_attributes(::generated::proto::attributes::Attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
}

// optional int32 id = 5;
inline bool Project::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Project::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Project::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Project::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Project::id() const {
  return id_;
}
inline void Project::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace project
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_project_2eproto__INCLUDED
