// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file-manager.proto

#ifndef PROTOBUF_file_2dmanager_2eproto__INCLUDED
#define PROTOBUF_file_2dmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace fileManager {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_2dmanager_2eproto();
void protobuf_AssignDesc_file_2dmanager_2eproto();
void protobuf_ShutdownFile_file_2dmanager_2eproto();

class FileSystem;
class FileSystem_Directory;
class FileSystem_Directory_Fetch;
class FileSystem_Directory_Fetch_Request;
class FileSystem_Directory_Fetch_Status;
class FileSystem_Directory_Upload;
class FileSystem_Directory_Upload_Request;
class FileSystem_Directory_Upload_Status;
class FileSystem_Directory_Create;
class FileSystem_Directory_Create_Request;
class FileSystem_Directory_Create_Update;
class FileSystem_Directory_Exists;
class FileSystem_Directory_Exists_Request;
class FileSystem_Directory_Exists_Status;
class FileSystem_Directory_List;
class FileSystem_Directory_List_Request;
class FileSystem_Directory_List_Status;
class FileSystem_Directory_Remove;
class FileSystem_Directory_Remove_Request;
class FileSystem_Directory_Remove_Update;
class FileSystem_Directory_Copy;
class FileSystem_Directory_Copy_Request;
class FileSystem_Directory_Copy_Update;
class FileSystem_Directory_Move;
class FileSystem_Directory_Move_Request;
class FileSystem_Directory_Move_Update;
class FileSystem_File;
class FileSystem_File_Fetch;
class FileSystem_File_Fetch_Request;
class FileSystem_File_Fetch_Status;
class FileSystem_File_Upload;
class FileSystem_File_Upload_Request;
class FileSystem_File_Upload_Status;
class FileSystem_File_Exists;
class FileSystem_File_Exists_Request;
class FileSystem_File_Exists_Status;
class FileSystem_File_Remove;
class FileSystem_File_Remove_Request;
class FileSystem_File_Remove_Update;
class FileSystem_File_Copy;
class FileSystem_File_Copy_Request;
class FileSystem_File_Copy_Update;
class FileSystem_File_Move;
class FileSystem_File_Move_Request;
class FileSystem_File_Move_Update;

// ===================================================================

class FileSystem_Directory_Fetch_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Fetch_Request();
  virtual ~FileSystem_Directory_Fetch_Request();

  FileSystem_Directory_Fetch_Request(const FileSystem_Directory_Fetch_Request& from);

  inline FileSystem_Directory_Fetch_Request& operator=(const FileSystem_Directory_Fetch_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Fetch_Request& default_instance();

  void Swap(FileSystem_Directory_Fetch_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Fetch_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Fetch_Request& from);
  void MergeFrom(const FileSystem_Directory_Fetch_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Fetch.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Fetch_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Fetch_Status : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Fetch_Status();
  virtual ~FileSystem_Directory_Fetch_Status();

  FileSystem_Directory_Fetch_Status(const FileSystem_Directory_Fetch_Status& from);

  inline FileSystem_Directory_Fetch_Status& operator=(const FileSystem_Directory_Fetch_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Fetch_Status& default_instance();

  void Swap(FileSystem_Directory_Fetch_Status* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Fetch_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Fetch_Status& from);
  void MergeFrom(const FileSystem_Directory_Fetch_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Fetch.Status)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Fetch_Status* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Fetch : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Fetch();
  virtual ~FileSystem_Directory_Fetch();

  FileSystem_Directory_Fetch(const FileSystem_Directory_Fetch& from);

  inline FileSystem_Directory_Fetch& operator=(const FileSystem_Directory_Fetch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Fetch& default_instance();

  void Swap(FileSystem_Directory_Fetch* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Fetch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Fetch& from);
  void MergeFrom(const FileSystem_Directory_Fetch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Fetch_Request Request;
  typedef FileSystem_Directory_Fetch_Status Status;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Fetch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Fetch* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Upload_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Upload_Request();
  virtual ~FileSystem_Directory_Upload_Request();

  FileSystem_Directory_Upload_Request(const FileSystem_Directory_Upload_Request& from);

  inline FileSystem_Directory_Upload_Request& operator=(const FileSystem_Directory_Upload_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Upload_Request& default_instance();

  void Swap(FileSystem_Directory_Upload_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Upload_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Upload_Request& from);
  void MergeFrom(const FileSystem_Directory_Upload_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Upload.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Upload_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Upload_Status : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Upload_Status();
  virtual ~FileSystem_Directory_Upload_Status();

  FileSystem_Directory_Upload_Status(const FileSystem_Directory_Upload_Status& from);

  inline FileSystem_Directory_Upload_Status& operator=(const FileSystem_Directory_Upload_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Upload_Status& default_instance();

  void Swap(FileSystem_Directory_Upload_Status* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Upload_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Upload_Status& from);
  void MergeFrom(const FileSystem_Directory_Upload_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Upload.Status)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Upload_Status* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Upload : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Upload();
  virtual ~FileSystem_Directory_Upload();

  FileSystem_Directory_Upload(const FileSystem_Directory_Upload& from);

  inline FileSystem_Directory_Upload& operator=(const FileSystem_Directory_Upload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Upload& default_instance();

  void Swap(FileSystem_Directory_Upload* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Upload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Upload& from);
  void MergeFrom(const FileSystem_Directory_Upload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Upload_Request Request;
  typedef FileSystem_Directory_Upload_Status Status;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Upload)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Upload* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Create_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Create_Request();
  virtual ~FileSystem_Directory_Create_Request();

  FileSystem_Directory_Create_Request(const FileSystem_Directory_Create_Request& from);

  inline FileSystem_Directory_Create_Request& operator=(const FileSystem_Directory_Create_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Create_Request& default_instance();

  void Swap(FileSystem_Directory_Create_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Create_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Create_Request& from);
  void MergeFrom(const FileSystem_Directory_Create_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Create.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Create_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Create_Update : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Create_Update();
  virtual ~FileSystem_Directory_Create_Update();

  FileSystem_Directory_Create_Update(const FileSystem_Directory_Create_Update& from);

  inline FileSystem_Directory_Create_Update& operator=(const FileSystem_Directory_Create_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Create_Update& default_instance();

  void Swap(FileSystem_Directory_Create_Update* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Create_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Create_Update& from);
  void MergeFrom(const FileSystem_Directory_Create_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Create.Update)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Create_Update* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Create : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Create();
  virtual ~FileSystem_Directory_Create();

  FileSystem_Directory_Create(const FileSystem_Directory_Create& from);

  inline FileSystem_Directory_Create& operator=(const FileSystem_Directory_Create& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Create& default_instance();

  void Swap(FileSystem_Directory_Create* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Create& from);
  void MergeFrom(const FileSystem_Directory_Create& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Create_Request Request;
  typedef FileSystem_Directory_Create_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Create)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Create* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Exists_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Exists_Request();
  virtual ~FileSystem_Directory_Exists_Request();

  FileSystem_Directory_Exists_Request(const FileSystem_Directory_Exists_Request& from);

  inline FileSystem_Directory_Exists_Request& operator=(const FileSystem_Directory_Exists_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Exists_Request& default_instance();

  void Swap(FileSystem_Directory_Exists_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Exists_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Exists_Request& from);
  void MergeFrom(const FileSystem_Directory_Exists_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Exists.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Exists_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Exists_Status : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Exists_Status();
  virtual ~FileSystem_Directory_Exists_Status();

  FileSystem_Directory_Exists_Status(const FileSystem_Directory_Exists_Status& from);

  inline FileSystem_Directory_Exists_Status& operator=(const FileSystem_Directory_Exists_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Exists_Status& default_instance();

  void Swap(FileSystem_Directory_Exists_Status* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Exists_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Exists_Status& from);
  void MergeFrom(const FileSystem_Directory_Exists_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool exists = 1;
  inline bool has_exists() const;
  inline void clear_exists();
  static const int kExistsFieldNumber = 1;
  inline bool exists() const;
  inline void set_exists(bool value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Exists.Status)
 private:
  inline void set_has_exists();
  inline void clear_has_exists();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  bool exists_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Exists_Status* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Exists : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Exists();
  virtual ~FileSystem_Directory_Exists();

  FileSystem_Directory_Exists(const FileSystem_Directory_Exists& from);

  inline FileSystem_Directory_Exists& operator=(const FileSystem_Directory_Exists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Exists& default_instance();

  void Swap(FileSystem_Directory_Exists* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Exists* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Exists& from);
  void MergeFrom(const FileSystem_Directory_Exists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Exists_Request Request;
  typedef FileSystem_Directory_Exists_Status Status;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Exists)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Exists* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_List_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_List_Request();
  virtual ~FileSystem_Directory_List_Request();

  FileSystem_Directory_List_Request(const FileSystem_Directory_List_Request& from);

  inline FileSystem_Directory_List_Request& operator=(const FileSystem_Directory_List_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_List_Request& default_instance();

  void Swap(FileSystem_Directory_List_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_List_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_List_Request& from);
  void MergeFrom(const FileSystem_Directory_List_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.List.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_List_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_List_Status : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_List_Status();
  virtual ~FileSystem_Directory_List_Status();

  FileSystem_Directory_List_Status(const FileSystem_Directory_List_Status& from);

  inline FileSystem_Directory_List_Status& operator=(const FileSystem_Directory_List_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_List_Status& default_instance();

  void Swap(FileSystem_Directory_List_Status* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_List_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_List_Status& from);
  void MergeFrom(const FileSystem_Directory_List_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::std::string& items(int index) const;
  inline ::std::string* mutable_items(int index);
  inline void set_items(int index, const ::std::string& value);
  inline void set_items(int index, const char* value);
  inline void set_items(int index, const char* value, size_t size);
  inline ::std::string* add_items();
  inline void add_items(const ::std::string& value);
  inline void add_items(const char* value);
  inline void add_items(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.List.Status)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_List_Status* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_List : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_List();
  virtual ~FileSystem_Directory_List();

  FileSystem_Directory_List(const FileSystem_Directory_List& from);

  inline FileSystem_Directory_List& operator=(const FileSystem_Directory_List& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_List& default_instance();

  void Swap(FileSystem_Directory_List* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_List& from);
  void MergeFrom(const FileSystem_Directory_List& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_List_Request Request;
  typedef FileSystem_Directory_List_Status Status;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.List)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_List* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Remove_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Remove_Request();
  virtual ~FileSystem_Directory_Remove_Request();

  FileSystem_Directory_Remove_Request(const FileSystem_Directory_Remove_Request& from);

  inline FileSystem_Directory_Remove_Request& operator=(const FileSystem_Directory_Remove_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Remove_Request& default_instance();

  void Swap(FileSystem_Directory_Remove_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Remove_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Remove_Request& from);
  void MergeFrom(const FileSystem_Directory_Remove_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Remove.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Remove_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Remove_Update : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Remove_Update();
  virtual ~FileSystem_Directory_Remove_Update();

  FileSystem_Directory_Remove_Update(const FileSystem_Directory_Remove_Update& from);

  inline FileSystem_Directory_Remove_Update& operator=(const FileSystem_Directory_Remove_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Remove_Update& default_instance();

  void Swap(FileSystem_Directory_Remove_Update* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Remove_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Remove_Update& from);
  void MergeFrom(const FileSystem_Directory_Remove_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Remove.Update)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Remove_Update* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Remove : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Remove();
  virtual ~FileSystem_Directory_Remove();

  FileSystem_Directory_Remove(const FileSystem_Directory_Remove& from);

  inline FileSystem_Directory_Remove& operator=(const FileSystem_Directory_Remove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Remove& default_instance();

  void Swap(FileSystem_Directory_Remove* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Remove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Remove& from);
  void MergeFrom(const FileSystem_Directory_Remove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Remove_Request Request;
  typedef FileSystem_Directory_Remove_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Remove)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Remove* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Copy_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Copy_Request();
  virtual ~FileSystem_Directory_Copy_Request();

  FileSystem_Directory_Copy_Request(const FileSystem_Directory_Copy_Request& from);

  inline FileSystem_Directory_Copy_Request& operator=(const FileSystem_Directory_Copy_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Copy_Request& default_instance();

  void Swap(FileSystem_Directory_Copy_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Copy_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Copy_Request& from);
  void MergeFrom(const FileSystem_Directory_Copy_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Copy.Request)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Copy_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Copy_Update : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Copy_Update();
  virtual ~FileSystem_Directory_Copy_Update();

  FileSystem_Directory_Copy_Update(const FileSystem_Directory_Copy_Update& from);

  inline FileSystem_Directory_Copy_Update& operator=(const FileSystem_Directory_Copy_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Copy_Update& default_instance();

  void Swap(FileSystem_Directory_Copy_Update* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Copy_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Copy_Update& from);
  void MergeFrom(const FileSystem_Directory_Copy_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Copy.Update)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Copy_Update* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Copy : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Copy();
  virtual ~FileSystem_Directory_Copy();

  FileSystem_Directory_Copy(const FileSystem_Directory_Copy& from);

  inline FileSystem_Directory_Copy& operator=(const FileSystem_Directory_Copy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Copy& default_instance();

  void Swap(FileSystem_Directory_Copy* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Copy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Copy& from);
  void MergeFrom(const FileSystem_Directory_Copy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Copy_Request Request;
  typedef FileSystem_Directory_Copy_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Copy)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Copy* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Move_Request : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Move_Request();
  virtual ~FileSystem_Directory_Move_Request();

  FileSystem_Directory_Move_Request(const FileSystem_Directory_Move_Request& from);

  inline FileSystem_Directory_Move_Request& operator=(const FileSystem_Directory_Move_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Move_Request& default_instance();

  void Swap(FileSystem_Directory_Move_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Move_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Move_Request& from);
  void MergeFrom(const FileSystem_Directory_Move_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Move.Request)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Move_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Move_Update : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Move_Update();
  virtual ~FileSystem_Directory_Move_Update();

  FileSystem_Directory_Move_Update(const FileSystem_Directory_Move_Update& from);

  inline FileSystem_Directory_Move_Update& operator=(const FileSystem_Directory_Move_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Move_Update& default_instance();

  void Swap(FileSystem_Directory_Move_Update* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Move_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Move_Update& from);
  void MergeFrom(const FileSystem_Directory_Move_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Move.Update)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Move_Update* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory_Move : public ::google::protobuf::Message {
 public:
  FileSystem_Directory_Move();
  virtual ~FileSystem_Directory_Move();

  FileSystem_Directory_Move(const FileSystem_Directory_Move& from);

  inline FileSystem_Directory_Move& operator=(const FileSystem_Directory_Move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory_Move& default_instance();

  void Swap(FileSystem_Directory_Move* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory_Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory_Move& from);
  void MergeFrom(const FileSystem_Directory_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Move_Request Request;
  typedef FileSystem_Directory_Move_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory.Move)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory_Move* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_Directory : public ::google::protobuf::Message {
 public:
  FileSystem_Directory();
  virtual ~FileSystem_Directory();

  FileSystem_Directory(const FileSystem_Directory& from);

  inline FileSystem_Directory& operator=(const FileSystem_Directory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_Directory& default_instance();

  void Swap(FileSystem_Directory* other);

  // implements Message ----------------------------------------------

  FileSystem_Directory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_Directory& from);
  void MergeFrom(const FileSystem_Directory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory_Fetch Fetch;
  typedef FileSystem_Directory_Upload Upload;
  typedef FileSystem_Directory_Create Create;
  typedef FileSystem_Directory_Exists Exists;
  typedef FileSystem_Directory_List List;
  typedef FileSystem_Directory_Remove Remove;
  typedef FileSystem_Directory_Copy Copy;
  typedef FileSystem_Directory_Move Move;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.Directory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_Directory* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Fetch_Request : public ::google::protobuf::Message {
 public:
  FileSystem_File_Fetch_Request();
  virtual ~FileSystem_File_Fetch_Request();

  FileSystem_File_Fetch_Request(const FileSystem_File_Fetch_Request& from);

  inline FileSystem_File_Fetch_Request& operator=(const FileSystem_File_Fetch_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Fetch_Request& default_instance();

  void Swap(FileSystem_File_Fetch_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Fetch_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Fetch_Request& from);
  void MergeFrom(const FileSystem_File_Fetch_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Fetch.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Fetch_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Fetch_Status : public ::google::protobuf::Message {
 public:
  FileSystem_File_Fetch_Status();
  virtual ~FileSystem_File_Fetch_Status();

  FileSystem_File_Fetch_Status(const FileSystem_File_Fetch_Status& from);

  inline FileSystem_File_Fetch_Status& operator=(const FileSystem_File_Fetch_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Fetch_Status& default_instance();

  void Swap(FileSystem_File_Fetch_Status* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Fetch_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Fetch_Status& from);
  void MergeFrom(const FileSystem_File_Fetch_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Fetch.Status)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Fetch_Status* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Fetch : public ::google::protobuf::Message {
 public:
  FileSystem_File_Fetch();
  virtual ~FileSystem_File_Fetch();

  FileSystem_File_Fetch(const FileSystem_File_Fetch& from);

  inline FileSystem_File_Fetch& operator=(const FileSystem_File_Fetch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Fetch& default_instance();

  void Swap(FileSystem_File_Fetch* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Fetch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Fetch& from);
  void MergeFrom(const FileSystem_File_Fetch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_File_Fetch_Request Request;
  typedef FileSystem_File_Fetch_Status Status;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Fetch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Fetch* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Upload_Request : public ::google::protobuf::Message {
 public:
  FileSystem_File_Upload_Request();
  virtual ~FileSystem_File_Upload_Request();

  FileSystem_File_Upload_Request(const FileSystem_File_Upload_Request& from);

  inline FileSystem_File_Upload_Request& operator=(const FileSystem_File_Upload_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Upload_Request& default_instance();

  void Swap(FileSystem_File_Upload_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Upload_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Upload_Request& from);
  void MergeFrom(const FileSystem_File_Upload_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Upload.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Upload_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Upload_Status : public ::google::protobuf::Message {
 public:
  FileSystem_File_Upload_Status();
  virtual ~FileSystem_File_Upload_Status();

  FileSystem_File_Upload_Status(const FileSystem_File_Upload_Status& from);

  inline FileSystem_File_Upload_Status& operator=(const FileSystem_File_Upload_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Upload_Status& default_instance();

  void Swap(FileSystem_File_Upload_Status* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Upload_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Upload_Status& from);
  void MergeFrom(const FileSystem_File_Upload_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Upload.Status)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Upload_Status* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Upload : public ::google::protobuf::Message {
 public:
  FileSystem_File_Upload();
  virtual ~FileSystem_File_Upload();

  FileSystem_File_Upload(const FileSystem_File_Upload& from);

  inline FileSystem_File_Upload& operator=(const FileSystem_File_Upload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Upload& default_instance();

  void Swap(FileSystem_File_Upload* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Upload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Upload& from);
  void MergeFrom(const FileSystem_File_Upload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_File_Upload_Request Request;
  typedef FileSystem_File_Upload_Status Status;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Upload)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Upload* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Exists_Request : public ::google::protobuf::Message {
 public:
  FileSystem_File_Exists_Request();
  virtual ~FileSystem_File_Exists_Request();

  FileSystem_File_Exists_Request(const FileSystem_File_Exists_Request& from);

  inline FileSystem_File_Exists_Request& operator=(const FileSystem_File_Exists_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Exists_Request& default_instance();

  void Swap(FileSystem_File_Exists_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Exists_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Exists_Request& from);
  void MergeFrom(const FileSystem_File_Exists_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Exists.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Exists_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Exists_Status : public ::google::protobuf::Message {
 public:
  FileSystem_File_Exists_Status();
  virtual ~FileSystem_File_Exists_Status();

  FileSystem_File_Exists_Status(const FileSystem_File_Exists_Status& from);

  inline FileSystem_File_Exists_Status& operator=(const FileSystem_File_Exists_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Exists_Status& default_instance();

  void Swap(FileSystem_File_Exists_Status* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Exists_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Exists_Status& from);
  void MergeFrom(const FileSystem_File_Exists_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool exists = 1;
  inline bool has_exists() const;
  inline void clear_exists();
  static const int kExistsFieldNumber = 1;
  inline bool exists() const;
  inline void set_exists(bool value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Exists.Status)
 private:
  inline void set_has_exists();
  inline void clear_has_exists();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  bool exists_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Exists_Status* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Exists : public ::google::protobuf::Message {
 public:
  FileSystem_File_Exists();
  virtual ~FileSystem_File_Exists();

  FileSystem_File_Exists(const FileSystem_File_Exists& from);

  inline FileSystem_File_Exists& operator=(const FileSystem_File_Exists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Exists& default_instance();

  void Swap(FileSystem_File_Exists* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Exists* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Exists& from);
  void MergeFrom(const FileSystem_File_Exists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_File_Exists_Request Request;
  typedef FileSystem_File_Exists_Status Status;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Exists)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Exists* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Remove_Request : public ::google::protobuf::Message {
 public:
  FileSystem_File_Remove_Request();
  virtual ~FileSystem_File_Remove_Request();

  FileSystem_File_Remove_Request(const FileSystem_File_Remove_Request& from);

  inline FileSystem_File_Remove_Request& operator=(const FileSystem_File_Remove_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Remove_Request& default_instance();

  void Swap(FileSystem_File_Remove_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Remove_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Remove_Request& from);
  void MergeFrom(const FileSystem_File_Remove_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Remove.Request)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Remove_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Remove_Update : public ::google::protobuf::Message {
 public:
  FileSystem_File_Remove_Update();
  virtual ~FileSystem_File_Remove_Update();

  FileSystem_File_Remove_Update(const FileSystem_File_Remove_Update& from);

  inline FileSystem_File_Remove_Update& operator=(const FileSystem_File_Remove_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Remove_Update& default_instance();

  void Swap(FileSystem_File_Remove_Update* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Remove_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Remove_Update& from);
  void MergeFrom(const FileSystem_File_Remove_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Remove.Update)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Remove_Update* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Remove : public ::google::protobuf::Message {
 public:
  FileSystem_File_Remove();
  virtual ~FileSystem_File_Remove();

  FileSystem_File_Remove(const FileSystem_File_Remove& from);

  inline FileSystem_File_Remove& operator=(const FileSystem_File_Remove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Remove& default_instance();

  void Swap(FileSystem_File_Remove* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Remove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Remove& from);
  void MergeFrom(const FileSystem_File_Remove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_File_Remove_Request Request;
  typedef FileSystem_File_Remove_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Remove)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Remove* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Copy_Request : public ::google::protobuf::Message {
 public:
  FileSystem_File_Copy_Request();
  virtual ~FileSystem_File_Copy_Request();

  FileSystem_File_Copy_Request(const FileSystem_File_Copy_Request& from);

  inline FileSystem_File_Copy_Request& operator=(const FileSystem_File_Copy_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Copy_Request& default_instance();

  void Swap(FileSystem_File_Copy_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Copy_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Copy_Request& from);
  void MergeFrom(const FileSystem_File_Copy_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Copy.Request)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Copy_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Copy_Update : public ::google::protobuf::Message {
 public:
  FileSystem_File_Copy_Update();
  virtual ~FileSystem_File_Copy_Update();

  FileSystem_File_Copy_Update(const FileSystem_File_Copy_Update& from);

  inline FileSystem_File_Copy_Update& operator=(const FileSystem_File_Copy_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Copy_Update& default_instance();

  void Swap(FileSystem_File_Copy_Update* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Copy_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Copy_Update& from);
  void MergeFrom(const FileSystem_File_Copy_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Copy.Update)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Copy_Update* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Copy : public ::google::protobuf::Message {
 public:
  FileSystem_File_Copy();
  virtual ~FileSystem_File_Copy();

  FileSystem_File_Copy(const FileSystem_File_Copy& from);

  inline FileSystem_File_Copy& operator=(const FileSystem_File_Copy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Copy& default_instance();

  void Swap(FileSystem_File_Copy* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Copy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Copy& from);
  void MergeFrom(const FileSystem_File_Copy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_File_Copy_Request Request;
  typedef FileSystem_File_Copy_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Copy)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Copy* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Move_Request : public ::google::protobuf::Message {
 public:
  FileSystem_File_Move_Request();
  virtual ~FileSystem_File_Move_Request();

  FileSystem_File_Move_Request(const FileSystem_File_Move_Request& from);

  inline FileSystem_File_Move_Request& operator=(const FileSystem_File_Move_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Move_Request& default_instance();

  void Swap(FileSystem_File_Move_Request* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Move_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Move_Request& from);
  void MergeFrom(const FileSystem_File_Move_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Move.Request)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Move_Request* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Move_Update : public ::google::protobuf::Message {
 public:
  FileSystem_File_Move_Update();
  virtual ~FileSystem_File_Move_Update();

  FileSystem_File_Move_Update(const FileSystem_File_Move_Update& from);

  inline FileSystem_File_Move_Update& operator=(const FileSystem_File_Move_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Move_Update& default_instance();

  void Swap(FileSystem_File_Move_Update* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Move_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Move_Update& from);
  void MergeFrom(const FileSystem_File_Move_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Move.Update)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Move_Update* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File_Move : public ::google::protobuf::Message {
 public:
  FileSystem_File_Move();
  virtual ~FileSystem_File_Move();

  FileSystem_File_Move(const FileSystem_File_Move& from);

  inline FileSystem_File_Move& operator=(const FileSystem_File_Move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File_Move& default_instance();

  void Swap(FileSystem_File_Move* other);

  // implements Message ----------------------------------------------

  FileSystem_File_Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File_Move& from);
  void MergeFrom(const FileSystem_File_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_File_Move_Request Request;
  typedef FileSystem_File_Move_Update Update;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File.Move)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File_Move* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem_File : public ::google::protobuf::Message {
 public:
  FileSystem_File();
  virtual ~FileSystem_File();

  FileSystem_File(const FileSystem_File& from);

  inline FileSystem_File& operator=(const FileSystem_File& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem_File& default_instance();

  void Swap(FileSystem_File* other);

  // implements Message ----------------------------------------------

  FileSystem_File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem_File& from);
  void MergeFrom(const FileSystem_File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_File_Fetch Fetch;
  typedef FileSystem_File_Upload Upload;
  typedef FileSystem_File_Exists Exists;
  typedef FileSystem_File_Remove Remove;
  typedef FileSystem_File_Copy Copy;
  typedef FileSystem_File_Move Move;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem.File)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem_File* default_instance_;
};
// -------------------------------------------------------------------

class FileSystem : public ::google::protobuf::Message {
 public:
  FileSystem();
  virtual ~FileSystem();

  FileSystem(const FileSystem& from);

  inline FileSystem& operator=(const FileSystem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystem& default_instance();

  void Swap(FileSystem* other);

  // implements Message ----------------------------------------------

  FileSystem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystem& from);
  void MergeFrom(const FileSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystem_Directory Directory;
  typedef FileSystem_File File;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:generated.proto.fileManager.FileSystem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_file_2dmanager_2eproto();
  friend void protobuf_AssignDesc_file_2dmanager_2eproto();
  friend void protobuf_ShutdownFile_file_2dmanager_2eproto();

  void InitAsDefaultInstance();
  static FileSystem* default_instance_;
};
// ===================================================================


// ===================================================================

// FileSystem_Directory_Fetch_Request

// required string path = 1;
inline bool FileSystem_Directory_Fetch_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Fetch_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Fetch_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Fetch_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Fetch_Request::path() const {
  return *path_;
}
inline void FileSystem_Directory_Fetch_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Fetch_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Fetch_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Fetch_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Fetch_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Fetch_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Fetch_Status

// required string path = 1;
inline bool FileSystem_Directory_Fetch_Status::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Fetch_Status::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Fetch_Status::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Fetch_Status::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Fetch_Status::path() const {
  return *path_;
}
inline void FileSystem_Directory_Fetch_Status::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Fetch_Status::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Fetch_Status::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Fetch_Status::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Fetch_Status::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Fetch_Status::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Fetch

// -------------------------------------------------------------------

// FileSystem_Directory_Upload_Request

// required string path = 1;
inline bool FileSystem_Directory_Upload_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Upload_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Upload_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Upload_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Upload_Request::path() const {
  return *path_;
}
inline void FileSystem_Directory_Upload_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Upload_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Upload_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Upload_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Upload_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Upload_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Upload_Status

// required string path = 1;
inline bool FileSystem_Directory_Upload_Status::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Upload_Status::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Upload_Status::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Upload_Status::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Upload_Status::path() const {
  return *path_;
}
inline void FileSystem_Directory_Upload_Status::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Upload_Status::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Upload_Status::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Upload_Status::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Upload_Status::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Upload_Status::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Upload

// -------------------------------------------------------------------

// FileSystem_Directory_Create_Request

// required string path = 1;
inline bool FileSystem_Directory_Create_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Create_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Create_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Create_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Create_Request::path() const {
  return *path_;
}
inline void FileSystem_Directory_Create_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Create_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Create_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Create_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Create_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Create_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Create_Update

// required string path = 1;
inline bool FileSystem_Directory_Create_Update::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Create_Update::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Create_Update::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Create_Update::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Create_Update::path() const {
  return *path_;
}
inline void FileSystem_Directory_Create_Update::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Create_Update::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Create_Update::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Create_Update::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Create_Update::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Create_Update::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Create

// -------------------------------------------------------------------

// FileSystem_Directory_Exists_Request

// required string path = 1;
inline bool FileSystem_Directory_Exists_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Exists_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Exists_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Exists_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Exists_Request::path() const {
  return *path_;
}
inline void FileSystem_Directory_Exists_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Exists_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Exists_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Exists_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Exists_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Exists_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Exists_Status

// required bool exists = 1;
inline bool FileSystem_Directory_Exists_Status::has_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Exists_Status::set_has_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Exists_Status::clear_has_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Exists_Status::clear_exists() {
  exists_ = false;
  clear_has_exists();
}
inline bool FileSystem_Directory_Exists_Status::exists() const {
  return exists_;
}
inline void FileSystem_Directory_Exists_Status::set_exists(bool value) {
  set_has_exists();
  exists_ = value;
}

// required string path = 2;
inline bool FileSystem_Directory_Exists_Status::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_Directory_Exists_Status::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_Directory_Exists_Status::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_Directory_Exists_Status::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Exists_Status::path() const {
  return *path_;
}
inline void FileSystem_Directory_Exists_Status::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Exists_Status::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Exists_Status::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Exists_Status::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Exists_Status::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Exists_Status::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Exists

// -------------------------------------------------------------------

// FileSystem_Directory_List_Request

// required string path = 1;
inline bool FileSystem_Directory_List_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_List_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_List_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_List_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_List_Request::path() const {
  return *path_;
}
inline void FileSystem_Directory_List_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_List_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_List_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_List_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_List_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_List_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_List_Status

// repeated string items = 1;
inline int FileSystem_Directory_List_Status::items_size() const {
  return items_.size();
}
inline void FileSystem_Directory_List_Status::clear_items() {
  items_.Clear();
}
inline const ::std::string& FileSystem_Directory_List_Status::items(int index) const {
  return items_.Get(index);
}
inline ::std::string* FileSystem_Directory_List_Status::mutable_items(int index) {
  return items_.Mutable(index);
}
inline void FileSystem_Directory_List_Status::set_items(int index, const ::std::string& value) {
  items_.Mutable(index)->assign(value);
}
inline void FileSystem_Directory_List_Status::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
}
inline void FileSystem_Directory_List_Status::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_List_Status::add_items() {
  return items_.Add();
}
inline void FileSystem_Directory_List_Status::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
}
inline void FileSystem_Directory_List_Status::add_items(const char* value) {
  items_.Add()->assign(value);
}
inline void FileSystem_Directory_List_Status::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileSystem_Directory_List_Status::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileSystem_Directory_List_Status::mutable_items() {
  return &items_;
}

// required string path = 2;
inline bool FileSystem_Directory_List_Status::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_Directory_List_Status::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_Directory_List_Status::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_Directory_List_Status::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_List_Status::path() const {
  return *path_;
}
inline void FileSystem_Directory_List_Status::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_List_Status::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_List_Status::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_List_Status::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_List_Status::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_List_Status::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_List

// -------------------------------------------------------------------

// FileSystem_Directory_Remove_Request

// required string path = 1;
inline bool FileSystem_Directory_Remove_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Remove_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Remove_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Remove_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Remove_Request::path() const {
  return *path_;
}
inline void FileSystem_Directory_Remove_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Remove_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Remove_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Remove_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Remove_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Remove_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Remove_Update

// required string path = 1;
inline bool FileSystem_Directory_Remove_Update::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Remove_Update::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Remove_Update::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Remove_Update::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_Directory_Remove_Update::path() const {
  return *path_;
}
inline void FileSystem_Directory_Remove_Update::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Remove_Update::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_Directory_Remove_Update::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Remove_Update::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_Directory_Remove_Update::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Remove_Update::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Remove

// -------------------------------------------------------------------

// FileSystem_Directory_Copy_Request

// required string src = 1;
inline bool FileSystem_Directory_Copy_Request::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Copy_Request::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Copy_Request::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Copy_Request::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_Directory_Copy_Request::src() const {
  return *src_;
}
inline void FileSystem_Directory_Copy_Request::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Copy_Request::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Copy_Request::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Copy_Request::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_Directory_Copy_Request::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Copy_Request::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_Directory_Copy_Request::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_Directory_Copy_Request::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_Directory_Copy_Request::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_Directory_Copy_Request::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_Directory_Copy_Request::dst() const {
  return *dst_;
}
inline void FileSystem_Directory_Copy_Request::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Copy_Request::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Copy_Request::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Copy_Request::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_Directory_Copy_Request::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Copy_Request::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Copy_Update

// required string src = 1;
inline bool FileSystem_Directory_Copy_Update::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Copy_Update::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Copy_Update::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Copy_Update::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_Directory_Copy_Update::src() const {
  return *src_;
}
inline void FileSystem_Directory_Copy_Update::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Copy_Update::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Copy_Update::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Copy_Update::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_Directory_Copy_Update::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Copy_Update::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_Directory_Copy_Update::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_Directory_Copy_Update::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_Directory_Copy_Update::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_Directory_Copy_Update::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_Directory_Copy_Update::dst() const {
  return *dst_;
}
inline void FileSystem_Directory_Copy_Update::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Copy_Update::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Copy_Update::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Copy_Update::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_Directory_Copy_Update::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Copy_Update::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Copy

// -------------------------------------------------------------------

// FileSystem_Directory_Move_Request

// required string src = 1;
inline bool FileSystem_Directory_Move_Request::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Move_Request::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Move_Request::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Move_Request::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_Directory_Move_Request::src() const {
  return *src_;
}
inline void FileSystem_Directory_Move_Request::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Move_Request::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Move_Request::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Move_Request::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_Directory_Move_Request::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Move_Request::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_Directory_Move_Request::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_Directory_Move_Request::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_Directory_Move_Request::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_Directory_Move_Request::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_Directory_Move_Request::dst() const {
  return *dst_;
}
inline void FileSystem_Directory_Move_Request::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Move_Request::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Move_Request::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Move_Request::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_Directory_Move_Request::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Move_Request::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Move_Update

// required string src = 1;
inline bool FileSystem_Directory_Move_Update::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_Directory_Move_Update::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_Directory_Move_Update::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_Directory_Move_Update::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_Directory_Move_Update::src() const {
  return *src_;
}
inline void FileSystem_Directory_Move_Update::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Move_Update::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_Directory_Move_Update::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Move_Update::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_Directory_Move_Update::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Move_Update::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_Directory_Move_Update::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_Directory_Move_Update::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_Directory_Move_Update::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_Directory_Move_Update::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_Directory_Move_Update::dst() const {
  return *dst_;
}
inline void FileSystem_Directory_Move_Update::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Move_Update::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_Directory_Move_Update::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_Directory_Move_Update::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_Directory_Move_Update::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_Directory_Move_Update::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_Directory_Move

// -------------------------------------------------------------------

// FileSystem_Directory

// -------------------------------------------------------------------

// FileSystem_File_Fetch_Request

// required string path = 1;
inline bool FileSystem_File_Fetch_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Fetch_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Fetch_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Fetch_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Fetch_Request::path() const {
  return *path_;
}
inline void FileSystem_File_Fetch_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Fetch_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Fetch_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Fetch_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Fetch_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Fetch_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Fetch_Status

// required string path = 1;
inline bool FileSystem_File_Fetch_Status::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Fetch_Status::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Fetch_Status::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Fetch_Status::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Fetch_Status::path() const {
  return *path_;
}
inline void FileSystem_File_Fetch_Status::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Fetch_Status::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Fetch_Status::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Fetch_Status::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Fetch_Status::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Fetch_Status::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Fetch

// -------------------------------------------------------------------

// FileSystem_File_Upload_Request

// required string path = 1;
inline bool FileSystem_File_Upload_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Upload_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Upload_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Upload_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Upload_Request::path() const {
  return *path_;
}
inline void FileSystem_File_Upload_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Upload_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Upload_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Upload_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Upload_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Upload_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Upload_Status

// required string path = 1;
inline bool FileSystem_File_Upload_Status::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Upload_Status::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Upload_Status::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Upload_Status::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Upload_Status::path() const {
  return *path_;
}
inline void FileSystem_File_Upload_Status::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Upload_Status::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Upload_Status::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Upload_Status::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Upload_Status::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Upload_Status::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Upload

// -------------------------------------------------------------------

// FileSystem_File_Exists_Request

// required string path = 1;
inline bool FileSystem_File_Exists_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Exists_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Exists_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Exists_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Exists_Request::path() const {
  return *path_;
}
inline void FileSystem_File_Exists_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Exists_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Exists_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Exists_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Exists_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Exists_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Exists_Status

// required bool exists = 1;
inline bool FileSystem_File_Exists_Status::has_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Exists_Status::set_has_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Exists_Status::clear_has_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Exists_Status::clear_exists() {
  exists_ = false;
  clear_has_exists();
}
inline bool FileSystem_File_Exists_Status::exists() const {
  return exists_;
}
inline void FileSystem_File_Exists_Status::set_exists(bool value) {
  set_has_exists();
  exists_ = value;
}

// required string path = 2;
inline bool FileSystem_File_Exists_Status::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_File_Exists_Status::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_File_Exists_Status::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_File_Exists_Status::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Exists_Status::path() const {
  return *path_;
}
inline void FileSystem_File_Exists_Status::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Exists_Status::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Exists_Status::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Exists_Status::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Exists_Status::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Exists_Status::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Exists

// -------------------------------------------------------------------

// FileSystem_File_Remove_Request

// required string path = 1;
inline bool FileSystem_File_Remove_Request::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Remove_Request::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Remove_Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Remove_Request::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Remove_Request::path() const {
  return *path_;
}
inline void FileSystem_File_Remove_Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Remove_Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Remove_Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Remove_Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Remove_Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Remove_Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Remove_Update

// required string path = 1;
inline bool FileSystem_File_Remove_Update::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Remove_Update::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Remove_Update::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Remove_Update::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileSystem_File_Remove_Update::path() const {
  return *path_;
}
inline void FileSystem_File_Remove_Update::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Remove_Update::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileSystem_File_Remove_Update::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Remove_Update::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileSystem_File_Remove_Update::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Remove_Update::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Remove

// -------------------------------------------------------------------

// FileSystem_File_Copy_Request

// required string src = 1;
inline bool FileSystem_File_Copy_Request::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Copy_Request::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Copy_Request::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Copy_Request::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_File_Copy_Request::src() const {
  return *src_;
}
inline void FileSystem_File_Copy_Request::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Copy_Request::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Copy_Request::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Copy_Request::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_File_Copy_Request::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Copy_Request::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_File_Copy_Request::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_File_Copy_Request::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_File_Copy_Request::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_File_Copy_Request::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_File_Copy_Request::dst() const {
  return *dst_;
}
inline void FileSystem_File_Copy_Request::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Copy_Request::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Copy_Request::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Copy_Request::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_File_Copy_Request::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Copy_Request::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Copy_Update

// required string src = 1;
inline bool FileSystem_File_Copy_Update::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Copy_Update::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Copy_Update::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Copy_Update::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_File_Copy_Update::src() const {
  return *src_;
}
inline void FileSystem_File_Copy_Update::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Copy_Update::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Copy_Update::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Copy_Update::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_File_Copy_Update::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Copy_Update::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_File_Copy_Update::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_File_Copy_Update::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_File_Copy_Update::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_File_Copy_Update::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_File_Copy_Update::dst() const {
  return *dst_;
}
inline void FileSystem_File_Copy_Update::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Copy_Update::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Copy_Update::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Copy_Update::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_File_Copy_Update::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Copy_Update::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Copy

// -------------------------------------------------------------------

// FileSystem_File_Move_Request

// required string src = 1;
inline bool FileSystem_File_Move_Request::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Move_Request::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Move_Request::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Move_Request::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_File_Move_Request::src() const {
  return *src_;
}
inline void FileSystem_File_Move_Request::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Move_Request::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Move_Request::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Move_Request::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_File_Move_Request::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Move_Request::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_File_Move_Request::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_File_Move_Request::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_File_Move_Request::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_File_Move_Request::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_File_Move_Request::dst() const {
  return *dst_;
}
inline void FileSystem_File_Move_Request::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Move_Request::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Move_Request::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Move_Request::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_File_Move_Request::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Move_Request::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Move_Update

// required string src = 1;
inline bool FileSystem_File_Move_Update::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSystem_File_Move_Update::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileSystem_File_Move_Update::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileSystem_File_Move_Update::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FileSystem_File_Move_Update::src() const {
  return *src_;
}
inline void FileSystem_File_Move_Update::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Move_Update::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FileSystem_File_Move_Update::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Move_Update::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FileSystem_File_Move_Update::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Move_Update::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool FileSystem_File_Move_Update::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSystem_File_Move_Update::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileSystem_File_Move_Update::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileSystem_File_Move_Update::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& FileSystem_File_Move_Update::dst() const {
  return *dst_;
}
inline void FileSystem_File_Move_Update::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Move_Update::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void FileSystem_File_Move_Update::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileSystem_File_Move_Update::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* FileSystem_File_Move_Update::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileSystem_File_Move_Update::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileSystem_File_Move

// -------------------------------------------------------------------

// FileSystem_File

// -------------------------------------------------------------------

// FileSystem


// @@protoc_insertion_point(namespace_scope)

}  // namespace fileManager
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_2dmanager_2eproto__INCLUDED
