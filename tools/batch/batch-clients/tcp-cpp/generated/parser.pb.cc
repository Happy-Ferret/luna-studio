// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "parser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace parser {

namespace {

const ::google::protobuf::Descriptor* Parse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Expr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Expr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Expr_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Expr_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Expr_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Expr_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Pat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Pat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Pat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Pat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Pat_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Pat_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Type_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Type_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Type_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_Type_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_Type_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_NodeExpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_NodeExpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_NodeExpr_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_NodeExpr_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parse_NodeExpr_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parse_NodeExpr_Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_parser_2eproto() {
  protobuf_AddDesc_parser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "parser.proto");
  GOOGLE_CHECK(file != NULL);
  Parse_descriptor_ = file->message_type(0);
  static const int Parse_offsets_[1] = {
  };
  Parse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_descriptor_,
      Parse::default_instance_,
      Parse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse));
  Parse_Expr_descriptor_ = Parse_descriptor_->nested_type(0);
  static const int Parse_Expr_offsets_[1] = {
  };
  Parse_Expr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Expr_descriptor_,
      Parse_Expr::default_instance_,
      Parse_Expr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Expr));
  Parse_Expr_Request_descriptor_ = Parse_Expr_descriptor_->nested_type(0);
  static const int Parse_Expr_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr_Request, str_),
  };
  Parse_Expr_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Expr_Request_descriptor_,
      Parse_Expr_Request::default_instance_,
      Parse_Expr_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Expr_Request));
  Parse_Expr_Status_descriptor_ = Parse_Expr_descriptor_->nested_type(1);
  static const int Parse_Expr_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr_Status, expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr_Status, str_),
  };
  Parse_Expr_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Expr_Status_descriptor_,
      Parse_Expr_Status::default_instance_,
      Parse_Expr_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Expr_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Expr_Status));
  Parse_Pat_descriptor_ = Parse_descriptor_->nested_type(1);
  static const int Parse_Pat_offsets_[1] = {
  };
  Parse_Pat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Pat_descriptor_,
      Parse_Pat::default_instance_,
      Parse_Pat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Pat));
  Parse_Pat_Request_descriptor_ = Parse_Pat_descriptor_->nested_type(0);
  static const int Parse_Pat_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat_Request, str_),
  };
  Parse_Pat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Pat_Request_descriptor_,
      Parse_Pat_Request::default_instance_,
      Parse_Pat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Pat_Request));
  Parse_Pat_Status_descriptor_ = Parse_Pat_descriptor_->nested_type(1);
  static const int Parse_Pat_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat_Status, pat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat_Status, str_),
  };
  Parse_Pat_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Pat_Status_descriptor_,
      Parse_Pat_Status::default_instance_,
      Parse_Pat_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Pat_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Pat_Status));
  Parse_Type_descriptor_ = Parse_descriptor_->nested_type(2);
  static const int Parse_Type_offsets_[1] = {
  };
  Parse_Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Type_descriptor_,
      Parse_Type::default_instance_,
      Parse_Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Type));
  Parse_Type_Request_descriptor_ = Parse_Type_descriptor_->nested_type(0);
  static const int Parse_Type_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type_Request, str_),
  };
  Parse_Type_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Type_Request_descriptor_,
      Parse_Type_Request::default_instance_,
      Parse_Type_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Type_Request));
  Parse_Type_Status_descriptor_ = Parse_Type_descriptor_->nested_type(1);
  static const int Parse_Type_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type_Status, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type_Status, str_),
  };
  Parse_Type_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_Type_Status_descriptor_,
      Parse_Type_Status::default_instance_,
      Parse_Type_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_Type_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_Type_Status));
  Parse_NodeExpr_descriptor_ = Parse_descriptor_->nested_type(3);
  static const int Parse_NodeExpr_offsets_[1] = {
  };
  Parse_NodeExpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_NodeExpr_descriptor_,
      Parse_NodeExpr::default_instance_,
      Parse_NodeExpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_NodeExpr));
  Parse_NodeExpr_Request_descriptor_ = Parse_NodeExpr_descriptor_->nested_type(0);
  static const int Parse_NodeExpr_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr_Request, str_),
  };
  Parse_NodeExpr_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_NodeExpr_Request_descriptor_,
      Parse_NodeExpr_Request::default_instance_,
      Parse_NodeExpr_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_NodeExpr_Request));
  Parse_NodeExpr_Status_descriptor_ = Parse_NodeExpr_descriptor_->nested_type(1);
  static const int Parse_NodeExpr_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr_Status, expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr_Status, str_),
  };
  Parse_NodeExpr_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parse_NodeExpr_Status_descriptor_,
      Parse_NodeExpr_Status::default_instance_,
      Parse_NodeExpr_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parse_NodeExpr_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parse_NodeExpr_Status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_parser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_descriptor_, &Parse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Expr_descriptor_, &Parse_Expr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Expr_Request_descriptor_, &Parse_Expr_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Expr_Status_descriptor_, &Parse_Expr_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Pat_descriptor_, &Parse_Pat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Pat_Request_descriptor_, &Parse_Pat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Pat_Status_descriptor_, &Parse_Pat_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Type_descriptor_, &Parse_Type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Type_Request_descriptor_, &Parse_Type_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_Type_Status_descriptor_, &Parse_Type_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_NodeExpr_descriptor_, &Parse_NodeExpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_NodeExpr_Request_descriptor_, &Parse_NodeExpr_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parse_NodeExpr_Status_descriptor_, &Parse_NodeExpr_Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_parser_2eproto() {
  delete Parse::default_instance_;
  delete Parse_reflection_;
  delete Parse_Expr::default_instance_;
  delete Parse_Expr_reflection_;
  delete Parse_Expr_Request::default_instance_;
  delete Parse_Expr_Request_reflection_;
  delete Parse_Expr_Status::default_instance_;
  delete Parse_Expr_Status_reflection_;
  delete Parse_Pat::default_instance_;
  delete Parse_Pat_reflection_;
  delete Parse_Pat_Request::default_instance_;
  delete Parse_Pat_Request_reflection_;
  delete Parse_Pat_Status::default_instance_;
  delete Parse_Pat_Status_reflection_;
  delete Parse_Type::default_instance_;
  delete Parse_Type_reflection_;
  delete Parse_Type_Request::default_instance_;
  delete Parse_Type_Request_reflection_;
  delete Parse_Type_Status::default_instance_;
  delete Parse_Type_Status_reflection_;
  delete Parse_NodeExpr::default_instance_;
  delete Parse_NodeExpr_reflection_;
  delete Parse_NodeExpr_Request::default_instance_;
  delete Parse_NodeExpr_Request_reflection_;
  delete Parse_NodeExpr_Status::default_instance_;
  delete Parse_NodeExpr_Status_reflection_;
}

void protobuf_AddDesc_parser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::generated::proto::expr::protobuf_AddDesc_expr_2eproto();
  ::generated::proto::pat::protobuf_AddDesc_pat_2eproto();
  ::generated::proto::type::protobuf_AddDesc_type_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014parser.proto\022\026generated.proto.parser\032\n"
    "expr.proto\032\tpat.proto\032\ntype.proto\"\213\003\n\005Pa"
    "rse\032_\n\004Expr\032\026\n\007Request\022\013\n\003str\030\001 \002(\t\032\?\n\006S"
    "tatus\022(\n\004expr\030\001 \002(\0132\032.generated.proto.ex"
    "pr.Expr\022\013\n\003str\030\002 \002(\t\032[\n\003Pat\032\026\n\007Request\022\013"
    "\n\003str\030\001 \002(\t\032<\n\006Status\022%\n\003pat\030\001 \002(\0132\030.gen"
    "erated.proto.pat.Pat\022\013\n\003str\030\002 \002(\t\032_\n\004Typ"
    "e\032\026\n\007Request\022\013\n\003str\030\001 \002(\t\032\?\n\006Status\022(\n\004t"
    "ype\030\001 \002(\0132\032.generated.proto.type.Type\022\013\n"
    "\003str\030\002 \002(\t\032c\n\010NodeExpr\032\026\n\007Request\022\013\n\003str"
    "\030\001 \002(\t\032\?\n\006Status\022(\n\004expr\030\001 \002(\0132\032.generat"
    "ed.proto.expr.Expr\022\013\n\003str\030\002 \002(\t", 471);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "parser.proto", &protobuf_RegisterTypes);
  Parse::default_instance_ = new Parse();
  Parse_Expr::default_instance_ = new Parse_Expr();
  Parse_Expr_Request::default_instance_ = new Parse_Expr_Request();
  Parse_Expr_Status::default_instance_ = new Parse_Expr_Status();
  Parse_Pat::default_instance_ = new Parse_Pat();
  Parse_Pat_Request::default_instance_ = new Parse_Pat_Request();
  Parse_Pat_Status::default_instance_ = new Parse_Pat_Status();
  Parse_Type::default_instance_ = new Parse_Type();
  Parse_Type_Request::default_instance_ = new Parse_Type_Request();
  Parse_Type_Status::default_instance_ = new Parse_Type_Status();
  Parse_NodeExpr::default_instance_ = new Parse_NodeExpr();
  Parse_NodeExpr_Request::default_instance_ = new Parse_NodeExpr_Request();
  Parse_NodeExpr_Status::default_instance_ = new Parse_NodeExpr_Status();
  Parse::default_instance_->InitAsDefaultInstance();
  Parse_Expr::default_instance_->InitAsDefaultInstance();
  Parse_Expr_Request::default_instance_->InitAsDefaultInstance();
  Parse_Expr_Status::default_instance_->InitAsDefaultInstance();
  Parse_Pat::default_instance_->InitAsDefaultInstance();
  Parse_Pat_Request::default_instance_->InitAsDefaultInstance();
  Parse_Pat_Status::default_instance_->InitAsDefaultInstance();
  Parse_Type::default_instance_->InitAsDefaultInstance();
  Parse_Type_Request::default_instance_->InitAsDefaultInstance();
  Parse_Type_Status::default_instance_->InitAsDefaultInstance();
  Parse_NodeExpr::default_instance_->InitAsDefaultInstance();
  Parse_NodeExpr_Request::default_instance_->InitAsDefaultInstance();
  Parse_NodeExpr_Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_parser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_parser_2eproto {
  StaticDescriptorInitializer_parser_2eproto() {
    protobuf_AddDesc_parser_2eproto();
  }
} static_descriptor_initializer_parser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Parse_Expr_Request::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_Expr_Request::Parse_Expr_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Expr_Request::InitAsDefaultInstance() {
}

Parse_Expr_Request::Parse_Expr_Request(const Parse_Expr_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Expr_Request::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Expr_Request::~Parse_Expr_Request() {
  SharedDtor();
}

void Parse_Expr_Request::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void Parse_Expr_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Expr_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Expr_Request_descriptor_;
}

const Parse_Expr_Request& Parse_Expr_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Expr_Request* Parse_Expr_Request::default_instance_ = NULL;

Parse_Expr_Request* Parse_Expr_Request::New() const {
  return new Parse_Expr_Request;
}

void Parse_Expr_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Expr_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_Expr_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Expr_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Expr_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Expr_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Expr_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Expr_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Expr_Request::MergeFrom(const Parse_Expr_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Expr_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Expr_Request::CopyFrom(const Parse_Expr_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Expr_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parse_Expr_Request::Swap(Parse_Expr_Request* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Expr_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Expr_Request_descriptor_;
  metadata.reflection = Parse_Expr_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parse_Expr_Status::kExprFieldNumber;
const int Parse_Expr_Status::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_Expr_Status::Parse_Expr_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Expr_Status::InitAsDefaultInstance() {
  expr_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Parse_Expr_Status::Parse_Expr_Status(const Parse_Expr_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Expr_Status::SharedCtor() {
  _cached_size_ = 0;
  expr_ = NULL;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Expr_Status::~Parse_Expr_Status() {
  SharedDtor();
}

void Parse_Expr_Status::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete expr_;
  }
}

void Parse_Expr_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Expr_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Expr_Status_descriptor_;
}

const Parse_Expr_Status& Parse_Expr_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Expr_Status* Parse_Expr_Status::default_instance_ = NULL;

Parse_Expr_Status* Parse_Expr_Status::New() const {
  return new Parse_Expr_Status;
}

void Parse_Expr_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expr()) {
      if (expr_ != NULL) expr_->::generated::proto::expr::Expr::Clear();
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Expr_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.expr.Expr expr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // required string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_Expr_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expr(), output);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Expr_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expr(), target);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Expr_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.expr.Expr expr = 1;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

    // required string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Expr_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Expr_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Expr_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Expr_Status::MergeFrom(const Parse_Expr_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expr()) {
      mutable_expr()->::generated::proto::expr::Expr::MergeFrom(from.expr());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Expr_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Expr_Status::CopyFrom(const Parse_Expr_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Expr_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_expr()) {
    if (!this->expr().IsInitialized()) return false;
  }
  return true;
}

void Parse_Expr_Status::Swap(Parse_Expr_Status* other) {
  if (other != this) {
    std::swap(expr_, other->expr_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Expr_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Expr_Status_descriptor_;
  metadata.reflection = Parse_Expr_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Parse_Expr::Parse_Expr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Expr::InitAsDefaultInstance() {
}

Parse_Expr::Parse_Expr(const Parse_Expr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Expr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Expr::~Parse_Expr() {
  SharedDtor();
}

void Parse_Expr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parse_Expr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Expr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Expr_descriptor_;
}

const Parse_Expr& Parse_Expr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Expr* Parse_Expr::default_instance_ = NULL;

Parse_Expr* Parse_Expr::New() const {
  return new Parse_Expr;
}

void Parse_Expr::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Parse_Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Expr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Expr::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Expr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Expr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Expr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Expr::MergeFrom(const Parse_Expr& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Expr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Expr::CopyFrom(const Parse_Expr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Expr::IsInitialized() const {

  return true;
}

void Parse_Expr::Swap(Parse_Expr* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Expr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Expr_descriptor_;
  metadata.reflection = Parse_Expr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parse_Pat_Request::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_Pat_Request::Parse_Pat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Pat_Request::InitAsDefaultInstance() {
}

Parse_Pat_Request::Parse_Pat_Request(const Parse_Pat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Pat_Request::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Pat_Request::~Parse_Pat_Request() {
  SharedDtor();
}

void Parse_Pat_Request::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void Parse_Pat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Pat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Pat_Request_descriptor_;
}

const Parse_Pat_Request& Parse_Pat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Pat_Request* Parse_Pat_Request::default_instance_ = NULL;

Parse_Pat_Request* Parse_Pat_Request::New() const {
  return new Parse_Pat_Request;
}

void Parse_Pat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Pat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_Pat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Pat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Pat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Pat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Pat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Pat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Pat_Request::MergeFrom(const Parse_Pat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Pat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Pat_Request::CopyFrom(const Parse_Pat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Pat_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parse_Pat_Request::Swap(Parse_Pat_Request* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Pat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Pat_Request_descriptor_;
  metadata.reflection = Parse_Pat_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parse_Pat_Status::kPatFieldNumber;
const int Parse_Pat_Status::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_Pat_Status::Parse_Pat_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Pat_Status::InitAsDefaultInstance() {
  pat_ = const_cast< ::generated::proto::pat::Pat*>(&::generated::proto::pat::Pat::default_instance());
}

Parse_Pat_Status::Parse_Pat_Status(const Parse_Pat_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Pat_Status::SharedCtor() {
  _cached_size_ = 0;
  pat_ = NULL;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Pat_Status::~Parse_Pat_Status() {
  SharedDtor();
}

void Parse_Pat_Status::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete pat_;
  }
}

void Parse_Pat_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Pat_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Pat_Status_descriptor_;
}

const Parse_Pat_Status& Parse_Pat_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Pat_Status* Parse_Pat_Status::default_instance_ = NULL;

Parse_Pat_Status* Parse_Pat_Status::New() const {
  return new Parse_Pat_Status;
}

void Parse_Pat_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pat()) {
      if (pat_ != NULL) pat_->::generated::proto::pat::Pat::Clear();
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Pat_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.pat.Pat pat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // required string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_Pat_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pat(), output);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Pat_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.pat.Pat pat = 1;
  if (has_pat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pat(), target);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Pat_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.pat.Pat pat = 1;
    if (has_pat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pat());
    }

    // required string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Pat_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Pat_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Pat_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Pat_Status::MergeFrom(const Parse_Pat_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pat()) {
      mutable_pat()->::generated::proto::pat::Pat::MergeFrom(from.pat());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Pat_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Pat_Status::CopyFrom(const Parse_Pat_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Pat_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pat()) {
    if (!this->pat().IsInitialized()) return false;
  }
  return true;
}

void Parse_Pat_Status::Swap(Parse_Pat_Status* other) {
  if (other != this) {
    std::swap(pat_, other->pat_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Pat_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Pat_Status_descriptor_;
  metadata.reflection = Parse_Pat_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Parse_Pat::Parse_Pat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Pat::InitAsDefaultInstance() {
}

Parse_Pat::Parse_Pat(const Parse_Pat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Pat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Pat::~Parse_Pat() {
  SharedDtor();
}

void Parse_Pat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parse_Pat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Pat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Pat_descriptor_;
}

const Parse_Pat& Parse_Pat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Pat* Parse_Pat::default_instance_ = NULL;

Parse_Pat* Parse_Pat::New() const {
  return new Parse_Pat;
}

void Parse_Pat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Pat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Parse_Pat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Pat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Pat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Pat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Pat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Pat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Pat::MergeFrom(const Parse_Pat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Pat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Pat::CopyFrom(const Parse_Pat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Pat::IsInitialized() const {

  return true;
}

void Parse_Pat::Swap(Parse_Pat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Pat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Pat_descriptor_;
  metadata.reflection = Parse_Pat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parse_Type_Request::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_Type_Request::Parse_Type_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Type_Request::InitAsDefaultInstance() {
}

Parse_Type_Request::Parse_Type_Request(const Parse_Type_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Type_Request::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Type_Request::~Parse_Type_Request() {
  SharedDtor();
}

void Parse_Type_Request::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void Parse_Type_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Type_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Type_Request_descriptor_;
}

const Parse_Type_Request& Parse_Type_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Type_Request* Parse_Type_Request::default_instance_ = NULL;

Parse_Type_Request* Parse_Type_Request::New() const {
  return new Parse_Type_Request;
}

void Parse_Type_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Type_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_Type_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Type_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Type_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Type_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Type_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Type_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Type_Request::MergeFrom(const Parse_Type_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Type_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Type_Request::CopyFrom(const Parse_Type_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Type_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parse_Type_Request::Swap(Parse_Type_Request* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Type_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Type_Request_descriptor_;
  metadata.reflection = Parse_Type_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parse_Type_Status::kTypeFieldNumber;
const int Parse_Type_Status::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_Type_Status::Parse_Type_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Type_Status::InitAsDefaultInstance() {
  type_ = const_cast< ::generated::proto::type::Type*>(&::generated::proto::type::Type::default_instance());
}

Parse_Type_Status::Parse_Type_Status(const Parse_Type_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Type_Status::SharedCtor() {
  _cached_size_ = 0;
  type_ = NULL;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Type_Status::~Parse_Type_Status() {
  SharedDtor();
}

void Parse_Type_Status::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete type_;
  }
}

void Parse_Type_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Type_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Type_Status_descriptor_;
}

const Parse_Type_Status& Parse_Type_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Type_Status* Parse_Type_Status::default_instance_ = NULL;

Parse_Type_Status* Parse_Type_Status::New() const {
  return new Parse_Type_Status;
}

void Parse_Type_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != NULL) type_->::generated::proto::type::Type::Clear();
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Type_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.type.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // required string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_Type_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.type.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->type(), output);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Type_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.type.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->type(), target);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Type_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.type.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }

    // required string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Type_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Type_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Type_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Type_Status::MergeFrom(const Parse_Type_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      mutable_type()->::generated::proto::type::Type::MergeFrom(from.type());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Type_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Type_Status::CopyFrom(const Parse_Type_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Type_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  return true;
}

void Parse_Type_Status::Swap(Parse_Type_Status* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Type_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Type_Status_descriptor_;
  metadata.reflection = Parse_Type_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Parse_Type::Parse_Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_Type::InitAsDefaultInstance() {
}

Parse_Type::Parse_Type(const Parse_Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_Type::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_Type::~Parse_Type() {
  SharedDtor();
}

void Parse_Type::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parse_Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_Type_descriptor_;
}

const Parse_Type& Parse_Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_Type* Parse_Type::default_instance_ = NULL;

Parse_Type* Parse_Type::New() const {
  return new Parse_Type;
}

void Parse_Type::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Parse_Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_Type::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_Type::MergeFrom(const Parse_Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_Type::CopyFrom(const Parse_Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_Type::IsInitialized() const {

  return true;
}

void Parse_Type::Swap(Parse_Type* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_Type_descriptor_;
  metadata.reflection = Parse_Type_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parse_NodeExpr_Request::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_NodeExpr_Request::Parse_NodeExpr_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_NodeExpr_Request::InitAsDefaultInstance() {
}

Parse_NodeExpr_Request::Parse_NodeExpr_Request(const Parse_NodeExpr_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_NodeExpr_Request::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_NodeExpr_Request::~Parse_NodeExpr_Request() {
  SharedDtor();
}

void Parse_NodeExpr_Request::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void Parse_NodeExpr_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_NodeExpr_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_NodeExpr_Request_descriptor_;
}

const Parse_NodeExpr_Request& Parse_NodeExpr_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_NodeExpr_Request* Parse_NodeExpr_Request::default_instance_ = NULL;

Parse_NodeExpr_Request* Parse_NodeExpr_Request::New() const {
  return new Parse_NodeExpr_Request;
}

void Parse_NodeExpr_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_NodeExpr_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_NodeExpr_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_NodeExpr_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_NodeExpr_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_NodeExpr_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_NodeExpr_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_NodeExpr_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_NodeExpr_Request::MergeFrom(const Parse_NodeExpr_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_NodeExpr_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_NodeExpr_Request::CopyFrom(const Parse_NodeExpr_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_NodeExpr_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parse_NodeExpr_Request::Swap(Parse_NodeExpr_Request* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_NodeExpr_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_NodeExpr_Request_descriptor_;
  metadata.reflection = Parse_NodeExpr_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Parse_NodeExpr_Status::kExprFieldNumber;
const int Parse_NodeExpr_Status::kStrFieldNumber;
#endif  // !_MSC_VER

Parse_NodeExpr_Status::Parse_NodeExpr_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_NodeExpr_Status::InitAsDefaultInstance() {
  expr_ = const_cast< ::generated::proto::expr::Expr*>(&::generated::proto::expr::Expr::default_instance());
}

Parse_NodeExpr_Status::Parse_NodeExpr_Status(const Parse_NodeExpr_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_NodeExpr_Status::SharedCtor() {
  _cached_size_ = 0;
  expr_ = NULL;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_NodeExpr_Status::~Parse_NodeExpr_Status() {
  SharedDtor();
}

void Parse_NodeExpr_Status::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete expr_;
  }
}

void Parse_NodeExpr_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_NodeExpr_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_NodeExpr_Status_descriptor_;
}

const Parse_NodeExpr_Status& Parse_NodeExpr_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_NodeExpr_Status* Parse_NodeExpr_Status::default_instance_ = NULL;

Parse_NodeExpr_Status* Parse_NodeExpr_Status::New() const {
  return new Parse_NodeExpr_Status;
}

void Parse_NodeExpr_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expr()) {
      if (expr_ != NULL) expr_->::generated::proto::expr::Expr::Clear();
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_NodeExpr_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .generated.proto.expr.Expr expr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // required string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parse_NodeExpr_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expr(), output);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_NodeExpr_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .generated.proto.expr.Expr expr = 1;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expr(), target);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_NodeExpr_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .generated.proto.expr.Expr expr = 1;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

    // required string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_NodeExpr_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_NodeExpr_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_NodeExpr_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_NodeExpr_Status::MergeFrom(const Parse_NodeExpr_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expr()) {
      mutable_expr()->::generated::proto::expr::Expr::MergeFrom(from.expr());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_NodeExpr_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_NodeExpr_Status::CopyFrom(const Parse_NodeExpr_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_NodeExpr_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_expr()) {
    if (!this->expr().IsInitialized()) return false;
  }
  return true;
}

void Parse_NodeExpr_Status::Swap(Parse_NodeExpr_Status* other) {
  if (other != this) {
    std::swap(expr_, other->expr_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_NodeExpr_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_NodeExpr_Status_descriptor_;
  metadata.reflection = Parse_NodeExpr_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Parse_NodeExpr::Parse_NodeExpr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse_NodeExpr::InitAsDefaultInstance() {
}

Parse_NodeExpr::Parse_NodeExpr(const Parse_NodeExpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse_NodeExpr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse_NodeExpr::~Parse_NodeExpr() {
  SharedDtor();
}

void Parse_NodeExpr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parse_NodeExpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse_NodeExpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_NodeExpr_descriptor_;
}

const Parse_NodeExpr& Parse_NodeExpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse_NodeExpr* Parse_NodeExpr::default_instance_ = NULL;

Parse_NodeExpr* Parse_NodeExpr::New() const {
  return new Parse_NodeExpr;
}

void Parse_NodeExpr::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse_NodeExpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Parse_NodeExpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse_NodeExpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse_NodeExpr::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse_NodeExpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse_NodeExpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse_NodeExpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse_NodeExpr::MergeFrom(const Parse_NodeExpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse_NodeExpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse_NodeExpr::CopyFrom(const Parse_NodeExpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse_NodeExpr::IsInitialized() const {

  return true;
}

void Parse_NodeExpr::Swap(Parse_NodeExpr* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse_NodeExpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_NodeExpr_descriptor_;
  metadata.reflection = Parse_NodeExpr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Parse::Parse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parse::InitAsDefaultInstance() {
}

Parse::Parse(const Parse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parse::~Parse() {
  SharedDtor();
}

void Parse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parse_descriptor_;
}

const Parse& Parse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parser_2eproto();
  return *default_instance_;
}

Parse* Parse::default_instance_ = NULL;

Parse* Parse::New() const {
  return new Parse;
}

void Parse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Parse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parse::MergeFrom(const Parse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parse::CopyFrom(const Parse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parse::IsInitialized() const {

  return true;
}

void Parse::Swap(Parse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parse_descriptor_;
  metadata.reflection = Parse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace parser
}  // namespace proto
}  // namespace generated

// @@protoc_insertion_point(global_scope)
