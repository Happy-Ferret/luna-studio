// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lit.proto

#ifndef PROTOBUF_lit_2eproto__INCLUDED
#define PROTOBUF_lit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace generated {
namespace proto {
namespace lit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lit_2eproto();
void protobuf_AssignDesc_lit_2eproto();
void protobuf_ShutdownFile_lit_2eproto();

class Lit;

enum Lit_Cls {
  Lit_Cls_Char = 1,
  Lit_Cls_String = 2,
  Lit_Cls_Integer = 3,
  Lit_Cls_Float = 4
};
bool Lit_Cls_IsValid(int value);
const Lit_Cls Lit_Cls_Cls_MIN = Lit_Cls_Char;
const Lit_Cls Lit_Cls_Cls_MAX = Lit_Cls_Float;
const int Lit_Cls_Cls_ARRAYSIZE = Lit_Cls_Cls_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lit_Cls_descriptor();
inline const ::std::string& Lit_Cls_Name(Lit_Cls value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lit_Cls_descriptor(), value);
}
inline bool Lit_Cls_Parse(
    const ::std::string& name, Lit_Cls* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lit_Cls>(
    Lit_Cls_descriptor(), name, value);
}
// ===================================================================

class Lit : public ::google::protobuf::Message {
 public:
  Lit();
  virtual ~Lit();

  Lit(const Lit& from);

  inline Lit& operator=(const Lit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lit& default_instance();

  void Swap(Lit* other);

  // implements Message ----------------------------------------------

  Lit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lit& from);
  void MergeFrom(const Lit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Lit_Cls Cls;
  static const Cls Char = Lit_Cls_Char;
  static const Cls String = Lit_Cls_String;
  static const Cls Integer = Lit_Cls_Integer;
  static const Cls Float = Lit_Cls_Float;
  static inline bool Cls_IsValid(int value) {
    return Lit_Cls_IsValid(value);
  }
  static const Cls Cls_MIN =
    Lit_Cls_Cls_MIN;
  static const Cls Cls_MAX =
    Lit_Cls_Cls_MAX;
  static const int Cls_ARRAYSIZE =
    Lit_Cls_Cls_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cls_descriptor() {
    return Lit_Cls_descriptor();
  }
  static inline const ::std::string& Cls_Name(Cls value) {
    return Lit_Cls_Name(value);
  }
  static inline bool Cls_Parse(const ::std::string& name,
      Cls* value) {
    return Lit_Cls_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .generated.proto.lit.Lit.Cls dtype = 1;
  inline bool has_dtype() const;
  inline void clear_dtype();
  static const int kDtypeFieldNumber = 1;
  inline ::generated::proto::lit::Lit_Cls dtype() const;
  inline void set_dtype(::generated::proto::lit::Lit_Cls value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string str = 3;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 3;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:generated.proto.lit.Lit)
 private:
  inline void set_has_dtype();
  inline void clear_has_dtype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int dtype_;
  ::google::protobuf::int32 id_;
  ::std::string* str_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lit_2eproto();
  friend void protobuf_AssignDesc_lit_2eproto();
  friend void protobuf_ShutdownFile_lit_2eproto();

  void InitAsDefaultInstance();
  static Lit* default_instance_;
};
// ===================================================================


// ===================================================================

// Lit

// required .generated.proto.lit.Lit.Cls dtype = 1;
inline bool Lit::has_dtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lit::set_has_dtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lit::clear_has_dtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lit::clear_dtype() {
  dtype_ = 1;
  clear_has_dtype();
}
inline ::generated::proto::lit::Lit_Cls Lit::dtype() const {
  return static_cast< ::generated::proto::lit::Lit_Cls >(dtype_);
}
inline void Lit::set_dtype(::generated::proto::lit::Lit_Cls value) {
  assert(::generated::proto::lit::Lit_Cls_IsValid(value));
  set_has_dtype();
  dtype_ = value;
}

// optional int32 id = 2;
inline bool Lit::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lit::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lit::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lit::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Lit::id() const {
  return id_;
}
inline void Lit::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string str = 3;
inline bool Lit::has_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lit::set_has_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lit::clear_has_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lit::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& Lit::str() const {
  return *str_;
}
inline void Lit::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void Lit::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void Lit::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Lit::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* Lit::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Lit::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lit
}  // namespace proto
}  // namespace generated

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::generated::proto::lit::Lit_Cls>() {
  return ::generated::proto::lit::Lit_Cls_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lit_2eproto__INCLUDED
