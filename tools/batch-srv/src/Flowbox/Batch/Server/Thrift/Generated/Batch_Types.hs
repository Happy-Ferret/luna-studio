{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Batch_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import           Control.Exception      
import           Data.ByteString.Lazy   
import           Data.Hashable          
import           Data.Int               
import           Data.Text.Lazy         ( Text )
import qualified Data.Text.Lazy       as TL
import           Data.Typeable          ( Typeable )
import qualified Data.HashMap.Strict  as Map
import qualified Data.HashSet         as Set
import qualified Data.Vector          as Vector

import           Thrift                 
import           Thrift.Types           ()

import qualified Fs_Types               
import qualified Graphview_Types        
import qualified Projects_Types         
import qualified Attrs_Types            
import qualified Defs_Types             
import qualified Graph_Types            
import qualified Libs_Types             
import qualified Types_Types            


data ArgumentException = ArgumentException{f_ArgumentException_message :: Maybe Text} deriving (Show,Eq,Typeable)
instance Exception ArgumentException
instance Hashable ArgumentException where
  hashWithSalt salt record = salt   `hashWithSalt` f_ArgumentException_message record  
write_ArgumentException oprot record = do
  writeStructBegin oprot "ArgumentException"
  case f_ArgumentException_message record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("message",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ArgumentException_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_STRING then do
        s <- readString iprot
        read_ArgumentException_fields iprot record{f_ArgumentException_message=Just s}
        else do
          skip iprot _t3
          read_ArgumentException_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_ArgumentException_fields iprot record
read_ArgumentException iprot = do
  _ <- readStructBegin iprot
  record <- read_ArgumentException_fields iprot (ArgumentException{f_ArgumentException_message=Nothing})
  readStructEnd iprot
  return record
