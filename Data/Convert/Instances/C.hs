{- |
   Module     : Data.MaybeConvertible.Instances.C
   Copyright  : Copyright (C) 2009-2011 John Goerzen
   License    : BSD3

   Maintainer : John Goerzen <jgoerzen@complete.org>
   Stability  : provisional
   Portability: portable

Numeric instances for MaybeConvertible for C types.  See comments in
"Data.MaybeConvertible.Instances.Num".

Copyright (C) 2009-2011 John Goerzen <jgoerzen@complete.org>

All rights reserved.

For license and copyright information, see the file LICENSE
-}
module Data.Convert.Instances.C()
where

import Data.Convert.Base
import Data.Convert.Bound
import Data.Convert.Instances.Num()
import Data.Int
import Data.Word
import Foreign.C.Types

-- remainder of this file generated by utils/genCinstances.hs

---- Section 1
--instance MaybeConvertible CFloat Int where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Int8 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int8 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Int16 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int16 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Int32 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int32 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Int64 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int64 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Word where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Word8 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word8 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Word16 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word16 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Word32 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word32 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CFloat Word64 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word64 CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Int where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Int8 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int8 CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Int16 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int16 CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Int32 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int32 CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Int64 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Int64 CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Word where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Word8 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word8 CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Word16 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word16 CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Word32 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word32 CDouble where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Word64 where
--    safeConvert = boundedConversion (return . truncate)
--instance MaybeConvertible Word64 CDouble where
--    safeConvert = return . fromIntegral

---- Section 2
--instance MaybeConvertible CFloat Double where
--    safeConvert = return . realToFrac
--instance MaybeConvertible Double CFloat where
--    safeConvert = return . realToFrac

--instance MaybeConvertible CFloat Float where
--    safeConvert = return . realToFrac
--instance MaybeConvertible Float CFloat where
--    safeConvert = return . realToFrac

--instance MaybeConvertible CFloat Rational where
--    safeConvert = return . realToFrac
--instance MaybeConvertible Rational CFloat where
--    safeConvert = return . realToFrac

--instance MaybeConvertible CDouble Double where
--    safeConvert = return . realToFrac
--instance MaybeConvertible Double CDouble where
--    safeConvert = return . realToFrac

--instance MaybeConvertible CDouble Float where
--    safeConvert = return . realToFrac
--instance MaybeConvertible Float CDouble where
--    safeConvert = return . realToFrac

--instance MaybeConvertible CDouble Rational where
--    safeConvert = return . realToFrac
--instance MaybeConvertible Rational CDouble where
--    safeConvert = return . realToFrac

---- Section 3
--instance MaybeConvertible CChar Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Int where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Int8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int8 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Int16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int16 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Int32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int32 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Int64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Int64 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Word where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Word8 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word8 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Word16 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word16 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Word32 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word32 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Word64 where
--    safeConvert = boundedConversion (return . fromIntegral)
--instance MaybeConvertible Word64 CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

---- Section 4
--instance MaybeConvertible CChar CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CChar CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

---- Section 5
--instance MaybeConvertible CFloat CDouble where
--    safeConvert = return . realToFrac

--instance MaybeConvertible CDouble CFloat where
--    safeConvert = return . realToFrac

---- Section 6
--instance MaybeConvertible CFloat Integer where
--    safeConvert = return . truncate
--instance MaybeConvertible Integer CFloat where
--    safeConvert = return . fromIntegral

--instance MaybeConvertible CDouble Integer where
--    safeConvert = return . truncate
--instance MaybeConvertible Integer CDouble where
--    safeConvert = return . fromIntegral

---- Section 7
--instance MaybeConvertible CChar Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSChar Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CSChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUChar Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CUChar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CShort Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUShort Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CUShort where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CInt Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CUInt Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CUInt where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLong Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULong Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CULong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CSize Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CSize where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CWchar Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CWchar where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CLLong Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CLLong where
--    safeConvert = boundedConversion (return . fromIntegral)

--instance MaybeConvertible CULLong Integer where
--    safeConvert = return . fromIntegral
--instance MaybeConvertible Integer CULLong where
--    safeConvert = boundedConversion (return . fromIntegral)

---- Section 8o
--instance MaybeConvertible CChar Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CChar where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CSChar Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CSChar where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CUChar Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CUChar where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CShort Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CShort where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CUShort Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CUShort where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CInt Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CInt where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CUInt Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CUInt where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CLong Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CLong where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CULong Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CULong where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CSize Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CSize where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CWchar Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CWchar where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CLLong Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CLLong where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

--instance MaybeConvertible CULLong Char where
--    safeConvert = boundedConversion (return . toEnum . fromIntegral)
--instance MaybeConvertible Char CULLong where
--    safeConvert = boundedConversion (return . fromIntegral . fromEnum)

