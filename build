#!/usr/bin/env python3

import scripts_build.atom_prepare
import scripts_build.atom_apm
import scripts_build.copy_configs
import scripts_build.stack_build
import argparse
import os
import subprocess
import sys

app_dir      = scripts_build.atom_prepare.prep_path('..')
backend_dir  = scripts_build.atom_prepare.prep_path('../build-config/backend')
frontend_dir = scripts_build.atom_prepare.prep_path('../luna-studio')



def build_app (backend_args, frontend_args, runner_args, link):
    try:
        scripts_build.stack_build.run(backend_args, frontend_args, runner_args)
        scripts_build.atom_prepare.run()
        scripts_build.atom_apm.run(link) # RENAME: LunaStudioInstallInAtom ?
        scripts_build.copy_configs.run()

    except subprocess.CalledProcessError:
        print("Status : FAIL")
        sys.exit(1)

def build_backend (backend_args):
    try:
        scripts_build.stack_build.create_bin_dirs()
        scripts_build.stack_build.build_backend(backend_args)
        scripts_build.stack_build.link_main_bin ()
        scripts_build.stack_build.copy_std_lib ()

    except subprocess.CalledProcessError:
        print("Status : FAIL")
        sys.exit(1)

def build_frontend (frontend_args, link):
    try:
        scripts_build.stack_build.create_bin_dirs()
        scripts_build.stack_build.build_ghcjs(frontend_args)
        scripts_build.atom_apm.run(link)
        scripts_build.copy_configs.run()

    except subprocess.CalledProcessError:
        print("Status : FAIL")
        sys.exit(1)

def main ():
    parser = argparse.ArgumentParser()
    parser.add_argument("--backend", help="Build backend only", action="store_true")
    parser.add_argument("--frontend", help="Build frontend only", action="store_true")
    parser.add_argument("--release", help="Build package in release mode", action="store_true")
    parser.add_argument("--backend-stack", help="Additional options passed to stack while building backend", action="append", dest="stack_backend_args", default=['--copy-bins'])
    parser.add_argument("--frontend-stack", help="Additional options passed to stack while building frontend", action="append", dest="stack_frontend_args", default=[])
    parser.add_argument("--runner-stack", help="Additional options passed to stack while building runner", action="append", dest="stack_runner_args", default=['--copy-bins'])
    args = parser.parse_args()

    if args.backend:
        build_backend (args.stack_backend_args)
    elif args.frontend:
        build_frontend (args.stack_frontend_args, not args.release) # FIXME: "not ..." is not a proper way to handle this flag
    else: build_app (args.stack_backend_args, args.stack_frontend_args, args.stack_runner_args, not args.release)

main()
