
# ###### File ###################################

# class File:
#     def readFile self name:
#         ```getIO $ liftFIO1 hsLib_System_IO_readFile #{name}```

#     def writeFile self name content:
#         content = content.toString
#         ```getIO $ liftFIO2 hsLib_System_IO_writeFile #{name} #{content}```


###### Console ################################

class Console:
    def print self msg:
        ```print' #{msg}```

###### List ###################################

def List.at self index:
    ```(flattenCtx `dot2` liftf2 (!!)) #{self} #{index}```

def List.+ self l2:
    ```liftf2 (++) #{self} #{l2}```

def List.contains self el:
    ```liftf2 (elem) (val #{el}) #{self}```

def List.length self:
    ```liftf1 length #{self}```

def List.each self callback:
    ```let {mymap = liftf2 map}```
    ```mymap (val $ call1 #{callback}) #{self}```

###### Bool ####################################

def Bool.not self:
    ```liftf1 not #{self}```

###############################################

def readImage self path::Path:
    ```flattenCtx $ liftf1 readImage #{path}```

def ImgF.writeImage image::ImgF path::Path:
    ```flattenCtx $ liftf2 writeImage #{path} #{image}```
    image

def ImgF.adjustCB image::ImgF contrast::Float brightness::Float:
    ```flattenCtx $ liftf3 adjustCB #{contrast} #{brightness} #{image}```

def ImgF.convolve image::ImgF kernel:
    ```flattenCtx $ liftf2 convolve #{kernel} #{self}```

class Vector a:
    x,y,z :: a

    def test self x:
        x

    def + self v2:
        Vector (self.x() + v2.x()) (self.y() + v2.y()) (self.z() + v2.z())
