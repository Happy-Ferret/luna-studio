{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Graphview_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import           Control.Exception      
import           Data.ByteString.Lazy   
import           Data.Hashable          
import           Data.Int               
import           Data.Text.Lazy         ( Text )
import qualified Data.Text.Lazy       as TL
import           Data.Typeable          ( Typeable )
import qualified Data.HashMap.Strict  as Map
import qualified Data.HashSet         as Set
import qualified Data.Vector          as Vector

import           Thrift                 
import           Thrift.Types           ()

import           Graph_Types            


type PortDescriptor = Vector.Vector Int32

data EdgeView = EdgeView{f_EdgeView_srcNode :: Maybe Int32,f_EdgeView_dstNode :: Maybe Int32,f_EdgeView_srcPort :: Maybe (Vector.Vector Int32),f_EdgeView_dstPort :: Maybe (Vector.Vector Int32)} deriving (Show,Eq,Typeable)
instance Hashable EdgeView where
  hashWithSalt salt record = salt   `hashWithSalt` f_EdgeView_srcNode record   `hashWithSalt` f_EdgeView_dstNode record   `hashWithSalt` f_EdgeView_srcPort record   `hashWithSalt` f_EdgeView_dstPort record  
write_EdgeView oprot record = do
  writeStructBegin oprot "EdgeView"
  case f_EdgeView_srcNode record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("srcNode",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_EdgeView_dstNode record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("dstNode",T_I32,2)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_EdgeView_srcPort record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("srcPort",T_LIST,3)
    (let f = Vector.mapM_ (\_viter2 -> writeI32 oprot _viter2) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_EdgeView_dstPort record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("dstPort",T_LIST,4)
    (let f = Vector.mapM_ (\_viter3 -> writeI32 oprot _viter3) in do {writeListBegin oprot (T_I32,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_EdgeView_fields iprot record = do
  (_,_t5,_id6) <- readFieldBegin iprot
  if _t5 == T_STOP then return record else
    case _id6 of 
      1 -> if _t5 == T_I32 then do
        s <- readI32 iprot
        read_EdgeView_fields iprot record{f_EdgeView_srcNode=Just s}
        else do
          skip iprot _t5
          read_EdgeView_fields iprot record
      2 -> if _t5 == T_I32 then do
        s <- readI32 iprot
        read_EdgeView_fields iprot record{f_EdgeView_dstNode=Just s}
        else do
          skip iprot _t5
          read_EdgeView_fields iprot record
      3 -> if _t5 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype10,_size7) <- readListBegin iprot; f _size7})
        read_EdgeView_fields iprot record{f_EdgeView_srcPort=Just s}
        else do
          skip iprot _t5
          read_EdgeView_fields iprot record
      4 -> if _t5 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) (readI32 iprot) in do {(_etype15,_size12) <- readListBegin iprot; f _size12})
        read_EdgeView_fields iprot record{f_EdgeView_dstPort=Just s}
        else do
          skip iprot _t5
          read_EdgeView_fields iprot record
      _ -> do
        skip iprot _t5
        readFieldEnd iprot
        read_EdgeView_fields iprot record
read_EdgeView iprot = do
  _ <- readStructBegin iprot
  record <- read_EdgeView_fields iprot (EdgeView{f_EdgeView_srcNode=Nothing,f_EdgeView_dstNode=Nothing,f_EdgeView_srcPort=Nothing,f_EdgeView_dstPort=Nothing})
  readStructEnd iprot
  return record
data GraphView = GraphView{f_GraphView_nodes :: Maybe (Map.HashMap Int32 Graph_Types.Node),f_GraphView_edges :: Maybe (Vector.Vector EdgeView)} deriving (Show,Eq,Typeable)
instance Hashable GraphView where
  hashWithSalt salt record = salt   `hashWithSalt` f_GraphView_nodes record   `hashWithSalt` f_GraphView_edges record  
write_GraphView oprot record = do
  writeStructBegin oprot "GraphView"
  case f_GraphView_nodes record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("nodes",T_MAP,1)
    (let {f [] = return (); f ((_kiter19,_viter20):t) = do {do {writeI32 oprot _kiter19;Graph_Types.write_Node oprot _viter20};f t}} in do {writeMapBegin oprot (T_I32,T_STRUCT,fromIntegral $ Map.size _v); f (Map.toList _v);writeMapEnd oprot})
    writeFieldEnd oprot}
  case f_GraphView_edges record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("edges",T_LIST,2)
    (let f = Vector.mapM_ (\_viter21 -> write_EdgeView oprot _viter21) in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GraphView_fields iprot record = do
  (_,_t23,_id24) <- readFieldBegin iprot
  if _t23 == T_STOP then return record else
    case _id24 of 
      1 -> if _t23 == T_MAP then do
        s <- (let {f 0 = return []; f n = do {k <- readI32 iprot; v <- (read_Node iprot);r <- f (n-1); return $ (k,v):r}} in do {(_ktype26,_vtype27,_size25) <- readMapBegin iprot; l <- f _size25; return $ Map.fromList l})
        read_GraphView_fields iprot record{f_GraphView_nodes=Just s}
        else do
          skip iprot _t23
          read_GraphView_fields iprot record
      2 -> if _t23 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) ((read_EdgeView iprot)) in do {(_etype33,_size30) <- readListBegin iprot; f _size30})
        read_GraphView_fields iprot record{f_GraphView_edges=Just s}
        else do
          skip iprot _t23
          read_GraphView_fields iprot record
      _ -> do
        skip iprot _t23
        readFieldEnd iprot
        read_GraphView_fields iprot record
read_GraphView iprot = do
  _ <- readStructBegin iprot
  record <- read_GraphView_fields iprot (GraphView{f_GraphView_nodes=Nothing,f_GraphView_edges=Nothing})
  readStructEnd iprot
  return record
