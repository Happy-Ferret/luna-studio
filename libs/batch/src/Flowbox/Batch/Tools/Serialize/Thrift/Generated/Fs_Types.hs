{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Fs_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import           Control.Exception      
import           Data.ByteString.Lazy   
import           Data.Hashable          
import           Data.Int               
import           Data.Text.Lazy         ( Text )
import qualified Data.Text.Lazy       as TL
import           Data.Typeable          ( Typeable )
import qualified Data.HashMap.Strict  as Map
import qualified Data.HashSet         as Set
import qualified Data.Vector          as Vector

import           Thrift                 
import           Thrift.Types           ()


data FSItemType = Directory|File  deriving (Show,Eq, Typeable, Ord)
instance Enum FSItemType where
  fromEnum t = case t of
    Directory -> 0
    File -> 1
  toEnum t = case t of
    0 -> Directory
    1 -> File
    _ -> throw ThriftException
instance Hashable FSItemType where
  hashWithSalt salt = hashWithSalt salt . fromEnum
data FSItem = FSItem{f_FSItem_itemType :: Maybe FSItemType,f_FSItem_path :: Maybe Text,f_FSItem_size :: Maybe Int32} deriving (Show,Eq,Typeable)
instance Hashable FSItem where
  hashWithSalt salt record = salt   `hashWithSalt` f_FSItem_itemType record   `hashWithSalt` f_FSItem_path record   `hashWithSalt` f_FSItem_size record  
write_FSItem oprot record = do
  writeStructBegin oprot "FSItem"
  case f_FSItem_itemType record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("itemType",T_I32,1)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_FSItem_path record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("path",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_FSItem_size record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("size",T_I32,3)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FSItem_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_FSItem_fields iprot record{f_FSItem_itemType=Just s}
        else do
          skip iprot _t3
          read_FSItem_fields iprot record
      2 -> if _t3 == T_STRING then do
        s <- readString iprot
        read_FSItem_fields iprot record{f_FSItem_path=Just s}
        else do
          skip iprot _t3
          read_FSItem_fields iprot record
      3 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_FSItem_fields iprot record{f_FSItem_size=Just s}
        else do
          skip iprot _t3
          read_FSItem_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_FSItem_fields iprot record
read_FSItem iprot = do
  _ <- readStructBegin iprot
  record <- read_FSItem_fields iprot (FSItem{f_FSItem_itemType=Nothing,f_FSItem_path=Nothing,f_FSItem_size=Nothing})
  readStructEnd iprot
  return record
