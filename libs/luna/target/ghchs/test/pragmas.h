#define _typedArg(a,t) let {_ = a `ofType` (anyType :: m t);};
#define _typed(a,t)    ((a) `ofType` (anyType :: m (t)))
#define _name(n)       (Proxy :: Proxy n)
#define _member(n)     member _name(n)
#define _nuSigArg(n)   nuSigArg (Proxy::Proxy n)
#define _npSigArg(n,a) npSigArg (Proxy::Proxy n) (a)
#define _call(n)       call2 (Proxy::Proxy n)

#define _rtup0()            ()
#define _rtup1(t1)          (t1,())
#define _rtup2(t1,t2)       (t1,(t2,()))
#define _rtup3(t1,t2,t3)    (t1,(t2,(t3,())))
#define _rtup4(t1,t2,t3,t4) (t1,(t2,(t3,(t4,()))))
#define _rtup5(t1,t2,t3,t4,t5) (t1,_rtup4(t2,t3,t4,t5))
#define _rtup6(t1,t2,t3,t4,t5,t6) (t1,_rtup5(t2,t3,t4,t5,t6))
#define _rtup7(t1,t2,t3,t4,t5,t6,t7) (t1,_rtup6(t2,t3,t4,t5,t6,t7))
#define _rtup8(t1,t2,t3,t4,t5,t6,t7,t8) (t1,_rtup7(t2,t3,t4,t5,t6,t7,t8))
#define _rtup9(t1,t2,t3,t4,t5,t6,t7,t8,t9) (t1,_rtup8(t2,t3,t4,t5,t6,t7,t8,t9))
#define _rtup10(t1,t2,t3,t4,t5,t6,t7,t8,t9,t10) (t1,_rtup9(t2,t3,t4,t5,t6,t7,t8,t9,t10))
#define _rtup11(t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11) (t1,_rtup10(t2,t3,t4,t5,t6,t7,t8,t9,t10,t11))


#define _rtupX0()            (RTuple ())
#define _rtupX1(t1)          (RTuple (t1,()))
#define _rtupX2(t1,t2)       (RTuple (t1,(t2,())))
#define _rtupX3(t1,t2,t3)    (RTuple (t1,(t2,(t3,()))))
#define _rtupX4(t1,t2,t3,t4) (RTuple (t1,(t2,(t3,(t4,())))))
