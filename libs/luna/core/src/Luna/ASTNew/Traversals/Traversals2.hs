---------------------------------------------------------------------------
-- Copyright (C) Flowbox, Inc - All Rights Reserved
-- Unauthorized copying of this file, via any medium is strictly prohibited
-- Proprietary and confidential
-- Flowbox Team <contact@flowbox.io>, 2014
---------------------------------------------------------------------------
 {-# LANGUAGE NoMonomorphismRestriction #-}
 {-# LANGUAGE UndecidableInstances #-}
 {-# LANGUAGE OverlappingInstances #-}
 {-# LANGUAGE FunctionalDependencies #-}
 {-# LANGUAGE GADTs #-}
 {-# LANGUAGE ScopedTypeVariables #-}

 {-# LANGUAGE FlexibleInstances #-}
 {-# LANGUAGE UndecidableInstances #-}

 {-# LANGUAGE DysfunctionalDependencies #-}
 --{-# LANGUAGE IncoherentInstances #-}


module Luna.ASTNew.Traversals.Traversals2 where

import Prelude

-------------------------------
-- ====== DESCRIPTION ====== --
-------------------------------
-- New traversal tests. To be tested before using.



import Control.Monad.Identity (runIdentity)
import Control.Applicative


newtype Func  a   = Func  a
newtype Class cls = Class cls


data A x a = A x a deriving Show
data B a = B a deriving Show

data X a = X a deriving Show
data Y = Y deriving Show
data Z = Z deriving Show

data True  = XTrue  deriving Show
data False = XFalse deriving Show


x2y (X _) = return Y

main = do
    --print $ runIdentity $ funcTraverseM x2y (A (B $ X Z) (X (X Z))) -- ERROR (rankNTyped function)
    print $ traverse (Func x2y) (A (X Z) Z)
    print "end"


----------------------------------------------------------------------
-- general traversals
-- able to traverse structures based on either 
-- passed function or defined type classes

class Traversal m f c d | f c -> d where
    traverseM :: (Monad m, Applicative m) => f -> c -> m d

instance (f ~ (a -> m b), FuncTraversal m a b c d)
         => Traversal m (Func f) c d where
    traverseM = funcTraverseM

instance (ClassTraversal cls m c d)
         => Traversal m (Class cls) c d where
    traverseM = classTraverse


----------------------------------------------------------------------
-- function based traversals

class FuncTraversal' match m a b c d | a b c -> d where
    funcTraverseM' :: (Monad m, Applicative m) => match -> Func (a -> m b) -> c -> m d

instance (a~c, b~d) => FuncTraversal' True m a b c d where
    funcTraverseM' _ (Func f) a = f a

instance DefFuncTraversal m (Func (a -> m b)) c d => FuncTraversal' False m a b c d where
    funcTraverseM' _ = defFuncTraverse

class FuncTraversal m a b c d | a b c -> d where
    funcTraverseM :: (Monad m, Applicative m) => Func (a -> m b) -> c -> m d

instance (Match a c match, FuncTraversal' match m a b c d) => FuncTraversal m a b c d where
    funcTraverseM = funcTraverseM' (undefined :: match)


----------------------------------------------------------------------
-- class traversal type class
-- allows defining its instances to type-class traverse structures

class ClassTraversal cls m a b | cls a -> b where
    classTraverse :: (Monad m, Applicative m) => Class cls -> a -> m b


----------------------------------------------------------------------
-- default traversals
-- need to be generated by hand

class DefFuncTraversal m f c d | f c -> d where
    defFuncTraverse :: (Monad m, Applicative m) => f -> c -> m d

----------------------------------------------------------------------
-- matching utils
-- need to be generated by hand
-- matching is currently very limited
-- it checks only the base constructor, not the whole thing

class Match a b match | a b -> match
    where fmatch :: a -> b -> match

----------------------------------------------------------------------
-- utils

traverse base arg = runIdentity $ traverseM base arg


----------------------------------------------------------------------
-- Instances
-- !!! manually created !!!

-- matching

instance (match~False) => Match a b match
    where fmatch _ _ = XFalse

instance Match (X a) (X a') True
    where fmatch _ _ = XTrue

instance Match Z Z True
    where fmatch _ _ = XTrue


-- default traversals

instance ( Traversal m f c d
         , Traversal m f x x'
         ) => DefFuncTraversal m f (A x c) (A x' d) where
    defFuncTraverse f (A x a) = A <$> traverseM f x <*> traverseM f a

instance Traversal m f c d => DefFuncTraversal m f (B c) (B d) where
    defFuncTraverse f (B a) = B <$> traverseM f a

instance Traversal m f c d => DefFuncTraversal m f (X c) (X d) where
    defFuncTraverse f (X a) = X <$> traverseM f a

instance DefFuncTraversal m f Y Y where
    defFuncTraverse f Y = return Y

instance DefFuncTraversal m f Z Z where
    defFuncTraverse f Z = return Z