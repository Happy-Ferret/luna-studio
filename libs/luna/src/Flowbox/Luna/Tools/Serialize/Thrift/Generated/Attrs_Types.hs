{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Attrs_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import           Control.Exception      
import           Data.ByteString.Lazy   
import           Data.Hashable          
import           Data.Int               
import           Data.Text.Lazy         ( Text )
import qualified Data.Text.Lazy       as TL
import           Data.Typeable          ( Typeable )
import qualified Data.HashMap.Strict  as Map
import qualified Data.HashSet         as Set
import qualified Data.Vector          as Vector

import           Thrift                 
import           Thrift.Types           ()


data Flags = Flags{f_Flags_io :: Maybe Bool,f_Flags_omit :: Maybe Bool} deriving (Show,Eq,Typeable)
instance Hashable Flags where
  hashWithSalt salt record = salt   `hashWithSalt` f_Flags_io record   `hashWithSalt` f_Flags_omit record  
write_Flags oprot record = do
  writeStructBegin oprot "Flags"
  case f_Flags_io record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("io",T_BOOL,1)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_Flags_omit record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("omit",T_BOOL,2)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Flags_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_BOOL then do
        s <- readBool iprot
        read_Flags_fields iprot record{f_Flags_io=Just s}
        else do
          skip iprot _t3
          read_Flags_fields iprot record
      2 -> if _t3 == T_BOOL then do
        s <- readBool iprot
        read_Flags_fields iprot record{f_Flags_omit=Just s}
        else do
          skip iprot _t3
          read_Flags_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_Flags_fields iprot record
read_Flags iprot = do
  _ <- readStructBegin iprot
  record <- read_Flags_fields iprot (Flags{f_Flags_io=Nothing,f_Flags_omit=Nothing})
  readStructEnd iprot
  return record
data Attributes = Attributes{f_Attributes_spaces :: Maybe (Map.HashMap Text (Map.HashMap Text Text))} deriving (Show,Eq,Typeable)
instance Hashable Attributes where
  hashWithSalt salt record = salt   `hashWithSalt` f_Attributes_spaces record  
write_Attributes oprot record = do
  writeStructBegin oprot "Attributes"
  case f_Attributes_spaces record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("spaces",T_MAP,1)
    (let {f [] = return (); f ((_kiter7,_viter8):t) = do {do {writeString oprot _kiter7;(let {f [] = return (); f ((_kiter9,_viter10):t) = do {do {writeString oprot _kiter9;writeString oprot _viter10};f t}} in do {writeMapBegin oprot (T_STRING,T_STRING,fromIntegral $ Map.size _viter8); f (Map.toList _viter8);writeMapEnd oprot})};f t}} in do {writeMapBegin oprot (T_STRING,T_MAP,fromIntegral $ Map.size _v); f (Map.toList _v);writeMapEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Attributes_fields iprot record = do
  (_,_t12,_id13) <- readFieldBegin iprot
  if _t12 == T_STOP then return record else
    case _id13 of 
      1 -> if _t12 == T_MAP then do
        s <- (let {f 0 = return []; f n = do {k <- readString iprot; v <- (let {f 0 = return []; f n = do {k <- readString iprot; v <- readString iprot;r <- f (n-1); return $ (k,v):r}} in do {(_ktype20,_vtype21,_size19) <- readMapBegin iprot; l <- f _size19; return $ Map.fromList l});r <- f (n-1); return $ (k,v):r}} in do {(_ktype15,_vtype16,_size14) <- readMapBegin iprot; l <- f _size14; return $ Map.fromList l})
        read_Attributes_fields iprot record{f_Attributes_spaces=Just s}
        else do
          skip iprot _t12
          read_Attributes_fields iprot record
      _ -> do
        skip iprot _t12
        readFieldEnd iprot
        read_Attributes_fields iprot record
read_Attributes iprot = do
  _ <- readStructBegin iprot
  record <- read_Attributes_fields iprot (Attributes{f_Attributes_spaces=Nothing})
  readStructEnd iprot
  return record
