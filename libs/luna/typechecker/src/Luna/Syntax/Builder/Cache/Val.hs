{-# OPTIONS_GHC -fno-warn-partial-type-signatures #-}
{-# LANGUAGE PartialTypeSignatures #-}

module Luna.Syntax.Builder.Cache.Val where

-- import Prologue                    hiding (Cons)
-- 
-- import Data.Variant.Patterns       (ANY, MatchSet)
-- import Luna.Syntax.AST.Term
-- import Luna.Syntax.Builder.Cache.Cache
-- 
-- import qualified Luna.Syntax.AST.Layout as Layout
-- import qualified Data.Variant.Patterns  as Rec
-- 
-- 
-- -- Cached utils
-- 
-- --matchVariant :: _ => (x -> a) -> MatchSet (Val l v t) a
-- --matchVariant f = Rec.matchVariant f
-- --{-# INLINABLE matchVariant #-}
-- 
-- matchGroup :: _ => (x -> a) -> MatchSet (Val l v t) a
-- matchGroup f = Rec.matchGroup f
-- {-# NOINLINE matchGroup #-}
-- 
-- -- Any
-- 
-- --matchAny :: (ANY -> a) -> MatchSet (Val l v t) a
-- --matchAny = matchVariant
-- --{-# NOINLINE matchAny #-}
-- 
-- ---- Variants
-- 
-- --matchCons_S :: (Cons Str (t (Val Layout.Static v t)) -> a) -> MatchSet (Val Layout.Static v t) a
-- --matchCons_S = matchVariant
-- --{-# NOINLINE matchCons_S #-}
-- 
-- --matchArrow_S :: (Arrow (t (Val Layout.Static v t)) -> a) -> MatchSet (Val Layout.Static v t) a
-- --matchArrow_S = matchVariant
-- --{-# NOINLINE matchArrow_S #-}
-- 
-- --matchCons_D :: (Cons (t (Val Layout.Dynamic v t)) (t (Val Layout.Dynamic v t)) -> a) -> MatchSet (Val Layout.Dynamic v t) a
-- --matchCons_D = matchVariant
-- --{-# NOINLINE matchCons_D #-}
-- 
-- --matchArrow_D :: (Arrow (t (Val Layout.Dynamic v t)) -> a) -> MatchSet (Val Layout.Dynamic v t) a
-- --matchArrow_D = matchVariant
-- --{-# NOINLINE matchArrow_D #-}
-- 
-- ---- Groups
-- 
-- --matchSubVal :: (Val Layout.Static v t -> a) -> MatchSet (Val Layout.Dynamic v t) a
-- --matchSubVal = matchGroup
-- --{-# NOINLINE matchSubVal #-}
-- 
-- matchStaticLit :: (Lit v t -> a) -> MatchSet (Val Layout.Static v t) a
-- matchStaticLit = matchGroup
-- {-# NOINLINE matchStaticLit #-}
-- 
-- --matchDynamicLit :: (Lit v t -> a) -> MatchSet (Val Layout.Dynamic v t) a
-- --matchDynamicLit = matchGroup
-- --{-# NOINLINE matchDynamicLit #-}
-- 
-- -- Instances
-- 
-- --instance MatchCached ANY (Val l v t) where matchCached = matchAny; {-# NOINLINE matchCached #-}
-- 
-- --instance MatchCached (Cons  Str                          (t (Val Layout.Static  v t))) (Val Layout.Static  v t) where matchCached = matchCons_S  ; {-# NOINLINE matchCached #-}
-- --instance MatchCached (Arrow (t (Val Layout.Static v t)))                               (Val Layout.Static  v t) where matchCached = matchArrow_S ; # NOINLINE matchCached #
-- --instance MatchCached (Cons  (t (Val Layout.Dynamic v t)) (t (Val Layout.Dynamic v t))) (Val Layout.Dynamic v t) where matchCached = matchCons_D  ; {-# NOINLINE matchCached #-}
-- --instance MatchCached (Arrow (t (Val Layout.Dynamic v t)))                              (Val Layout.Dynamic v t) where matchCached = matchArrow_D ; {-# NOINLINE matchCached #-}
-- 
-- --instance MatchCached (Val Layout.Static v t) (Val Layout.Dynamic v t) where matchCached = matchSubVal ; {-# NOINLINE matchCached #-}
-- instance MatchCached (Lit v t)               (Val Layout.Static  v t) where matchCached = matchStaticLit  ; {-# INLINABLE matchCached #-}
-- --instance MatchCached (Lit v t)               (Val Layout.Dynamic v t) where matchCached = matchDynamicLit ; {-# NOINLINE matchCached #-}
