digraph "G" {
    rankdir = "LR";
    // '\n'.join(["Expr:{x} -> {y};".format(**locals()) for x, y in re.findall("<([a-zA-Z_]*)>[a-zA-Z_]* :: [[]?([a-zA-Z_]*)[]]?",  text)])
    node [shape=Mrecord];

    AST [ label = "{<AST> AST | <AST_Module> fromModule :: Module| <AST_Expr> fromExpr :: Expr| <AST_Lit> fromLit :: Lit| <AST_Pat> fromPat :: Pat| <AST_Type> fromType :: Type}" ];
    AST:AST_Module -> Module;
    AST:AST_Expr -> Expr;
    AST:AST_Lit -> Lit;
    AST:AST_Pat -> Pat;
    AST:AST_Type -> Type;

    Module [ label = "<Module> Module | <id> _id :: ID | <cls> _cls :: Type | <imports> _imports :: [Expr] | <classes> _classes :: [Expr] | <typeAliases> _typeAliases :: [Expr] | <typeDefs> _typeDefs :: [Expr] | <fields> _fields :: [Expr] | <methods> _methods :: [Expr] | <modules> _modules :: [Module]" ];
// (for clarity)    Module:id -> ID;
    Module:cls -> Type;
    Module:imports -> Expr;
    Module:classes -> Expr;
    Module:typeAliases -> Expr;
    Module:typeDefs -> Expr;
    Module:fields -> Expr;
    Module:methods -> Expr;
// (for clarity)    Module:modules -> Module;

    ID [ label = "type ID = Int"];

    Lit [ label = "<Lit> Lit | {<Char> Char | <Char_id>_id :: ID | <Char_char>_char :: Prelude.Char } | {<String> String | <String_id>_id :: ID | <String_str>_str  :: Prelude.String } | { <Integer> Integer | <Integer_id>_id :: ID | <Integer_str>_str  :: Prelude.String } | {<Float> Float | <Float_id>_id :: ID | <Float_str>_str  :: Prelude.String }" ];
// (for clarity)    Lit:Char_id -> ID;
// (for clarity)    Lit:String_id -> ID;
// (for clarity)    Lit:Integer_id -> ID;
// (for clarity)    Lit:Float_id -> ID;

    Pat [ label = "<Pat> Pat | {<Var> Var | <Var_id>_id :: ID | <Var_name>_name :: String } | {<Lit> Lit | <Lit_id>_id :: ID | <Lit_value>_value :: Lit } | {<Tuple> Tuple | <Tuple_id>_id :: ID | <Tuple_items>_items :: [Pat] } | {<Con> Con | <Con_id>_id :: ID | <Con_name>_name :: String } | {<App> App | <App_id>_id :: ID | <App_src>_src :: Pat | <App_args>_args :: [Pat] } | {<Typed> Typed | <Typed_id>_id :: ID | <Typed_pat>_pat :: Pat | <Typed_cls>_cls :: Type } | {<Wildcard> Wildcard | <Wildcard_id>_id :: ID } | {<RecWildcard> RecWildcard | <RecWildcard_id>_id :: ID }" ];
// (for clarity)    Pat:Var_id -> ID;  
// (for clarity)    Pat:Lit_id -> ID;  
// (for clarity)    Pat:Tuple_id -> ID;  
// (for clarity)    Pat:Con_id -> ID;  
// (for clarity)    Pat:App_id -> ID;  
// (for clarity)    Pat:Typed_id -> ID;  
// (for clarity)    Pat:Wildcard_id -> ID;  
// (for clarity)    Pat:RecWildcard_id -> ID;
    Pat:Lit_value -> Lit;
// (for clarity)    Pat:Tuple_items -> Pat;
// (for clarity)    Pat:App_src -> Pat;
// (for clarity)    Pat:Typed_pat -> Pat;
// (for clarity)    Pat:App_args -> Pat;
    Pat:Typed_cls -> Type;

    Expr [ label = "<Expr> Expr | { <Expr_NOP>NOP | <Expr_NOP_id>_id :: ID } | { <Expr_Accessor>Accessor | <Expr_Accessor_id>_id :: ID | <Expr_Accessor_name>_name :: String | <Expr_Accessor_dst>_dst :: Expr } | { <Expr_TypeAlias>TypeAlias | <Expr_TypeAlias_id>_id :: ID | <Expr_TypeAlias_srcType>_srcType :: Type | <Expr_TypeAlias_dstType>_dstType :: Type } | { <Expr_TypeDef>TypeDef | <Expr_TypeDef_id>_id :: ID | <Expr_TypeDef_srcType>_srcType :: Type | <Expr_TypeDef_dstType>_dstType :: Type } | { <Expr_App>App | <Expr_App_id>_id :: ID | <Expr_App_src>_src :: Expr | <Expr_App_args>_args :: [Expr] } | { <Expr_AppCons_>AppCons_ | <Expr_AppCons__id>_id :: ID | <Expr_AppCons__args>_args :: [Expr] } | { <Expr_Assignment>Assignment | <Expr_Assignment_id>_id :: ID | <Expr_Assignment_pat>_pat :: Pat | <Expr_Assignment_dst>_dst :: Expr } | { <Expr_RecordUpdate>RecordUpdate | <Expr_RecordUpdate_id>_id :: ID | <Expr_RecordUpdate_src>_src :: Expr | <Expr_RecordUpdate_selectors>_selectors :: [String]| <Expr_RecordUpdate__expr>_expr :: Expr } | { <Expr_Data>Data | <Expr_Data_id>_id :: ID | <Expr_Data_cls>_cls :: Type | <Expr_Data_cons>_cons :: [Expr] | <Expr_Data_classes>_classes :: [Expr] | <Expr_Data_methods>_methods :: [Expr] } | { <Expr_ConD>ConD | <Expr_ConD_id>_id :: ID | <Expr_ConD_name>_name :: String | <Expr_ConD_fields>_fields :: [Expr] } | { <Expr_Con>Con | <Expr_Con_id>_id :: ID | <Expr_Con_name>_name :: String } | { <Expr_Cond>Cond | <Expr_Cond_id>_id :: ID | <Expr_Cond_cond>_cond :: Expr | <Expr_Cond_success>_success :: [Expr] | _failure :: Maybe [Expr] } | { <Expr_Function>Function | <Expr_Function_id>_id :: ID | <Expr_Function_path>_path :: [String] | <Expr_Function_name>_name :: String | _inputs :: [Expr] | <Expr_Function_output>_output :: Type | <Expr_Function_body>_body :: [Expr] } | { <Expr_Lambda>Lambda | <Expr_Lambda_id>_id :: ID | <Expr_Lambda_inputs>_inputs :: [Expr] | <Expr_Lambda_output>_output :: Type | _body :: [Expr] } | { <Expr_Grouped>Grouped | <Expr_Grouped_id>_id :: ID | <Expr_Grouped_expr>_expr :: Expr } | { <Expr_Import>Import | <Expr_Import_id>_id :: ID | <Expr_Import_path>_path :: [String] | <Expr_Import_target>_target :: Expr | <Expr_Import_rename>_rename :: Maybe String } | { <Expr_ImportNative>ImportNative | <Expr_ImportNative_id>_id :: ID | <Expr_ImportNative_segments>_segments :: [Expr] } | { <Expr_Infix>Infix | <Expr_Infix_id>_id :: ID | <Expr_Infix_name>_name :: String | <Expr_Infix_src>_src :: Expr | <Expr_Infix_dst>_dst :: Expr } | { <Expr_List>List | <Expr_List_id>_id :: ID | <Expr_List_items>_items :: [Expr] } | { <Expr_Lit>Lit | <Expr_Lit_id>_id :: ID | <Expr_Lit_lvalue>_lvalue :: Lit } | { <Expr_Tuple>Tuple | <Expr_Tuple_id>_id :: ID | <Expr_Tuple_items>_items :: [Expr] } | { <Expr_Typed>Typed | <Expr_Typed_id>_id :: ID | <Expr_Typed_cls>_cls :: Type | <Expr_Typed_expr>_expr :: Expr } | { <Expr_Var>Var | <Expr_Var_id>_id :: ID | <Expr_Var_name>_name :: String} | { <Expr_Wildcard>Wildcard | <Expr_Wildcard_id>_id :: ID } | { <Expr_RangeFromTo>RangeFromTo | <Expr_RangeFromTo_id>_id :: ID | <Expr_RangeFromTo_start>_start :: Expr | <Expr_RangeFromTo_end>_end :: Expr } | { <Expr_RangeFrom>RangeFrom | <Expr_RangeFrom_id>_id :: ID | <Expr_RangeFrom_start>_start :: Expr } | { <Expr_Field>Field | <Expr_Field_id>_id :: ID | <Expr_Field_name>_name :: String | <Expr_Field_cls>_cls :: Type | <Expr_Field_value>_value :: Maybe Expr } | { <Expr_Arg>Arg | <Expr_Arg_id>_id :: ID | <Expr_Arg_pat>_pat :: Pat | <Expr_Arg_value>_value :: Maybe Expr } | { <Expr_Native>Native | <Expr_Native_id>_id :: ID | <Expr_Native_segments>_segments :: [Expr] } | { <Expr_NativeCode>NativeCode | <Expr_NativeCode_id>_id :: ID | <Expr_NativeCode_code>_code :: String } | { <Expr_NativeVar>NativeVar | <Expr_NativeVar_id>_id :: ID | <Expr_NativeVar_name>_name :: String } | { <Expr_Ref>Ref | <Expr_Ref_id>_id :: ID | <Expr_Ref_dst>_dst :: Expr } | { <Expr_RefType>RefType | <Expr_RefType_id>_id :: ID | <Expr_RefType_typeName>_typeName :: String | <Expr_RefType_name>_name :: String } | { <Expr_Case>Case | <Expr_Case_id>_id :: ID | <Expr_Case_expr>_expr :: Expr | <Expr_Case_match>_match :: [Expr] } | { <Expr_Match>Match | <Expr_Match_id>_id :: ID | <Expr_Match_pat>_pat :: Pat | <Expr_Match_body>_body :: [Expr] }" ];
// (for clarity)    Expr:Expr_NOP_id -> ID;
// (for clarity)    Expr:Expr_Accessor_id -> ID;
// (for clarity)    Expr:Expr_Accessor_dst -> Expr;
// (for clarity)    Expr:Expr_TypeAlias_id -> ID;
    Expr:Expr_TypeAlias_srcType -> Type;
    Expr:Expr_TypeAlias_dstType -> Type;
// (for clarity)    Expr:Expr_TypeDef_id -> ID;
    Expr:Expr_TypeDef_srcType -> Type;
    Expr:Expr_TypeDef_dstType -> Type;
// (for clarity)    Expr:Expr_App_id -> ID;
// (for clarity)    Expr:Expr_App_src -> Expr;
// (for clarity)    Expr:Expr_App_args -> Expr;
// (for clarity)    Expr:Expr_AppCons__id -> ID;
// (for clarity)    Expr:Expr_AppCons__args -> Expr;
// (for clarity)    Expr:Expr_Assignment_id -> ID;
    Expr:Expr_Assignment_pat -> Pat;
// (for clarity)    Expr:Expr_Assignment_dst -> Expr;
// (for clarity)    Expr:Expr_RecordUpdate_id -> ID;
// (for clarity)    Expr:Expr_RecordUpdate_src -> Expr;
// (for clarity)    Expr:Expr_RecordUpdate__expr -> Expr;
// (for clarity)    Expr:Expr_Data_id -> ID;
    Expr:Expr_Data_cls -> Type;
// (for clarity)    Expr:Expr_Data_cons -> Expr;
// (for clarity)    Expr:Expr_Data_classes -> Expr;
// (for clarity)    Expr:Expr_Data_methods -> Expr;
// (for clarity)    Expr:Expr_ConD_id -> ID;
// (for clarity)    Expr:Expr_ConD_fields -> Expr;
// (for clarity)    Expr:Expr_Con_id -> ID;
// (for clarity)    Expr:Expr_Cond_id -> ID;
// (for clarity)    Expr:Expr_Cond_cond -> Expr;
// (for clarity)    Expr:Expr_Cond_success -> Expr;
// (for clarity)    Expr:Expr_Function_id -> ID;
    Expr:Expr_Function_output -> Type;
// (for clarity)    Expr:Expr_Function_body -> Expr;
// (for clarity)    Expr:Expr_Lambda_id -> ID;
// (for clarity)    Expr:Expr_Lambda_inputs -> Expr;
    Expr:Expr_Lambda_output -> Type;
// (for clarity)    Expr:Expr_Grouped_id -> ID;
// (for clarity)    Expr:Expr_Grouped_expr -> Expr;
// (for clarity)    Expr:Expr_Import_id -> ID;
// (for clarity)    Expr:Expr_Import_target -> Expr;
// (for clarity)    Expr:Expr_Import_rename -> String;
// (for clarity)    Expr:Expr_ImportNative_id -> ID;
// (for clarity)    Expr:Expr_ImportNative_segments -> Expr;
// (for clarity)    Expr:Expr_Infix_id -> ID;
// (for clarity)    Expr:Expr_Infix_src -> Expr;
// (for clarity)    Expr:Expr_Infix_dst -> Expr;
// (for clarity)    Expr:Expr_List_id -> ID;
// (for clarity)    Expr:Expr_List_items -> Expr;
// (for clarity)    Expr:Expr_Lit_id -> ID;
    Expr:Expr_Lit_lvalue -> Lit;
// (for clarity)    Expr:Expr_Tuple_id -> ID;
// (for clarity)    Expr:Expr_Tuple_items -> Expr;
// (for clarity)    Expr:Expr_Typed_id -> ID;
    Expr:Expr_Typed_cls -> Type;
// (for clarity)    Expr:Expr_Typed_expr -> Expr;
// (for clarity)    Expr:Expr_Var_id -> ID;
// (for clarity)    Expr:Expr_Wildcard_id -> ID;
// (for clarity)    Expr:Expr_RangeFromTo_id -> ID;
// (for clarity)    Expr:Expr_RangeFromTo_start -> Expr;
// (for clarity)    Expr:Expr_RangeFromTo_end -> Expr;
// (for clarity)    Expr:Expr_RangeFrom_id -> ID;
// (for clarity)    Expr:Expr_RangeFrom_start -> Expr;
// (for clarity)    Expr:Expr_Field_id -> ID;
    Expr:Expr_Field_cls -> Type;
// (for clarity)    Expr:Expr_Field_value -> Expr;
// (for clarity)    Expr:Expr_Arg_id -> ID;
    Expr:Expr_Arg_pat -> Pat;
// (for clarity)    Expr:Expr_Arg_value -> Expr;
// (for clarity)    Expr:Expr_Native_id -> ID;
// (for clarity)    Expr:Expr_Native_segments -> Expr;
// (for clarity)    Expr:Expr_NativeCode_id -> ID;
// (for clarity)    Expr:Expr_NativeVar_id -> ID;
// (for clarity)    Expr:Expr_Ref_id -> ID;
// (for clarity)    Expr:Expr_Ref_dst -> Expr;
// (for clarity)    Expr:Expr_RefType_id -> ID;
// (for clarity)    Expr:Expr_Case_id -> ID;
// (for clarity)    Expr:Expr_Case_expr -> Expr;
// (for clarity)    Expr:Expr_Case_match -> Expr;
// (for clarity)    Expr:Expr_Match_id -> ID;
    Expr:Expr_Match_pat -> Pat;
// (for clarity)    Expr:Expr_Match_body -> Expr;

    Type [ label = "Type | { <Type_Unknown>Unknown | <Type_Unknown_id>_id :: ID } | { <Type_Var>Var | <Type_Var_id>_id :: ID | <Type_Var_name>_name :: String } | { <Type_Tuple>Tuple | <Type_Tuple_id>_id :: ID | <Type_Tuple_items>_items :: [Type] } | { <Type_Data>Data | <Type_Data_id>_id :: ID | <Type_Data_name>_name :: String | <Type_Data_params>_params :: [String] } | { <Type_Module>Module | <Type_Module_id>_id :: ID | <Type_Module_name>_name :: String | <Type_Module_path>_path :: [String] } | { <Type_Lambda>Lambda | <Type_Lambda_id>_id :: ID | <Type_Lambda_inputs>_inputs :: [Type] | <Type_Lambda_output>_output :: Type } | { <Type_Con>Con | <Type_Con_id>_id :: ID | <Type_Con_segments>_segments :: [String] } | { <Type_App>App | <Type_App_id>_id :: ID | <Type_App_src>_src :: Type | _args :: [Type] }" ];
// (for clarity)    Type:Type_Unknown_id -> ID;
// (for clarity)    Type:Type_Var_id -> ID;
// (for clarity)    Type:Type_Tuple_id -> ID;
// (for clarity)    Type:Type_Tuple_items -> Type;
// (for clarity)    Type:Type_Data_id -> ID;
// (for clarity)    Type:Type_Module_id -> ID;
// (for clarity)    Type:Type_Lambda_id -> ID;
// (for clarity)    Type:Type_Lambda_inputs -> Type;
// (for clarity)    Type:Type_Lambda_output -> Type;
// (for clarity)    Type:Type_Con_id -> ID;
// (for clarity)    Type:Type_App_id -> ID;
// (for clarity)    Type:Type_App_src -> Type;
}
