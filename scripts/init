#!/usr/bin/python2.7
import os.path
import sys
from subprocess import call, Popen, PIPE
from distutils.version import LooseVersion
from utils.colors import print_info, print_error


dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
third_party = os.path.join(dir, 'third-party')
p_cabal    = os.path.join(third_party,  'Cabal-1.19.1')
p_missingh = os.path.join(third_party,  'MissingH-1.2.0.0-winpatch')


def fatal():
    print_error ("ERROR")
    sys.exit(1)

def check_install(name, args=""):
    print_info ("Checking if '%s' is installed" % name)
    (out, err) = Popen(name + " " + args, stdout=PIPE, stderr=PIPE, shell=True).communicate()
    if not out:
        print_error ("Please install '%s' to continue" % name)
        fatal()

def check_cabal_version():
    minv = '1.18.0'
    print_info ("Checking cabal version (>= %s)" % minv)
    (out, err) = Popen("cabal --numeric-version", stdout=PIPE, shell=True).communicate()
    out = out.lstrip().rstrip()
    if not LooseVersion(out) >= LooseVersion(minv):
        print_error ("Your cabal is too old (%s)" % out)
        # answer = ""
        # while answer not in ["Y", "n"]:
        #     answer = raw_input("Should I update it? (cabal install cabal-install) [Y/n]")
        # if answer == "Y":
        #     (out, err) = Popen("cd && cabal install cabal-install", stdout=PIPE, stderr=PIPE, shell=True).communicate()

        print_error ("Please update your cabal to version '%s' or greater." % minv)
        fatal()


def try_call(cmd):
    if call(cmd, shell=True): fatal()

check_install("cabal", "-V")
check_cabal_version()
check_install("hprotoc")
check_install("c2hs")

print_info ("Generating Protocol Buffers files using genproto")
path = os.path.join('scripts', 'genproto')
try_call ('python2.7 %s' % path)

print_info ("Generating cabal configs using gencabal")
path = os.path.join('scripts', 'gencabal')
try_call ('python2.7 %s' % path)

print_info ("Initializing cabal sandbox")
try_call('cabal sandbox init --sandbox=dist')

print_info ("Updating cabal package cache")
try_call('cabal update')

print_info ("Registering Cabal-1.19.1 library")
try_call('cabal install %s' % p_cabal)

# print_info ("Registering MissingH library (windows patch)")
# try_call('cabal install %s' % p_missingh)


print_info ("Success")
sys.exit(0)
