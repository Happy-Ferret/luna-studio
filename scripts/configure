#!/usr/bin/python
import os.path
import sys
from subprocess import call, Popen, PIPE
from distutils.version import LooseVersion
from utils.colors import print_info, print_error


dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
third_party = os.path.join(dir, 'third-party')
p_thrift   = os.path.join(third_party,  'thrift-0.9')
p_missingh = os.path.join(third_party,  'MissingH-1.2.0.0-winpatch')


def fatal():
    print_error ("ERROR")
    sys.exit(1)

def check_install(name, args):
    print_info ("Checking if '%s' is installed" % name)
    (out, err) = Popen(name + " " + args, stdout=PIPE, stderr=PIPE, shell=True).communicate()
    if not out:
        print_error ("Please install '%s' to continue" % name)
        fatal() 

def check_cabal_version():
    minv = '1.18.0'
    print_info ("Checking cabal version (>= %s)" % minv)
    (out, err) = Popen("cabal --numeric-version", stdout=PIPE, shell=True).communicate()
    out = out.lstrip().rstrip()
    if not LooseVersion(out) >= LooseVersion(minv):
        print_error ("Your cabal is too old (%s)" % out)
        print_error ("Please update your cabal to version '%s' or greater." % minv)
        fatal()

def try_call(cmds):
    if call(cmds): fatal()

check_install("cabal", "-V")
check_cabal_version()

print_info ("Generating cabal configs using gencabal")
try_call (['scripts/gencabal'])

print_info ("Initializing cabal sandbox")
try_call (['cabal', 'sandbox', 'init', '--sandbox=dist'])

print_info ("Updating cabal package cache")
try_call(['cabal', 'update'])

print_info ("Registering thrift library")
try_call(['cabal', 'install', p_thrift])
    
print_info ("Registering MissingH library (windows patch)")
try_call(['cabal', 'install', p_missingh])


print_info ("Success")
sys.exit(0)