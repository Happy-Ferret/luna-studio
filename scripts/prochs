#!/usr/bin/python2.7

###########################################################################
## Copyright (C) Flowbox, Inc / All Rights Reserved
## Unauthorized copying of this file, via any medium is strictly prohibited
## Proprietary and confidential
## Flowbox Team <contact@flowbox.io>, 2014
###########################################################################

from utils.glob2 import glob
import re
from subprocess import call, Popen, PIPE
from utils.colors import print_info, print_warning, print_error, format_info
import sys
import os
from utils.path import write_if_changed
import argparse

def fatal():
    print_error ("ERROR")
    sys.exit(1)

def try_call(cmd):
    if call(cmd, shell=True): fatal()

def get_progress(i, total):
    i = str(i)
    total = str(total)
    i += ' ' * (len(total) - len(i))
    return format_info("[%s / %s]" % (i, total))

def startswithAny(s, prefixes):
    for prefix in prefixes:
        if s.startswith(prefix):
            return True
    return False

def getTrackedFiles():
    (paths, err) = Popen('git ls-files', stdout=PIPE, stderr=PIPE, shell=True).communicate()
    paths = paths.split('\n')
    return paths

def getChangedTrackedFiles():
    (paths, err) = Popen('git status --porcelain', stdout=PIPE, stderr=PIPE, shell=True).communicate()
    paths = paths.split('\n')
    paths = [file[3:] for file in paths if (len(file) > 0 and file[0] != 'D')]
    paths = [path.split(' -> ')[-1] for path in paths]
    return paths

def style(args):
    path_prefixes = ['libs', 'tools']

    (out, err) = Popen('stylish-haskell --version', stdout=PIPE, stderr=PIPE, shell=True).communicate()
    if not out:
        print_error ("It seems 'stylish-haskell' is not installed")
        print_error ("Please run 'cabal install stylish-haskell' and try again")
        fatal()

    # search for files
    args = sys.argv
    print_info('Search paths: %s' % path_prefixes)
    if args.STYLE_ALL in args:
        print_info('Styling all git tracked haskell files')
        paths = getTrackedFiles()
    else:
        print_info('Styling only changed files in git repository. To style all files use "all" option.')
        paths = getChangedTrackedFiles()

    paths = [file for file in paths if file[-3:] == '.hs']

    # filter paths with prefixes
    paths = [path for path in paths if startswithAny(path, path_prefixes)]

    # style files
    total = len(paths)
    print_info ("Styling %s files" % total)
    for i in range(total):
        path = paths[i]
        print "%s %s" % (get_progress(i+1, total), path)
        (out, err) = Popen('stylish-haskell %s' % path, stdout=PIPE, stderr=PIPE, shell=True).communicate()
        if err:
            print_error(err)
        else:
            write_if_changed(path, out)


def replaceModName(s, newname):
    name = r'''[\w'.]+'''
    pat  = re.compile(r'module\s+(?P<name>{name})\s+where'.format(**locals()), re.MULTILINE)
    modname = "module %s where" % newname
    return pat.sub(modname, s)


def modrename(args):
    path_prefixes = ['src']
    paths = getTrackedFiles()
    for path in paths:
        namePath = path.split(os.path.sep)
        namePath = dropUnless (namePath, lambda x: x in path_prefixes) [1:]
        if not len(namePath) > 1: continue
        if namePath[-1][-2:] != 'hs': continue
        name = namePath[:-1] + [removeExt(namePath[-1])]
        name = '.'.join(name)
        print name
        print path
        with open(path, 'rw') as file:
            print ">>>>>>>>>>>>>>>"
            print name
            txt = file.read()
            print replaceModName(txt, name)

    # names = [name for name in names if len(name) > 1]


    # names = [dropUnless (path, lambda x: x in path_prefixes) [1:] for path in paths]
    # names = [name for name in names if len(name) > 1]
    # names = filter(None, names)
    # names = [ name[:-1] + [removeExt(name[-1])] for name in names]
    # names = [ '.'.join(name) for name in names]

    # print paths
    pass

def removeExt(name): 
    return os.path.splitext(name)[0]

def dropUnless(lst, f):
    out = []
    ok = False
    for el in lst:
        if not ok and f(el): ok = True
        if ok: out.append(el)
    return out

# def 

def main():
    parser = argparse.ArgumentParser(description='Flowbox Development Environment Initializer')
    subparsers = parser.add_subparsers()
    parser_style     = subparsers.add_parser('style')
    parser_style.add_argument('-a', '--all', dest='STYLE_ALL', action='store_true' , help = 'Style all files, not only new git tracked ones')
    parser_style.set_defaults(func=style)
    parser_modrename = subparsers.add_parser('modrename')
    parser_modrename.set_defaults(func=modrename)

    args = parser.parse_args()
    args.func(args)


    
main()


# input = """
# ---------------------------------------------------------------------------
# -- Copyright (C) Flowbox, Inc - All Rights Reserved
# -- Unauthorized copying of this file, via any medium is strictly prohibited
# -- Proprietary and confidential
# -- Flowbox Team <contact@flowbox.io>, 2014
# ---------------------------------------------------------------------------

# module Luna.AST.Common where

# import Flowbox.Prelude


# type ID = Int
# """






