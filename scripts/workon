#!/usr/bin/python
import sys
import os.path
import sys
from subprocess import call, Popen, PIPE
from utils.colors import print_info, print_error, print_warning
from itertools import chain
from collections import deque
import ConfigParser


class Project(object):
    def __init__(self, name='', path='', binpath='', deps=None):
        if deps == None: deps = []
        self.name    = name
        self.path    = path
        self.binpath = binpath
        self.deps    = set(deps)

    def install(self):   pass

    def uninstall(self): pass

    def targets(self):
        return [self]

    def target_binpaths(self):
        paths = []
        for target in self.targets():
            paths.append(target.binpath)
        return paths

    def target_names(self):
        names = []
        for target in self.targets():
            names.append(target.name)
        return names

class HProject(Project):
    def install(self):
        cmd = 'cabal sandbox add-source %s' % self.path
        (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
        handle_error(err)
        return out

    def uninstall(self):
        cmd = 'cabal sandbox hc-pkg unregister %s' % self.name
        (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
        if err: 
            if not err.startswith('ghc-pkg: cannot find package'):
                handle_error(err)
        return out



class AllProject(Project):
    def targets(self):
        tgts = []
        for pname in reversed(deptree):
            tgts.append(pkgs[pname])
        return tgts


deptree = ['batch-srv','batch', 'lunac', 'initializer', 'wrappers',  'luna', 'config', 'utils', 'stdlibio']

pkgs = { '@all'        : AllProject (deps = deptree)
       , 'stdlibio'    : HProject   ('flowboxM-stdlib-io'  , 'libs/stdlibio'    , 'libs'     ,[]                                                 )
       , 'utils'       : HProject   ('flowbox-utils'       , 'libs/utils'       , 'libs'     ,[]                                                 )
       , 'config'      : HProject   ('flowbox-config'      , 'libs/config'      , 'libs'     ,['utils']                                          )
       , 'luna'        : HProject   ('flowbox-luna'        , 'libs/luna'        , 'libs'     ,['utils']                                          )
       , 'wrappers'    : HProject   ('flowbox-wrappers'    , 'tools/wrappers'   , 'wrappers' ,['config']                                         )
       , 'initializer' : HProject   ('flowbox-initializer' , 'tools/initializer', 'tools'    ,['utils', 'config']                                )
       , 'lunac'       : HProject   ('flowbox-lunac'       , 'tools/lunac'      , 'tools'    ,['utils', 'config', 'initializer', 'luna']         )
       , 'batch'       : HProject   ('flowbox-batch'       , 'libs/batch'       , 'libs'     ,['utils', 'config', 'luna', 'lunac']                         )
       , 'batch-srv'   : HProject   ('flowbox-batch-srv'   , 'tools/batch-srv'  , 'tools'    ,['utils', 'config', 'initializer', 'luna', 'lunac', 'batch'] )
       } 


def flatten(lofl):
    return [val for subl in lofl for val in subl]

def fatal():
    print_error ("ERROR")
    sys.exit(1)

def handle_error(e):
    if e:
        print_error(e)
        fatal()

def print_usage():
    print_info ("Usage: workon {%s} [ARGS]" % ", ".join(sorted(pkgs.keys())))
    sys.exit(0)

def main():
    args = sys.argv
    if len(args) < 2 : print_usage()
    target = sys.argv[1]
    if not target in pkgs:
        print_error ("Unrecognized target '%s'" % target)
        print_usage ()
    workon(target)

def check_deps(name):
    pkg  = pkgs[name]
    deps = pkg.deps
    for dep in pkg.deps:
        deps.union(check_deps(dep))
    return deps


def workon(name):
    unregister_all()
    pnames = check_deps(name)
    pnames.add(name)
    for pname in pnames:
        register(pname)

    pkg = pkgs[name]

    config = ConfigParser.RawConfigParser()
    config.add_section('Target')
    config.set('Target', 'names'   , ','.join(pkg.target_names()))
    config.set('Target', 'binpaths', ','.join(pkg.target_binpaths()))
    with open('.build.config', 'wb') as configfile:
        config.write(configfile)


def register(name):
    print_info("Registering %s" % name)
    pkg = pkgs[name]
    pkg.install()


def unregister_all():
    for pkg in deptree:
        unregister(pkg)


def unregister(name):
    print_info("Unregistering %s" % name)
    pkg = pkgs[name]
    pkg.uninstall()
    

main()


