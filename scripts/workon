#!/usr/bin/python
import sys
import os.path
import sys
from subprocess import call, Popen, PIPE
from utils.colors import print_info, print_error, print_warning
from itertools import chain
from collections import deque
import ConfigParser


class Project(object):
    name = ''
    path = ''
    deps = set()
    def __init__(self, name, path, deps):
        self.name = name
        self.path = path
        self.deps = set(deps)

class HProject(Project):
    def install(self):
        cmd = 'cabal sandbox add-source %s' % self.path
        (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
        return (out, err)

    def uninstall(self):
        cmd = 'cabal sandbox hc-pkg unregister %s' % self.name
        (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
        if err: 
            if not err.startswith('ghc-pkg: cannot find package'):
                handle_error(err)
        return (out, err)

class CProject(Project):
    def install(self):
        pass

    def uninstall(self):
        pass


pkgs = { 'utils'       : HProject('flowbox-utils'      , 'libs/utils'       , []                                                 )
       , 'config'      : HProject('flowbox-config'     , 'libs/config'      , ['utils']                                          )
       , 'stdlibio'    : HProject('flowboxM-stdlib-io' , 'libs/stdlibio'    , []                                                 )
       , 'initializer' : HProject('flowbox-initializer', 'tools/initializer', ['utils']                                          )
       , 'luna'        : HProject('flowbox-luna'       , 'libs/luna'        , ['utils']                                          )
       , 'batch'       : HProject('flowbox-batch'      , 'libs/batch'       , ['utils', 'luna', 'lunac']          )
       , 'batch-srv'   : HProject('flowbox-batch-srv'  , 'tools/batch-srv'  , ['utils', 'initializer', 'luna', 'lunac', 'batch'] )
       , 'lunac'       : HProject('flowbox-lunac'      , 'tools/lunac'      , ['utils', 'initializer', 'luna']                   )
       } 

deptree = ['batch-srv', 'batch', 'lunac', 'luna', 'initializer', 'config', 'utils', 'stdlibio']

def flatten(lofl):
    return [val for subl in lofl for val in subl]

def fatal():
    print_error ("ERROR")
    sys.exit(1)

def handle_error(e):
    if e:
        print_error(e)
        fatal()

def print_usage():
    print_info ("Usage: workon {%s} [ARGS]" % ", ".join(pkgs.keys()))
    sys.exit(0)

def main():
    args = sys.argv
    if len(args) < 2 : print_usage()
    target = sys.argv[1]
    workon(target)

def check_deps(name):
    pkg  = pkgs[name]
    deps = pkg.deps
    for dep in pkg.deps:
        deps.union(check_deps(dep))
    return deps


def workon(name):
    unregister_all()
    pnames = check_deps(name)
    pnames.add(name)
    for pname in pnames:
        register(pname)

    pkg = pkgs[name]

    config = ConfigParser.RawConfigParser()
    config.add_section('Target')
    config.set('Target', 'name', pkg.name)
    with open('.build.cfg', 'wb') as configfile:
        config.write(configfile)


def register(name):
    print_info("Registering %s" % name)
    pkg = pkgs[name]
    (out, err) = pkg.install()
    handle_error(err)


def unregister_all():
    for pkg in deptree:
        unregister(pkg)


def unregister(name):
    print_info("Unregistering %s" % name)
    pkg = pkgs[name]
    pkg.uninstall()
    

main()


