#!/usr/bin/python2.7
import sys
import os.path
import sys
from subprocess import call, Popen, PIPE
from utils.colors import print_info, print_error, print_warning
from itertools import chain
from collections import deque
import ConfigParser


class Project(object):
    def __init__(self, name='', path='', binpath='', deps=None):
        if deps == None: deps = []
        self.name    = name
        self.path    = path
        self.binpath = binpath
        self.deps    = set(deps)

    def install(self):   pass

    def uninstall(self): pass

    def targets(self):
        return [self]

    def target_binpaths(self):
        paths = []
        for target in self.targets():
            paths.append(target.binpath)
        return paths

    def target_names(self):
        names = []
        for target in self.targets():
            names.append(target.name)
        return names

class HProject(Project):
    def install(self):
        cmd = 'cabal sandbox add-source %s' % self.path
        (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
        handle_error(err)
        return out

    def uninstall(self):
        cmd = 'cabal sandbox hc-pkg unregister %s' % self.name
        (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
        if err:
            err = err.replace('.exe', '')
            if not err.startswith('ghc-pkg: cannot find package'):
                handle_error(err)
        return out

def try_call(cmd):
    if call(cmd, shell=True): fatal()

class AllProject(Project):
    def targets(self):
        tgts = []
        for pname in reversed(deptree):
            tgts.append(pkgs[pname])
        return tgts


deptree = [ 'project-manager', 'batch-srv', 'batch', 'lunac', 'initializer'
          , 'wrappers', 'luna', 'plugin-manager', 'bus-logger'
          , 'broker', 'bus', 'config', 'rpc', 'graphics' , 'target-hs'
          , 'cabal-install', 'num-conversion', 'utils', 'markup']

pkgs = { '@all'            : AllProject (deps = deptree)
       , 'cabal-install'   : HProject   ('cabal-install'           , os.path.join ('libs'  , 'cabal-install')  , 'libs'    , []                                                  )
       , 'target-hs'       : HProject   ('luna-target-hs'          , os.path.join ('libs'  , 'target-hs')      , 'libs'    , []                                                  )
       , 'utils'           : HProject   ('flowbox-utils'           , os.path.join ('libs'  , 'utils')          , 'libs'    , []                                                  )
       , 'config'          : HProject   ('flowbox-config'          , os.path.join ('libs'  , 'config')         , 'libs'    , ['utils']                                           )
       , 'rpc'             : HProject   ('flowbox-rpc'             , os.path.join ('libs'  , 'rpc')            , 'libs'    , ['utils']                                           )
       , 'bus'             : HProject   ('flowbox-bus'             , os.path.join ('libs'  , 'bus')            , 'libs'    , ['utils', 'config', 'rpc']                          )
       , 'broker'          : HProject   ('flowbox-broker'          , os.path.join ('tools' , 'broker')         , 'tools'   , ['utils', 'config', 'rpc', 'bus']                   )
       , 'bus-logger'      : HProject   ('flowbox-bus-logger'      , os.path.join ('tools' , 'bus-logger')     , 'tools'   , ['utils', 'config', 'rpc', 'bus']                   )
       , 'plugin-manager'  : HProject   ('flowbox-plugin-manager'  , os.path.join ('tools' , 'plugin-manager') , 'tools'   , ['utils', 'config', 'rpc', 'bus']                   )
       , 'wrappers'        : HProject   ('flowbox-wrappers'        , os.path.join ('tools' , 'wrappers')       , 'wrappers', ['config']                                          )
       , 'luna'            : HProject   ('flowbox-luna'            , os.path.join ('libs'  , 'luna')           , 'libs'    , ['target-hs', 'utils', 'config', 'cabal-install', 'markup'])
       , 'initializer'     : HProject   ('flowbox-initializer'     , os.path.join ('tools' , 'initializer')    , 'tools'   , ['utils', 'config']                                 )
       , 'lunac'           : HProject   ('flowbox-lunac'           , os.path.join ('tools' , 'lunac')          , 'tools'   , ['utils', 'config', 'initializer', 'luna']          )
       , 'batch'           : HProject   ('flowbox-batch'           , os.path.join ('libs'  , 'batch')          , 'libs'    , ['utils', 'config', 'initializer', 'luna']          )
       , 'batch-srv'       : HProject   ('flowbox-batch-srv'       , os.path.join ('tools' , 'batch-srv')      , 'tools'   , ['utils', 'config', 'initializer', 'luna', 'batch'] )
       , 'project-manager' : HProject   ('flowbox-project-manager' , os.path.join ('tools' , 'project-manager'), 'tools'   , ['utils', 'config', 'luna', 'bus', 'batch']         )
       , 'num-conversion'  : HProject   ('num-conversion'          , os.path.join ('libs'  , 'num-conversion') , 'libs'    , []                                                  )
       , 'graphics'        : HProject   ('flowbox-graphics'        , os.path.join ('libs'  , 'graphics')       , 'libs'    , ['target-hs', 'utils', 'num-conversion']            )
       , 'markup'          : HProject   ('doc-markup'              , os.path.join ('libs'  , 'markup')         , 'libs'    , []                                                  )
       }


def flatten(lofl):
    return [val for subl in lofl for val in subl]

def fatal():
    print_error ("ERROR")
    sys.exit(1)

def handle_error(e):
    if e:
        print_error(e)
        fatal()

def print_usage():
    print_info ("Usage: workon {%s} [ARGS]" % ", ".join(sorted(pkgs.keys())))
    sys.exit(0)

def main():
    args = sys.argv
    if len(args) < 2 : print_usage()
    target = sys.argv[1]
    if not target in pkgs:
        print_error ("Unrecognized target '%s'" % target)
        print_usage ()
    workon(target)

def check_deps(name):
    pkg  = pkgs[name]
    deps = pkg.deps
    for dep in pkg.deps:
        deps = deps.union(check_deps(dep))
    return deps


def workon(name):
    if not os.path.exists("cabal.sandbox.config"):
        print_info ("It seems that sandbox is not initialized. Running scripts/init first.")
        try_call("python2.7 scripts/init")

    print_info("Running gencabal")
    try_call('python2.7 scripts/gencabal')

    unregister_all()
    pnames = check_deps(name)
    pnames.add(name)
    for pname in pnames:
        register(pname)

    pkg = pkgs[name]

    config = ConfigParser.RawConfigParser()
    config.add_section('Target')
    config.set('Target', 'names'   , ','.join(pkg.target_names()))
    config.set('Target', 'binpaths', ','.join(pkg.target_binpaths()))
    with open('.build.config', 'wb') as configfile:
        config.write(configfile)


def register(name):
    print_info("Registering %s" % name)
    pkg = pkgs[name]
    pkg.install()


def unregister_all():
    for pkg in deptree:
        unregister(pkg)


def unregister(name):
    print_info("Unregistering %s" % name)
    pkg = pkgs[name]
    pkg.uninstall()


main()


