#!/usr/bin/env python2.7

###########################################################################
## Copyright (C) Flowbox, Inc / All Rights Reserved
## Unauthorized copying of this file, via any medium is strictly prohibited
## Proprietary and confidential
## Flowbox Team <contact@flowbox.io>, 2014
###########################################################################

import os.path
import os
import sys
import shutil
from subprocess   import call
from utils.glob2  import glob
from utils.colors import print_error, print_info
from utils.errors import fatal



rootPath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

cpp_gen_dirs = [os.path.join(rootPath, 'tools/batch/client/cpp/generated')]

importPaths = [ '/usr/include'
              , '/usr/local/include'
              , os.path.join(rootPath, 'dist', 'proto')
              , os.path.join(rootPath, 'libs/luna/protobuf-old/src/proto')
              , os.path.join(rootPath, 'libs/batch/batch/src/proto')
              , os.path.join(rootPath, 'libs/rpc/src/proto')
              , os.path.join(rootPath, 'libs/aws/src/proto')
              , os.path.join(rootPath, 'libs/data/serialization/src/proto')
			  , os.path.join(rootPath, 'libs/bus/src/proto')
              ]

imports = "-I " + ' -I '.join(importPaths)


def main():
    proto_paths = [os.path.realpath(path) for path in glob(rootPath + '/libs'  + '/**/*.proto')
                                                    + glob(rootPath + '/tools' + '/**/*.proto')]
    mod_proto_paths = filter(is_modified, proto_paths)
    mod_dirnames = map(os.path.dirname, mod_proto_paths)

    marked_proto_paths = []
    for mod_dirname in mod_dirnames:
        marked_proto_paths += filter(lambda x : x.startswith(mod_dirname), proto_paths)

    if marked_proto_paths:
        prepare_cpp_dir()
        for path in proto_paths:
            run_protoc(path)

    for path in marked_proto_paths:
        prepare_hs_dir(path)
    for path in marked_proto_paths:
        run_hprotoc(path)
        mark_modified(path)


def is_modified(path): 
    fileModification = str(os.path.getmtime(path))
    lastModification = None
    timestampPath = timestamp_path(path)
    if os.path.isfile(timestampPath):
        with open(timestampPath, 'r') as f: 
            lastModification = lastModification = f.read()
    return lastModification == None or lastModification < fileModification


def mark_modified(path):
    fileModification = os.path.getmtime(path)
    timestampPath = timestamp_path(path)
    timestampDir  = os.path.dirname(timestampPath)
    if not os.path.isdir(timestampDir):
        os.makedirs(timestampDir)
    with open(timestampPath, 'w') as f: f.write(str(fileModification))


def timestamp_path(path):
    return os.path.join(rootPath, os.path.join('dist/proto-timestamps', os.path.relpath(path, rootPath)))[:-6]


def run_hprotoc(proto_path):
    proto_dir  = os.path.dirname(proto_path)
    hs_gen_dir = os.path.join(proto_dir, gen_dir(proto_dir))
    proto_name = os.path.basename(proto_path)
    args = ' ' + imports + ' -I ' + proto_dir + ' ' + proto_path
    try_call('hprotoc -d ' + hs_gen_dir + args)


def run_protoc(proto_path):
    proto_dir  = os.path.dirname(proto_path)
    hs_gen_dir = os.path.join(proto_dir, gen_dir(proto_dir))
    proto_name = os.path.basename(proto_path)
    args = ' ' + imports + ' -I ' + proto_dir + ' ' + proto_path
    for cpp_gen_dir in cpp_gen_dirs:
        try_call('protoc --cpp_out=' + cpp_gen_dir + args)

def gen_dir(proto_dir):
    if os.path.basename(proto_dir) != 'proto':
        return '../../../dist/gen'
    else: 
        return '../../dist/gen'


def prepare_hs_dir(proto_path):
    proto_dir  = os.path.dirname(proto_path)
    hs_gen_dir = gen_dir(proto_dir)
    shutil.rmtree(os.path.join(proto_dir, hs_gen_dir), True)


def prepare_cpp_dir():
    for cpp_gen_dir in cpp_gen_dirs:
        shutil.rmtree(cpp_gen_dir, True)
        os.makedirs(cpp_gen_dir)


def try_call(cmd):
    print_info("Running '%s'" % cmd)
    if call(cmd, shell=True): fatal()


main()
