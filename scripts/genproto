#!/usr/bin/python2.7

###########################################################################
## Copyright (C) Flowbox, Inc / All Rights Reserved
## Unauthorized copying of this file, via any medium is strictly prohibited
## Proprietary and confidential
## Flowbox Team <contact@flowbox.io>, 2014
###########################################################################

import os.path
import os
import sys
import shutil
from subprocess   import call
from utils.glob2  import glob
from utils.colors import print_error, print_info
from utils.errors import fatal


rootPath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

cpp_gen_dirs = [os.path.join(rootPath, 'tools/batch-clients/performance/tcp/generated')
               ,os.path.join(rootPath, 'tools/batch-clients/dumper/generated')
               ,os.path.join(rootPath, 'tools/batch-clients/tcp-cpp/generated')]


importPaths = [ '/usr/include'
              , '/usr/local/include'
              , os.path.join(rootPath, 'dist', 'proto')
              , os.path.join(rootPath, 'libs/luna/src/proto')
              , os.path.join(rootPath, 'libs/batch/src/proto')
              ]
imports = "-I " + ' -I '.join(importPaths)

def main():
    proto_paths = [os.path.realpath(path) for path in glob(rootPath + '/**/*.proto')]
    prepare_cpp_dir()
    for path in proto_paths:
        prepare_hs_dir(path)
    for path in proto_paths:
        run_protoc(path)

def run_protoc(proto_path):
    proto_dir  = os.path.dirname(proto_path)
    hs_gen_dir = os.path.join(proto_dir, '../../dist/gen')
    proto_name = os.path.basename(proto_path)

    args = ' ' + imports + ' -I ' + proto_dir + ' ' + proto_path

    for cpp_gen_dir in cpp_gen_dirs:
        try_call('protoc --cpp_out=' + cpp_gen_dir + args)

    try_call('hprotoc -d ' + hs_gen_dir + args)

def prepare_hs_dir(proto_path):
    proto_dir  = os.path.dirname(proto_path)
    hs_gen_dir = '../../dist/gen'

    shutil.rmtree(os.path.join(proto_dir, hs_gen_dir), True)

def prepare_cpp_dir():
    for cpp_gen_dir in cpp_gen_dirs:
        shutil.rmtree(cpp_gen_dir, True)
        os.makedirs(cpp_gen_dir)

def try_call(cmd):
    print_info("Running '%s'" % cmd)
    if call(cmd, shell=True): fatal()

main()

