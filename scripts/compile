#!/usr/bin/python2.7

###########################################################################
## Copyright (C) Flowbox, Inc / All Rights Reserved
## Unauthorized copying of this file, via any medium is strictly prohibited
## Proprietary and confidential
## Flowbox Team <contact@flowbox.io>, 2014
###########################################################################

import sys
import os.path
import os
import shutil
import sys
import platform
from subprocess import call, Popen, PIPE
from utils.colors import print_info, print_error, print_warning
from itertools import chain
from collections import deque
import ConfigParser
from config.packages import pkgDb
from utils.system import platformFix


rootPath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sboxName = 'dist'
cabalConf = "cabal.config"
os.chdir(rootPath)

def handle_ret(ret):
    if ret != 0:
        sys.exit(ret)

def handle_out(code):
    if code:
        print_error("ERROR")
        sys.exit(code)

def getHaskellPlatformRoot():
    cmd = 'ghc --info'
    (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
    handle_out(err)

    cfglines = [line for line in out.split('\n') if 'LibDir' in line]
    if len(cfglines) != 1:
        print_error ("ghc --info returned %s results for 'LibDir' (should be exactly 1)" % len(cfglines))
        sys.exit(1)
    line = cfglines[0]
    val  = line.split(',')[-1][1:-3]
    path = os.path.dirname(val)
    return path

sboxEnv = "FDEV_TARGETS"

class Target:
    def __init__(self, name, sbox):
        self.name = name
        self.sbox = sbox

    def __str__(self):
        return "Target %s (%s)" % (self.name, self.sbox)

def main():
    platformFix(sboxName)
    pkgNames = []
    args = []
    for arg in sys.argv[1:]:
        if arg.startswith('--pkgs='):
            pkgNames = arg[7:].split(',')
        else: args.append(arg)

    if not pkgNames:
        if not os.environ.has_key(sboxEnv):
            print_error("Flowbox development environment not initialized.")
            sys.exit(1)

        pkgNames = os.environ[sboxEnv].split(":")
    
    pkgs = [pkgDb[name] for name in pkgNames]

    print_info("Running gencabal")
    ret = call('python2.7 scripts/gencabal', shell=True)
    handle_ret(ret)

    cwd = os.getcwd()

    dist_dir = os.path.join(rootPath, 'dist')
    bin_dir = os.path.join(dist_dir, 'bin')

    for pkg in pkgs:
        print_info ("Compiling %s" % pkg.name)

        os.chdir(pkg.sbox)

        cabalConfigSrc = os.path.join(rootPath, cabalConf) 
        dstConfigCopy = pkg.sbox
        shutil.copy(cabalConfigSrc, dstConfigCopy)

        instPath = os.path.join(dist_dir, 'bin', pkg.binpath)
        ret = call('cabal install --solver=topdown --force-reinstalls --reinstall --bindir=%s %s %s' % (instPath, pkg.name, ' '.join(args + pkg.flags)), shell=True)
        # FIXME [PM] : --solver=topdown --force-reinstalls is added to solve problem described here: http://www.reddit.com/r/haskell/comments/26045a/if_youre_finding_cabal_cant_build_your_project/
        handle_ret(ret)


main()


