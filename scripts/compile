#!/usr/bin/python
import os
import os.path
import sys
from subprocess import call, Popen, PIPE


libs  = []
execs = []

options        = set(['@all', 'libs/utils', 'libs/luna', 'libs/batch', 'tools/batch-srv', 'tools/lunac', '@luna', '@batch', '@cppclient'])
opts_all       = options
opts_utils     = set(['@all', 'libs/utils'])
opts_lunalib   = set(['@all', 'libs/luna'])
opts_batchlib  = set(['@all', 'libs/batch'])
opts_batchsrv  = set(['@all', 'tools/batch-srv'])
opts_lunac     = set(['@all', 'tools/lunac'])
opts_luna      = set(['@all', '@luna'])
opts_batch     = set(['@all', '@batch'])
opts_cppclient = set(['@all', '@cppclient'])


def wrong_use():
    print_usage()
    sys.exit()

def try_call(args):
    if call(args): error()

def error():
    print "ERROR"
    sys.exit(1)

def print_usage():
    print "Usage: compile {%s}" % ", ".join(options)


def info(s):
    print
    print "=== %s ===" % s


def main():
    cmds = set(sys.argv[1:])
    if len(cmds) == 0: wrong_use()
    if not cmds <= options:
        diff = cmds - options
        print "Unrecognized options %s" % ", ".join(["'%s'" % opt for opt in diff])
        wrong_use()

    dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
    p_utils    = os.path.join(dir, 'libs',  'utils')
    p_luna     = os.path.join(dir, 'libs',  'luna')
    p_batch    = os.path.join(dir, 'libs',  'batch')
    p_batchsrv = os.path.join(dir, 'tools', 'batch-srv')
    p_lunac    = os.path.join(dir, 'tools', 'lunac')
    p_cppclient= os.path.join(dir, 'tools', 'batch-clients', 'cpp')


    if cmds & (opts_utils | opts_luna | opts_batch):
        info("Compiling utils library")
        try_call(['cabal', 'install', p_utils, '--force-reinstalls'])

    if cmds & (opts_lunalib | opts_luna | opts_batch):
        info("Compiling luna library")
        try_call(['cabal', 'install', p_luna, '--force-reinstalls'])

    if cmds & (opts_lunac | opts_luna):
        info("Compiling lunac")
        try_call(['cabal', 'install', p_lunac, '--force-reinstalls'])

    if cmds & (opts_batchlib | opts_batch):
        info("Compiling batch library")
        try_call(['cabal', 'install', p_batch, '--force-reinstalls'])

    if cmds & (opts_batchsrv | opts_batch):
        info("Compiling batchsrv")
        try_call(['cabal', 'install', p_batchsrv, '--force-reinstalls'])

    if cmds & (opts_cppclient):
        info("Compiling CPP-Client")
        cwd = os.getcwd()
        os.chdir(p_cppclient)
        try_call(['make'])
        os.chdir(cwd)

main()