#!/usr/bin/python
import sys
import os.path
import sys
import platform
from subprocess import call, Popen, PIPE
from utils.colors import print_info, print_error, print_warning
from itertools import chain
from collections import deque
import ConfigParser
import os.path


def handle_ret(ret):
    if ret != 0:
        sys.exit(ret)

def handle_out(code):
    if code:
        print_error("ERROR")
        sys.exit(code)

def getHaskellPlatformRoot():
    cmd = 'ghc --info'
    (out, err) = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True).communicate()
    handle_out(err)

    cfglines = [line for line in out.split('\n') if 'LibDir' in line]
    if len(cfglines) != 1:
        print_error ("ghc --info returned %s results for 'LibDir' (should be exactly 1)" % len(cfglines))
        sys.exit(1)
    line = cfglines[0]
    val  = line.split(',')[-1][1:-3]
    path = os.path.dirname(val)
    return path

def main():
    # print_info("Running gencabal")
    # ret = call('python scripts/gencabal', shell=True)
    # handle_ret(ret)

    # We have to put Haskells mingw on the beginning of the Path not to use system one
    if platform.system() == "Windows":
        root = getHaskellPlatformRoot()
        mingwPath = os.path.join(root, "mingw", "bin")
        os.environ['PATH'] = mingwPath + os.pathsep + os.environ['PATH']

    cwd = os.getcwd()
    dist_dir = os.path.join(cwd, 'dist')
    bin_dir = os.path.join(dist_dir, 'bin')

    cfgname = '.build.config'
    if not os.path.isfile(cfgname):
        print_error("No build configuration file found. Run 'workon' script.")
        sys.exit(1)
    
    config = ConfigParser.RawConfigParser()
    config.read(cfgname)

    print_info("Binary path is set to '%s'" % bin_dir)
    
    names    = config.get('Target', 'names').split(',')
    binpaths = config.get('Target', 'binpaths').split(',')
    for (name, path) in zip(names, binpaths):
        inst_path = os.path.join(bin_dir, path)
        print_info("Compiling %s [-> %s]" % (name, path))
        #ret = call(['cabal', 'install', '--reinstall', '--bindir=%s'%inst_path, name] + sys.argv[1:])
        ret = call('cabal install --reinstall --bindir=%s %s %s' % (inst_path, name, ' '.join(sys.argv[1:])), shell=True)
        handle_ret(ret)

    sys.exit(0)

main()


