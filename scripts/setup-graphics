#!/usr/bin/env python2.7

###########################################################################
## Copyright (C) Flowbox, Inc / All Rights Reserved
## Unauthorized copying of this file, via any medium is strictly prohibited
## Proprietary and confidential
## Flowbox Team <contact@flowbox.io>, 2014
###########################################################################

import sys
import os.path
import shutil
from subprocess        import Popen, PIPE, call

from utils.colors      import print_info, print_error, print_warning, formatQuestion
from utils.errors      import fatal
from distutils.version import LooseVersion


myPath = os.path.dirname(os.path.realpath(__file__))
rootPath = os.path.dirname(myPath)
distGraphicsPath = os.path.join(rootPath,'dist/libs/graphics/graphics')
# sandboxPath = os.path.join(distGraphicsPath,'.cabal-sandbox')
sandboxPath = distGraphicsPath

submodulesDirName = 'third-party'
submodulesDir = os.path.join(rootPath, submodulesDirName)
# changing the following list does not automatically install the packages, just handles the initiation of git submodules
repositories = [ ''
               , ''
               ]
submodules = [ ('cuda', 'git@github.com:tmcdonell/cuda.git')
             , ('accelerate', 'git@github.com:AccelerateHS/accelerate.git')
             , ('accelerate-io', 'git@github.com:AccelerateHS/accelerate-io.git')
             , ('accelerate-cuda', 'git@github.com:AccelerateHS/accelerate-cuda.git')
             , ('linear-accelerate', 'git@github.com:ekmett/linear-accelerate.git')
             , ('algebraic', 'git@github.com:wdanilo/algebraic.git')
             , ('protocol-buffers', 'git@github.com:korrix/protocol-buffers.git')
             ]
submodulesDirs = map(lambda t: os.path.join(submodulesDir, t[0]), submodules)

cwd = os.getcwd()

debugAccelerate = '--debug-accelerate' in sys.argv

def checkPath(path):
    if os.path.exists(path):
        print_warning("The path '%s' exists. " % path)
        # shutil.rmtree(path)
        return True
    return False

def ask(question):
    answer = None
    while True:
        ansRaw = raw_input(formatQuestion(question) + " [Y/n] ")
        ans = ansRaw.lower()
        if ans not in ["", "y", "yes", "n", "no"]:
            print_error("'%s' is not a valid answer, please choose beetween YES or NO." % ansRaw)
        else: break
    if ans in ["", "y", "yes"]: return True
    else:                       return False

def checkVersion(what, minv):
    print_info ("Checking %s version (>= %s)" % (what, minv))
    (out, err) = Popen(what + " --numeric-version", stdout=PIPE, shell=True).communicate()
    out = out.lstrip().rstrip()
    if not LooseVersion(out) >= LooseVersion(minv): return (False, "Your %s version is too old (%s)" % (what, out))
    else: return (True, None)

def try_call(cmd):
    print_info ("Running '%s'" % cmd)
    if call(cmd, shell=True): fatal()

def cabalInstall(pkg):
    print_info("installing cabal pakcage(s): %s" % pkg)
    try_call("cabal install %s" % pkg)

def installThirdParty(pkg,flags=''):
    tmp = os.getcwd()
    print_info("Configuring and installing %s" % pkg)

    os.chdir(os.path.join(submodulesDir,pkg))
    try_call("cabal sandbox init --sandbox=%s" % sandboxPath)
    try_call("cabal install --only-dependencies") # if this won't work, check with the -w option
    try_call("cabal configure %s" % flags)
    try_call("cabal install %s" % flags) # why install? (copied from Gadek's script), shouldn't it be just build, since we did the configuration part in the previous line?

    os.chdir(tmp)

# - - - - - - - - - - - - - - - - - - - -
# - - - - - - - - - - - - - - - - - - - -
# - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - -
# check if everything is set up correctly
# - - - - - - - - - - - - - - - - - - - -

if not debugAccelerate and not ask("Accelerate will not be installed in debug mode! Would you still like to continue?"):
    exit(0)

result,error = checkVersion("ghc", "7.8.2")
if not result:
    print_error(error)
    fatal()

result,error = checkVersion("cabal", "1.20")
if not result:
    print_error(error)
    fatal()

# - - - - - - - - - - - - - - - - - - - -
# go to the root path
# - - - - - - - - - - - - - - - - - - - -

os.chdir(rootPath)

# - - - - - - - - - - - - - - - - - - - -
# handle submodules
# - - - - - - - - - - - - - - - - - - - -

# print ' '.join(submodulesDirs)
ommitedAnySubmodule = False
print_info("adding submodules to `%s`: " % submodulesDirName)
print map(lambda t: t[0], submodules)
for t in submodules:
    path = os.path.join(submodulesDirName, t[0])
    if os.path.exists(path):
        print_warning("ommiting submodule `%s` - already has it's direcoty: %s" % (t[0], path))
        ommitedAnySubmodule = True
    else:
        try_call("git submodule add %s %s" % (t[1], path))

if ommitedAnySubmodule and not ask("Some submodules have been ommited in the `git submodule add` phase, do you still want to continue?"):
    exit(0)

print_info("initialising submodules in `%s`: " % submodulesDirName)
print map(lambda t: t[0], submodules)
try_call("git submodule init %s" % (' '.join(submodulesDirs)))
try_call("git submodule update")

print_info("ignoring untracked files in submodules:")
print map(lambda t: t[0], submodules)
for t in submodules:
    path = os.path.join(submodulesDirName, t[0])
    try_call("git config submodule.%s.ignore untracked" % path)

# - - - - - - - - - - - - - - - - - - - -
# install dependencies
# - - - - - - - - - - - - - - - - - - - -

os.chdir(distGraphicsPath)

cabalInstall("c2hs")
installThirdParty('cuda', "--enable-executable-dynamic %s" % '-fdebug' if debugAccelerate else '')
installThirdParty('accelerate', '-fdebug' if debugAccelerate else '')
cabalInstall("imagemagick") # it's here so accelerate's io dependency (QuickCheck) can resolve a correct version of transformers (imagemagick uses a very fucking old version of those) # at least I think this should fix the problem with dependencies
installThirdParty('accelerate-io', '-fdebug' if debugAccelerate else '')
installThirdParty('accelerate-cuda', '-fdebug' if debugAccelerate else '')
installThirdParty('linear-accelerate')
installThirdParty('algebraic')
installThirdParty('protocol-buffers')

cabalInstall("happy alex")

# print_info("installing other dependencies")
# cabalInstall("%s %s %s" % (os.path.join(submodulesDir,'linear-accelerate/linear-accelerate.cabal')
#                           , os.path.join(submodulesDir,'algebraic/algebraic.cabal')
#                           , os.path.join(submodulesDir,'protocol-buffers/protocol-buffers.cabal')
#                           ))

# print_info("installing accelerate %s" % '(with debug)' if debugAccelerate else '')
# cabalInstall("%s %s %s %s" % ('-fdebug' if debugAccelerate else ''
#                            , os.path.join(submodulesDir,'accelerate/accelerate.cabal')
#                            , os.path.join(submodulesDir,'accelerate-io/accelerate-io.cabal')
#                            , os.path.join(submodulesDir,'accelerate-cuda/accelerate-cuda.cabal')
#                            ))
# print_info("installing other dependencies")
# cabalInstall("%s %s %s" % (os.path.join(submodulesDir,'linear-accelerate/linear-accelerate.cabal')
#                       , os.path.join(submodulesDir,'algebraic/algebraic.cabal')
#                       , os.path.join(submodulesDir,'protocol-buffers/protocol-buffers.cabal')
#                       ))

print_info ("- - - END - - -")
