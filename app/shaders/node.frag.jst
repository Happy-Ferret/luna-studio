#ifdef GL_ES
precision highp float;
#endif

varying vec2 coords;
uniform float camFactor;
uniform int selected;
uniform float mouseDist;

uniform vec3 insideColor;
uniform vec3 unselectedColor;
uniform vec3 overColor;
uniform vec3 selectedColor;
uniform vec3 focusedColor;

void main() {
  vec2 posN = (gl_FragCoord.xy - coords) / camFactor;
  float dist_squared = dot(posN, posN);

  float camFactorDelta = camFactor - 1.0;
  float rimCamFactor  = 1.0;
  float blurCamFactor = 1.0;
  if (camFactorDelta > 0.0) {
    rimCamFactor  += camFactorDelta / 50.0;
    blurCamFactor += camFactorDelta / 1.5;
  } else if (camFactorDelta < 0.0) {
    rimCamFactor  += camFactorDelta / 10.0;
    blurCamFactor += camFactorDelta / 1.1;
  }
  float blurWidth = 60.0;
  float rimWidth = 200.0;
  float r4 = 900.0;
  float r3 = r4 - blurWidth / blurCamFactor;
  float r2 = r3 -  rimWidth /  rimCamFactor;
  float r1 = r2 - blurWidth / blurCamFactor;

  float d_blur_r34 = 1.0 - (dist_squared - r3) / (r4 - r3);
  float d_blur_r12 = (dist_squared - r1) / (r2 - r1);

  float bg_gray = 0.1;
  vec3 color = unselectedColor;
  if (selected == 1) {
    color = selectedColor;
  } else if (selected == 2) {
    color = focusedColor;
  } else {
    float distMix  = 0.0;
    float gradRange  = 100.0;
    float colorRange =  30.0;
    if (mouseDist < colorRange) {
        distMix = 1.0;
    } else if (mouseDist < gradRange) {
        float coef = (mouseDist - colorRange) / (gradRange - colorRange);
        float coefR = 1.0 - coef;
        distMix = coefR * coefR * coefR;
    }
    color = distMix * overColor + (1.0 - distMix) * unselectedColor;
  }

  if (dist_squared < r1) {
    gl_FragColor = vec4(insideColor, 1.0);
  } else if (dist_squared < r2) {
    vec3 mix = insideColor * (1.0 - d_blur_r12) + color * (d_blur_r12);
    gl_FragColor = vec4(mix, 1.0);
  } else if (dist_squared < r3) {
    gl_FragColor = vec4(color, 1.0);
  } else if (dist_squared < r4) {
    gl_FragColor = vec4(color, d_blur_r34);
  } else {
    gl_FragColor = vec4(color, 0.0);
  }
}
