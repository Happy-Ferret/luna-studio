#ifdef GL_ES
precision highp float;
#endif

varying vec2  pos;

uniform float camFactor;
uniform vec2  nodeSize;

uniform vec3  expandedColor;

uniform float radiusTop;
uniform float radiusBottom;

uniform int   antialias;
uniform int   objectMap;
uniform vec3  objectId;

void main() {
    vec2  posN         = pos * nodeSize;
    float dist_squared = dot(posN, posN);

    float r            = min(min(posN.x, posN.y), min(nodeSize.x - posN.x, nodeSize.y - posN.y));

    vec2 posE;
    if(posN.x < radiusTop && posN.y < radiusTop) { // TOP LEFT
        posE = posN + vec2(-radiusTop , -radiusTop);
        r    = radiusTop - sqrt(dot(posE, posE));
    } else if(posN.x < radiusBottom && posN.y > nodeSize.y - radiusBottom) { // BOTTOM LEFT
        posE = posN + vec2(-radiusBottom, -nodeSize.y + radiusBottom);
        r    = radiusBottom - sqrt(dot(posE, posE));
    } else if(posN.x > nodeSize.x - radiusTop && posN.y < radiusTop) { // TOP RIGHT
        posE = posN + vec2(-nodeSize.x + radiusTop, - radiusTop);
        r    = radiusTop - sqrt(dot(posE, posE));
    } else if(posN.x > nodeSize.x - radiusBottom && posN.y > nodeSize.y - radiusBottom) { // BOTTOM RIGHT
        posE = posN + vec2(-nodeSize.x + radiusBottom, -nodeSize.y + radiusBottom);
        r    = radiusBottom - sqrt(dot(posE, posE));
    }

    float blurCamFactor  = 1.0;
    float camFactorDelta = camFactor - 1.0;

    if (camFactorDelta > 0.0) {
        blurCamFactor += camFactorDelta /  1.5;
    } else if (camFactorDelta < 0.0) {
        blurCamFactor += camFactorDelta /  1.1;
    }


    float blurWidth  =  1.0;
    float rimWidth   =  5.0;
    float r4         =  0.0;
    float r3         =      blurWidth / blurCamFactor;

    float d_blur_r34 = 1.0;



    if (antialias != 0) {
        d_blur_r34 = 1.0 - (r - r3) / (r4 - r3);
    }

    if (objectMap == 0) {
        if (r > r4) {
            gl_FragColor = vec4(expandedColor, 1.0);
        } else if (r > r3) {
            gl_FragColor = vec4(expandedColor, d_blur_r34);
        } else {
            // colorShow = vec4(0.1, 0.1, 0.0, 1.0);
            discard;
        }
    } else {
        if (r > r4) {
            gl_FragColor = vec4(objectId, 1.0);
        } else {
            discard;
        }
    }
}
