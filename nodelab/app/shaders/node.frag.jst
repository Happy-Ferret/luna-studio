#ifdef GL_ES
precision highp float;
#endif
uniform int   selected;
uniform int   error;
uniform int   highlight;

uniform vec3  unselectedColor;
uniform vec3  selectedColor;
uniform vec3  errorColor;
uniform int   connectionPen;

<%= require('shaders/stdlib')() %>

void main(void) {

    vec3 local   = vec3(luv * size, 0.0);
    vec3 ulocal  = local * dpr;
    vec2 p       = ulocal.xy - size / 2.0;


    if (objectMap == 1) {
        gl_FragColor = vec4(objectId, sdf_sharp(sdf_ball(p, 20.0 + float(20 * connectionPen))));
    } else {

        float nodeShape = sdf_ball(p, 20.0);

        float cycek =sdf_intersect(
                        sdf_pie(sdf_rotateCCW(p, 1.0 * M_PI / 4.0), M_PI / 2.0),
                        sdf_subtract(
                          sdf_ball(p, 22.0),
                          sdf_rect(p + vec2(-12.5, 12.5), vec2(25.0, 25.0), vec4(0.0, 0.0, 0.0, 5.0))
                        )
                    );

        cycek = 1.0;

        float selectedShape = sdf_merge(
                sdf_ring(p, 25.0, 3.0),
                cycek
            );
        float errorShape = sdf_subtract(
                             sdf_rect(sdf_rotateCCW(p + vec2(-16.0, -16.0), 0.785), vec2(11.0, 100.0)),
                             sdf_subtract(
                               sdf_rect(sdf_rotateCCW(p + vec2(16.0, 16.0), 0.785), vec2(11.0, 100.0)),
                               sdf_subtract(
                                 sdf_rect(sdf_rotateCCW(p, 0.785) , vec2(11.0, 100.0)),
                                 sdf_subtract(
                                   sdf_ball(p, 22.0),
                                   sdf_ball(p, 40.0)
                                 )
                               )
                             )
                           );

        vec4 errorC    = vec4(errorColor,    float(error) * sdf_aa(errorShape));
        vec4 selectedC = vec4(selectedColor, float(selected) * sdf_aa(selectedShape));
        vec4 bkgC      = vec4(0.2, 0.2 ,0.2, float(highlight) * sdf_aa(nodeShape));
        gl_FragColor = blend(blend(bkgC, errorC), selectedC);
    }
}
