uniform int   selected;
uniform int   error;
uniform int   highlight;
uniform int   collaboration;

uniform vec3  unselectedColor;
uniform vec3  selectedColor;
uniform vec3  errorColor;
uniform vec3  collaborationColor;
uniform int   connectionPen;

<%= require('shaders/stdlib')() %>

float collaborationShape(vec2 p, float radius) {
    float cycek = sdf_intersect(
                    sdf_pie(sdf_rotateCCW(p, 1.0 * M_PI / 4.0), M_PI / 2.0),
                    sdf_subtract(
                      sdf_ball(p, radius - 3.0),
                      sdf_rect(p + vec2(-radius / 2.0 , radius / 2.0), vec2(radius, radius), vec4(0.0, 0.0, 0.0, 5.0))
                    )
                );

    float shape = sdf_merge(
            sdf_ring(p, radius, 3.0),
            cycek
        );
    return shape;
}

void main(void) {

    vec3 local   = vec3(luv * size, 0.0);
    vec3 ulocal  = local * dpr;
    vec2 p       = ulocal.xy - size / 2.0;


    if (objectMap == 1) {
        gl_FragColor = vec4(objectId, sdf_sharp(sdf_ball(p, 20.0 + float(20 * connectionPen))));
    } else {

        float nodeShape = sdf_ball(p, 20.0);


        float selectedShape = sdf_ring(p, 25.0, 3.0);
        float errorShape = sdf_subtract(
                             sdf_rect(sdf_rotateCCW(p + vec2(-16.0, -16.0), 0.785), vec2(11.0, 100.0)),
                             sdf_subtract(
                               sdf_rect(sdf_rotateCCW(p + vec2(16.0, 16.0), 0.785), vec2(11.0, 100.0)),
                               sdf_subtract(
                                 sdf_rect(sdf_rotateCCW(p, 0.785) , vec2(11.0, 100.0)),
                                 sdf_subtract(
                                   sdf_ball(p, 22.0),
                                   sdf_ball(p, 40.0)
                                 )
                               )
                             )
                           );

        vec4 errorC          = vec4(errorColor,    float(error) * sdf_aa(errorShape));
        vec4 collaborationC  = vec4(collaborationColor, float(collaboration) * sdf_aa(collaborationShape(p, 28.0)) * 0.44);
        vec4 selectedC       = vec4(selectedColor, float(selected) * sdf_aa(selectedShape));
        vec4 bkgC            = vec4(selectedColor, 0.25 * float(highlight) * sdf_aa(nodeShape));

        gl_FragColor         = blend(blend(bkgC, errorC),
                                     blend(collaborationC,
                                           selectedC));
    }
    if (gl_FragColor.a < 0.01) discard;
}
