precision mediump float;

uniform float angle;
uniform int portCount;
uniform int onlyPort;
uniform vec4 color;
uniform int highlight;
uniform int connectionPen;

<%= require('shaders/stdlib')() %>

void main(void) {

    vec3 local   = vec3(luv * size, 0.0);
    vec3 ulocal  = local * dpr;
    vec2 p       = ulocal.xy - size / 2.0;


    float span = M_PI / float(portCount);
    p = sdf_rotateCCW(p, angle + M_PI / 2.0);

    float spacing = 2.0;

    float ring = sdf_ring(p, 20.0 + float(objectMap)*5.0, 3.0 + float(objectMap)*8.0);
    float opacity = sdf_intersect(
        sdf_halfplaneRight(sdf_rotateCCW(p, span / 2.0) + vec2(spacing, 0.0)),
        sdf_intersect(
			sdf_halfplaneLeft(sdf_rotateCW(p, span / 2.0) - vec2(spacing, 0.0)),
	        sdf_intersect(
    	        sdf_pie(p, span),
        	    ring
	        )
        )
    );

    opacity = float(onlyPort) * ring + (1.0 - float(onlyPort)) * opacity;

    if (objectMap == 1) {
        gl_FragColor = vec4(objectId, sdf_sharp(opacity) * float(1 - connectionPen));
    } else {
        gl_FragColor = vec4(color.xyz + vec3(0.3,0.3,0.3) * float(highlight), sdf_aa(opacity));
    }
}
