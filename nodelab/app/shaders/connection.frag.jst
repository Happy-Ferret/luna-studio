precision mediump float;

uniform vec4 color;
uniform int  highlight;
uniform int  arrow;

<%= require('shaders/stdlib')() %>

void main(void) {
    float endCoeff = 0.2;

    vec3 local   = vec3(luv * size, 0.0);
    vec3 ulocal  = local * dpr;
    vec2 p       = ulocal.xy - size / 2.0;
    float length = size.x - max(9.0, float(30 * objectMap));
    float lineMid = sdf_rect(p, vec2(length * endCoeff, 3.0));

    float shouldArrow = 1.0 - max(float(objectMap), (1.0 - float(arrow)));
    float lineStart = sdf_rect(p - vec2(length * 0.3, 0.0), vec2(length * (1.0 - endCoeff) / 2.0, 3.0) );
    float lineEnd   = sdf_rect(p + vec2(length * 0.3, 0.0), vec2(length * (1.0 - endCoeff) / 2.0, 3.0) );
    float arrow     = sdf_triangle(sdf_rotateCCW(p - vec2(size.x / 2.0 - 6.0, 0.0), M_PI/6.0), 6.0);
    lineStart = (1.0 - shouldArrow) * lineStart + shouldArrow * sdf_merge(lineStart, arrow);

    float bg   = sdf_rect(p, vec2(size.x - 10.0, 5.0));
    if (objectMap == 1) {
        gl_FragColor = vec4(objectId, sdf_sharp(sdf_rect(p, vec2(length, 8.0))));
    } else {
        float hlStart = 1.0 - abs(1.0 - float(highlight));
        float hlEnd = max(float(highlight) - 1.0, 0.0);

        vec4 colorStart = color * (1.0 + hlStart * 0.3);
        vec4 colorEnd   = color * (1.0 + hlEnd * 0.3);

        gl_FragColor = vec4(0.1, 0.1, 0.1, sdf_aa(bg));
        vec4 lineStartCol = vec4(colorStart.xyz, colorStart.a * sdf_aa(lineStart));
        vec4 lineMidCol = vec4(color.xyz, color.a * sdf_aa(lineMid));
        vec4 lineEndCol = vec4(colorEnd.xyz, colorEnd.a * sdf_aa(lineEnd));
        gl_FragColor = blend(gl_FragColor, lineMidCol);
        gl_FragColor = blend(gl_FragColor, lineStartCol);
        gl_FragColor = blend(gl_FragColor, lineEndCol);
    }
}
